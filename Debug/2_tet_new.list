
2_tet_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000300  08008478  08008478  00018478  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008778  08008778  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08008778  08008778  00018778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008780  08008780  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008780  08008780  00018780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008784  08008784  00018784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08008788  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008be8  20000010  08008798  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008bf8  08008798  00028bf8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e993  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b38  00000000  00000000  0003e9d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001988  00000000  00000000  00042510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001830  00000000  00000000  00043e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000452b  00000000  00000000  000456c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c390  00000000  00000000  00049bf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100c7c  00000000  00000000  00065f83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00166bff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c10  00000000  00000000  00166c50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008460 	.word	0x08008460

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08008460 	.word	0x08008460

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004da:	f001 fd1b 	bl	8001f14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004de:	f000 f91b 	bl	8000718 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e2:	f000 f9d9 	bl	8000898 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e6:	f000 f9a7 	bl	8000838 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80004ea:	f000 f967 	bl	80007bc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004ee:	f004 ff41 	bl	8005374 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  buttonA = xSemaphoreCreateBinary();
 80004f2:	2203      	movs	r2, #3
 80004f4:	2100      	movs	r1, #0
 80004f6:	2001      	movs	r0, #1
 80004f8:	f005 f9fc 	bl	80058f4 <xQueueGenericCreate>
 80004fc:	4603      	mov	r3, r0
 80004fe:	4a64      	ldr	r2, [pc, #400]	; (8000690 <main+0x1bc>)
 8000500:	6013      	str	r3, [r2, #0]
  buttonB = xSemaphoreCreateBinary();
 8000502:	2203      	movs	r2, #3
 8000504:	2100      	movs	r1, #0
 8000506:	2001      	movs	r0, #1
 8000508:	f005 f9f4 	bl	80058f4 <xQueueGenericCreate>
 800050c:	4603      	mov	r3, r0
 800050e:	4a61      	ldr	r2, [pc, #388]	; (8000694 <main+0x1c0>)
 8000510:	6013      	str	r3, [r2, #0]
  buttonC = xSemaphoreCreateBinary();
 8000512:	2203      	movs	r2, #3
 8000514:	2100      	movs	r1, #0
 8000516:	2001      	movs	r0, #1
 8000518:	f005 f9ec 	bl	80058f4 <xQueueGenericCreate>
 800051c:	4603      	mov	r3, r0
 800051e:	4a5e      	ldr	r2, [pc, #376]	; (8000698 <main+0x1c4>)
 8000520:	6013      	str	r3, [r2, #0]
  displayUsartSem = xSemaphoreCreateBinary();
 8000522:	2203      	movs	r2, #3
 8000524:	2100      	movs	r1, #0
 8000526:	2001      	movs	r0, #1
 8000528:	f005 f9e4 	bl	80058f4 <xQueueGenericCreate>
 800052c:	4603      	mov	r3, r0
 800052e:	4a5b      	ldr	r2, [pc, #364]	; (800069c <main+0x1c8>)
 8000530:	6013      	str	r3, [r2, #0]
  initializeBoardSem = xSemaphoreCreateBinary();
 8000532:	2203      	movs	r2, #3
 8000534:	2100      	movs	r1, #0
 8000536:	2001      	movs	r0, #1
 8000538:	f005 f9dc 	bl	80058f4 <xQueueGenericCreate>
 800053c:	4603      	mov	r3, r0
 800053e:	4a58      	ldr	r2, [pc, #352]	; (80006a0 <main+0x1cc>)
 8000540:	6013      	str	r3, [r2, #0]
  newBlockSem = xSemaphoreCreateBinary();
 8000542:	2203      	movs	r2, #3
 8000544:	2100      	movs	r1, #0
 8000546:	2001      	movs	r0, #1
 8000548:	f005 f9d4 	bl	80058f4 <xQueueGenericCreate>
 800054c:	4603      	mov	r3, r0
 800054e:	4a55      	ldr	r2, [pc, #340]	; (80006a4 <main+0x1d0>)
 8000550:	6013      	str	r3, [r2, #0]
  checkRowsSem = xSemaphoreCreateBinary();
 8000552:	2203      	movs	r2, #3
 8000554:	2100      	movs	r1, #0
 8000556:	2001      	movs	r0, #1
 8000558:	f005 f9cc 	bl	80058f4 <xQueueGenericCreate>
 800055c:	4603      	mov	r3, r0
 800055e:	4a52      	ldr	r2, [pc, #328]	; (80006a8 <main+0x1d4>)
 8000560:	6013      	str	r3, [r2, #0]
  lostSem = xSemaphoreCreateBinary();
 8000562:	2203      	movs	r2, #3
 8000564:	2100      	movs	r1, #0
 8000566:	2001      	movs	r0, #1
 8000568:	f005 f9c4 	bl	80058f4 <xQueueGenericCreate>
 800056c:	4603      	mov	r3, r0
 800056e:	4a4f      	ldr	r2, [pc, #316]	; (80006ac <main+0x1d8>)
 8000570:	6013      	str	r3, [r2, #0]
  displaySPISem = xSemaphoreCreateBinary();
 8000572:	2203      	movs	r2, #3
 8000574:	2100      	movs	r1, #0
 8000576:	2001      	movs	r0, #1
 8000578:	f005 f9bc 	bl	80058f4 <xQueueGenericCreate>
 800057c:	4603      	mov	r3, r0
 800057e:	4a4c      	ldr	r2, [pc, #304]	; (80006b0 <main+0x1dc>)
 8000580:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  feld = xQueueCreate(1, sizeof(int) *8 *8);
 8000582:	2200      	movs	r2, #0
 8000584:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000588:	2001      	movs	r0, #1
 800058a:	f005 f9b3 	bl	80058f4 <xQueueGenericCreate>
 800058e:	4603      	mov	r3, r0
 8000590:	4a48      	ldr	r2, [pc, #288]	; (80006b4 <main+0x1e0>)
 8000592:	6013      	str	r3, [r2, #0]
  position = xQueueCreate(1, sizeof(int) *2);
 8000594:	2200      	movs	r2, #0
 8000596:	2108      	movs	r1, #8
 8000598:	2001      	movs	r0, #1
 800059a:	f005 f9ab 	bl	80058f4 <xQueueGenericCreate>
 800059e:	4603      	mov	r3, r0
 80005a0:	4a45      	ldr	r2, [pc, #276]	; (80006b8 <main+0x1e4>)
 80005a2:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005a4:	4a45      	ldr	r2, [pc, #276]	; (80006bc <main+0x1e8>)
 80005a6:	2100      	movs	r1, #0
 80005a8:	4845      	ldr	r0, [pc, #276]	; (80006c0 <main+0x1ec>)
 80005aa:	f004 ff2d 	bl	8005408 <osThreadNew>
 80005ae:	4603      	mov	r3, r0
 80005b0:	4a44      	ldr	r2, [pc, #272]	; (80006c4 <main+0x1f0>)
 80005b2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(TaskMoveRight, "TaskMoveRight", configMINIMAL_STACK_SIZE, NULL, 1, NULL );
 80005b4:	2300      	movs	r3, #0
 80005b6:	9301      	str	r3, [sp, #4]
 80005b8:	2301      	movs	r3, #1
 80005ba:	9300      	str	r3, [sp, #0]
 80005bc:	2300      	movs	r3, #0
 80005be:	2280      	movs	r2, #128	; 0x80
 80005c0:	4941      	ldr	r1, [pc, #260]	; (80006c8 <main+0x1f4>)
 80005c2:	4842      	ldr	r0, [pc, #264]	; (80006cc <main+0x1f8>)
 80005c4:	f005 ffe9 	bl	800659a <xTaskCreate>
  xTaskCreate(TaskMoveLeft, "TaskMoveLeft", configMINIMAL_STACK_SIZE, NULL, 1, NULL );
 80005c8:	2300      	movs	r3, #0
 80005ca:	9301      	str	r3, [sp, #4]
 80005cc:	2301      	movs	r3, #1
 80005ce:	9300      	str	r3, [sp, #0]
 80005d0:	2300      	movs	r3, #0
 80005d2:	2280      	movs	r2, #128	; 0x80
 80005d4:	493e      	ldr	r1, [pc, #248]	; (80006d0 <main+0x1fc>)
 80005d6:	483f      	ldr	r0, [pc, #252]	; (80006d4 <main+0x200>)
 80005d8:	f005 ffdf 	bl	800659a <xTaskCreate>
  xTaskCreate(TaskMoveDown, "TaskMoveDown", configMINIMAL_STACK_SIZE, NULL, 1, NULL );
 80005dc:	2300      	movs	r3, #0
 80005de:	9301      	str	r3, [sp, #4]
 80005e0:	2301      	movs	r3, #1
 80005e2:	9300      	str	r3, [sp, #0]
 80005e4:	2300      	movs	r3, #0
 80005e6:	2280      	movs	r2, #128	; 0x80
 80005e8:	493b      	ldr	r1, [pc, #236]	; (80006d8 <main+0x204>)
 80005ea:	483c      	ldr	r0, [pc, #240]	; (80006dc <main+0x208>)
 80005ec:	f005 ffd5 	bl	800659a <xTaskCreate>
  xTaskCreate(TaskPeriodical, "TaskPeriodical", configMINIMAL_STACK_SIZE, NULL, 1, NULL );
 80005f0:	2300      	movs	r3, #0
 80005f2:	9301      	str	r3, [sp, #4]
 80005f4:	2301      	movs	r3, #1
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	2300      	movs	r3, #0
 80005fa:	2280      	movs	r2, #128	; 0x80
 80005fc:	4938      	ldr	r1, [pc, #224]	; (80006e0 <main+0x20c>)
 80005fe:	4839      	ldr	r0, [pc, #228]	; (80006e4 <main+0x210>)
 8000600:	f005 ffcb 	bl	800659a <xTaskCreate>
  xTaskCreate(TaskDisplayUsart, "TaskDisplayUsart", configMINIMAL_STACK_SIZE, NULL, 1, NULL );
 8000604:	2300      	movs	r3, #0
 8000606:	9301      	str	r3, [sp, #4]
 8000608:	2301      	movs	r3, #1
 800060a:	9300      	str	r3, [sp, #0]
 800060c:	2300      	movs	r3, #0
 800060e:	2280      	movs	r2, #128	; 0x80
 8000610:	4935      	ldr	r1, [pc, #212]	; (80006e8 <main+0x214>)
 8000612:	4836      	ldr	r0, [pc, #216]	; (80006ec <main+0x218>)
 8000614:	f005 ffc1 	bl	800659a <xTaskCreate>
  xTaskCreate(TaskInitializeBoard, "TaskInitializeBoard", configMINIMAL_STACK_SIZE, NULL, 1, NULL );
 8000618:	2300      	movs	r3, #0
 800061a:	9301      	str	r3, [sp, #4]
 800061c:	2301      	movs	r3, #1
 800061e:	9300      	str	r3, [sp, #0]
 8000620:	2300      	movs	r3, #0
 8000622:	2280      	movs	r2, #128	; 0x80
 8000624:	4932      	ldr	r1, [pc, #200]	; (80006f0 <main+0x21c>)
 8000626:	4833      	ldr	r0, [pc, #204]	; (80006f4 <main+0x220>)
 8000628:	f005 ffb7 	bl	800659a <xTaskCreate>
  xTaskCreate(TaskNewBlock, "TaskNewBlock", configMINIMAL_STACK_SIZE, NULL, 1, NULL );
 800062c:	2300      	movs	r3, #0
 800062e:	9301      	str	r3, [sp, #4]
 8000630:	2301      	movs	r3, #1
 8000632:	9300      	str	r3, [sp, #0]
 8000634:	2300      	movs	r3, #0
 8000636:	2280      	movs	r2, #128	; 0x80
 8000638:	492f      	ldr	r1, [pc, #188]	; (80006f8 <main+0x224>)
 800063a:	4830      	ldr	r0, [pc, #192]	; (80006fc <main+0x228>)
 800063c:	f005 ffad 	bl	800659a <xTaskCreate>
  xTaskCreate(TaskCheckRow, "TaskCheckRow", configMINIMAL_STACK_SIZE, NULL, 4, NULL );
 8000640:	2300      	movs	r3, #0
 8000642:	9301      	str	r3, [sp, #4]
 8000644:	2304      	movs	r3, #4
 8000646:	9300      	str	r3, [sp, #0]
 8000648:	2300      	movs	r3, #0
 800064a:	2280      	movs	r2, #128	; 0x80
 800064c:	492c      	ldr	r1, [pc, #176]	; (8000700 <main+0x22c>)
 800064e:	482d      	ldr	r0, [pc, #180]	; (8000704 <main+0x230>)
 8000650:	f005 ffa3 	bl	800659a <xTaskCreate>
  xTaskCreate(TaskLost, "TaskLost", configMINIMAL_STACK_SIZE, NULL, 1, NULL );
 8000654:	2300      	movs	r3, #0
 8000656:	9301      	str	r3, [sp, #4]
 8000658:	2301      	movs	r3, #1
 800065a:	9300      	str	r3, [sp, #0]
 800065c:	2300      	movs	r3, #0
 800065e:	2280      	movs	r2, #128	; 0x80
 8000660:	4929      	ldr	r1, [pc, #164]	; (8000708 <main+0x234>)
 8000662:	482a      	ldr	r0, [pc, #168]	; (800070c <main+0x238>)
 8000664:	f005 ff99 	bl	800659a <xTaskCreate>
  //xTaskCreate(TaskLowerBlock, "TaskLowerBlock", configMINIMAL_STACK_SIZE, NULL, 8, NULL );
  xTaskCreate(TaskDisplaySPI, "TaskDisplaySPI", configMINIMAL_STACK_SIZE, NULL, 1, NULL );
 8000668:	2300      	movs	r3, #0
 800066a:	9301      	str	r3, [sp, #4]
 800066c:	2301      	movs	r3, #1
 800066e:	9300      	str	r3, [sp, #0]
 8000670:	2300      	movs	r3, #0
 8000672:	2280      	movs	r2, #128	; 0x80
 8000674:	4926      	ldr	r1, [pc, #152]	; (8000710 <main+0x23c>)
 8000676:	4827      	ldr	r0, [pc, #156]	; (8000714 <main+0x240>)
 8000678:	f005 ff8f 	bl	800659a <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  xSemaphoreGive(initializeBoardSem);
 800067c:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <main+0x1cc>)
 800067e:	6818      	ldr	r0, [r3, #0]
 8000680:	2300      	movs	r3, #0
 8000682:	2200      	movs	r2, #0
 8000684:	2100      	movs	r1, #0
 8000686:	f005 f993 	bl	80059b0 <xQueueGenericSend>
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800068a:	f004 fe97 	bl	80053bc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800068e:	e7fe      	b.n	800068e <main+0x1ba>
 8000690:	20000118 	.word	0x20000118
 8000694:	2000011c 	.word	0x2000011c
 8000698:	20000120 	.word	0x20000120
 800069c:	20000124 	.word	0x20000124
 80006a0:	20000128 	.word	0x20000128
 80006a4:	2000012c 	.word	0x2000012c
 80006a8:	20000130 	.word	0x20000130
 80006ac:	20000134 	.word	0x20000134
 80006b0:	20000138 	.word	0x20000138
 80006b4:	2000013c 	.word	0x2000013c
 80006b8:	20000140 	.word	0x20000140
 80006bc:	08008560 	.word	0x08008560
 80006c0:	080018cd 	.word	0x080018cd
 80006c4:	20000114 	.word	0x20000114
 80006c8:	08008484 	.word	0x08008484
 80006cc:	08000dfd 	.word	0x08000dfd
 80006d0:	08008494 	.word	0x08008494
 80006d4:	08000fb1 	.word	0x08000fb1
 80006d8:	080084a4 	.word	0x080084a4
 80006dc:	08001145 	.word	0x08001145
 80006e0:	080084b4 	.word	0x080084b4
 80006e4:	080009b5 	.word	0x080009b5
 80006e8:	080084c4 	.word	0x080084c4
 80006ec:	0800166d 	.word	0x0800166d
 80006f0:	080084d8 	.word	0x080084d8
 80006f4:	080009dd 	.word	0x080009dd
 80006f8:	080084ec 	.word	0x080084ec
 80006fc:	08000a8d 	.word	0x08000a8d
 8000700:	080084fc 	.word	0x080084fc
 8000704:	080013e5 	.word	0x080013e5
 8000708:	0800850c 	.word	0x0800850c
 800070c:	08000b89 	.word	0x08000b89
 8000710:	08008518 	.word	0x08008518
 8000714:	0800177d 	.word	0x0800177d

08000718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b096      	sub	sp, #88	; 0x58
 800071c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071e:	f107 0314 	add.w	r3, r7, #20
 8000722:	2244      	movs	r2, #68	; 0x44
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f007 fe92 	bl	8008450 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800072c:	463b      	mov	r3, r7
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800073a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800073e:	f001 feff 	bl	8002540 <HAL_PWREx_ControlVoltageScaling>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000748:	f001 f8da 	bl	8001900 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800074c:	2302      	movs	r3, #2
 800074e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000750:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000754:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000756:	2310      	movs	r3, #16
 8000758:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075a:	2302      	movs	r3, #2
 800075c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800075e:	2302      	movs	r3, #2
 8000760:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000762:	2301      	movs	r3, #1
 8000764:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000766:	230a      	movs	r3, #10
 8000768:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800076a:	2307      	movs	r3, #7
 800076c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800076e:	2302      	movs	r3, #2
 8000770:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000772:	2302      	movs	r3, #2
 8000774:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000776:	f107 0314 	add.w	r3, r7, #20
 800077a:	4618      	mov	r0, r3
 800077c:	f001 ff36 	bl	80025ec <HAL_RCC_OscConfig>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000786:	f001 f8bb 	bl	8001900 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078a:	230f      	movs	r3, #15
 800078c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078e:	2303      	movs	r3, #3
 8000790:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000792:	2300      	movs	r3, #0
 8000794:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000796:	2300      	movs	r3, #0
 8000798:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800079a:	2300      	movs	r3, #0
 800079c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800079e:	463b      	mov	r3, r7
 80007a0:	2104      	movs	r1, #4
 80007a2:	4618      	mov	r0, r3
 80007a4:	f002 fafe 	bl	8002da4 <HAL_RCC_ClockConfig>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007ae:	f001 f8a7 	bl	8001900 <Error_Handler>
  }
}
 80007b2:	bf00      	nop
 80007b4:	3758      	adds	r7, #88	; 0x58
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
	...

080007bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007c0:	4b1b      	ldr	r3, [pc, #108]	; (8000830 <MX_SPI1_Init+0x74>)
 80007c2:	4a1c      	ldr	r2, [pc, #112]	; (8000834 <MX_SPI1_Init+0x78>)
 80007c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007c6:	4b1a      	ldr	r3, [pc, #104]	; (8000830 <MX_SPI1_Init+0x74>)
 80007c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007ce:	4b18      	ldr	r3, [pc, #96]	; (8000830 <MX_SPI1_Init+0x74>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007d4:	4b16      	ldr	r3, [pc, #88]	; (8000830 <MX_SPI1_Init+0x74>)
 80007d6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80007da:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007dc:	4b14      	ldr	r3, [pc, #80]	; (8000830 <MX_SPI1_Init+0x74>)
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007e2:	4b13      	ldr	r3, [pc, #76]	; (8000830 <MX_SPI1_Init+0x74>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007e8:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_SPI1_Init+0x74>)
 80007ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007ee:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_SPI1_Init+0x74>)
 80007f2:	2218      	movs	r2, #24
 80007f4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_SPI1_Init+0x74>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_SPI1_Init+0x74>)
 80007fe:	2200      	movs	r2, #0
 8000800:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <MX_SPI1_Init+0x74>)
 8000804:	2200      	movs	r2, #0
 8000806:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000808:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_SPI1_Init+0x74>)
 800080a:	2207      	movs	r2, #7
 800080c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800080e:	4b08      	ldr	r3, [pc, #32]	; (8000830 <MX_SPI1_Init+0x74>)
 8000810:	2200      	movs	r2, #0
 8000812:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_SPI1_Init+0x74>)
 8000816:	2208      	movs	r2, #8
 8000818:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800081a:	4805      	ldr	r0, [pc, #20]	; (8000830 <MX_SPI1_Init+0x74>)
 800081c:	f003 f9d4 	bl	8003bc8 <HAL_SPI_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000826:	f001 f86b 	bl	8001900 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	2000002c 	.word	0x2000002c
 8000834:	40013000 	.word	0x40013000

08000838 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800083c:	4b14      	ldr	r3, [pc, #80]	; (8000890 <MX_USART2_UART_Init+0x58>)
 800083e:	4a15      	ldr	r2, [pc, #84]	; (8000894 <MX_USART2_UART_Init+0x5c>)
 8000840:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000842:	4b13      	ldr	r3, [pc, #76]	; (8000890 <MX_USART2_UART_Init+0x58>)
 8000844:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000848:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800084a:	4b11      	ldr	r3, [pc, #68]	; (8000890 <MX_USART2_UART_Init+0x58>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000850:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <MX_USART2_UART_Init+0x58>)
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000856:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <MX_USART2_UART_Init+0x58>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800085c:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <MX_USART2_UART_Init+0x58>)
 800085e:	220c      	movs	r2, #12
 8000860:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000862:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <MX_USART2_UART_Init+0x58>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000868:	4b09      	ldr	r3, [pc, #36]	; (8000890 <MX_USART2_UART_Init+0x58>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800086e:	4b08      	ldr	r3, [pc, #32]	; (8000890 <MX_USART2_UART_Init+0x58>)
 8000870:	2200      	movs	r2, #0
 8000872:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <MX_USART2_UART_Init+0x58>)
 8000876:	2200      	movs	r2, #0
 8000878:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800087a:	4805      	ldr	r0, [pc, #20]	; (8000890 <MX_USART2_UART_Init+0x58>)
 800087c:	f003 ffec 	bl	8004858 <HAL_UART_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000886:	f001 f83b 	bl	8001900 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000090 	.word	0x20000090
 8000894:	40004400 	.word	0x40004400

08000898 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08a      	sub	sp, #40	; 0x28
 800089c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089e:	f107 0314 	add.w	r3, r7, #20
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
 80008aa:	60da      	str	r2, [r3, #12]
 80008ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ae:	4b3e      	ldr	r3, [pc, #248]	; (80009a8 <MX_GPIO_Init+0x110>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b2:	4a3d      	ldr	r2, [pc, #244]	; (80009a8 <MX_GPIO_Init+0x110>)
 80008b4:	f043 0304 	orr.w	r3, r3, #4
 80008b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ba:	4b3b      	ldr	r3, [pc, #236]	; (80009a8 <MX_GPIO_Init+0x110>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008be:	f003 0304 	and.w	r3, r3, #4
 80008c2:	613b      	str	r3, [r7, #16]
 80008c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008c6:	4b38      	ldr	r3, [pc, #224]	; (80009a8 <MX_GPIO_Init+0x110>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ca:	4a37      	ldr	r2, [pc, #220]	; (80009a8 <MX_GPIO_Init+0x110>)
 80008cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008d2:	4b35      	ldr	r3, [pc, #212]	; (80009a8 <MX_GPIO_Init+0x110>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	4b32      	ldr	r3, [pc, #200]	; (80009a8 <MX_GPIO_Init+0x110>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e2:	4a31      	ldr	r2, [pc, #196]	; (80009a8 <MX_GPIO_Init+0x110>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ea:	4b2f      	ldr	r3, [pc, #188]	; (80009a8 <MX_GPIO_Init+0x110>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	60bb      	str	r3, [r7, #8]
 80008f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f6:	4b2c      	ldr	r3, [pc, #176]	; (80009a8 <MX_GPIO_Init+0x110>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fa:	4a2b      	ldr	r2, [pc, #172]	; (80009a8 <MX_GPIO_Init+0x110>)
 80008fc:	f043 0302 	orr.w	r3, r3, #2
 8000900:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000902:	4b29      	ldr	r3, [pc, #164]	; (80009a8 <MX_GPIO_Init+0x110>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000906:	f003 0302 	and.w	r3, r3, #2
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800090e:	2200      	movs	r2, #0
 8000910:	2110      	movs	r1, #16
 8000912:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000916:	f001 fded 	bl	80024f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800091a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800091e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000920:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000924:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800092a:	f107 0314 	add.w	r3, r7, #20
 800092e:	4619      	mov	r1, r3
 8000930:	481e      	ldr	r0, [pc, #120]	; (80009ac <MX_GPIO_Init+0x114>)
 8000932:	f001 fc35 	bl	80021a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000936:	2310      	movs	r3, #16
 8000938:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093a:	2301      	movs	r3, #1
 800093c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000942:	2300      	movs	r3, #0
 8000944:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000946:	f107 0314 	add.w	r3, r7, #20
 800094a:	4619      	mov	r1, r3
 800094c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000950:	f001 fc26 	bl	80021a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000954:	2338      	movs	r3, #56	; 0x38
 8000956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000958:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800095c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000962:	f107 0314 	add.w	r3, r7, #20
 8000966:	4619      	mov	r1, r3
 8000968:	4811      	ldr	r0, [pc, #68]	; (80009b0 <MX_GPIO_Init+0x118>)
 800096a:	f001 fc19 	bl	80021a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 800096e:	2200      	movs	r2, #0
 8000970:	2105      	movs	r1, #5
 8000972:	2009      	movs	r0, #9
 8000974:	f001 fbea 	bl	800214c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000978:	2009      	movs	r0, #9
 800097a:	f001 fc03 	bl	8002184 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 800097e:	2200      	movs	r2, #0
 8000980:	2105      	movs	r1, #5
 8000982:	200a      	movs	r0, #10
 8000984:	f001 fbe2 	bl	800214c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000988:	200a      	movs	r0, #10
 800098a:	f001 fbfb 	bl	8002184 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	2105      	movs	r1, #5
 8000992:	2017      	movs	r0, #23
 8000994:	f001 fbda 	bl	800214c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000998:	2017      	movs	r0, #23
 800099a:	f001 fbf3 	bl	8002184 <HAL_NVIC_EnableIRQ>

}
 800099e:	bf00      	nop
 80009a0:	3728      	adds	r7, #40	; 0x28
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40021000 	.word	0x40021000
 80009ac:	48000800 	.word	0x48000800
 80009b0:	48000400 	.word	0x48000400

080009b4 <TaskPeriodical>:

/* USER CODE BEGIN 4 */

void TaskPeriodical( void * pvParameters )
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
	char x = '_';
 80009bc:	235f      	movs	r3, #95	; 0x5f
 80009be:	73fb      	strb	r3, [r7, #15]
    for(;;)
    {
			HAL_UART_Transmit(&huart2, &x, sizeof(x), HAL_MAX_DELAY);
 80009c0:	f107 010f 	add.w	r1, r7, #15
 80009c4:	f04f 33ff 	mov.w	r3, #4294967295
 80009c8:	2201      	movs	r2, #1
 80009ca:	4803      	ldr	r0, [pc, #12]	; (80009d8 <TaskPeriodical+0x24>)
 80009cc:	f003 ff92 	bl	80048f4 <HAL_UART_Transmit>
			HAL_Delay(100);
 80009d0:	2064      	movs	r0, #100	; 0x64
 80009d2:	f001 fadf 	bl	8001f94 <HAL_Delay>
			HAL_UART_Transmit(&huart2, &x, sizeof(x), HAL_MAX_DELAY);
 80009d6:	e7f3      	b.n	80009c0 <TaskPeriodical+0xc>
 80009d8:	20000090 	.word	0x20000090

080009dc <TaskInitializeBoard>:
		vTaskDelay(1000);
    }
}
//_________________________________________________________
void TaskInitializeBoard( void * pvParameters )
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b0c4      	sub	sp, #272	; 0x110
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009e6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80009ea:	6018      	str	r0, [r3, #0]
	int display[8][8] = {
 80009ec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009f0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80009f4:	4618      	mov	r0, r3
 80009f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009fa:	461a      	mov	r2, r3
 80009fc:	2100      	movs	r1, #0
 80009fe:	f007 fd27 	bl	8008450 <memset>
 8000a02:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a06:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a12:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000a16:	2201      	movs	r2, #1
 8000a18:	611a      	str	r2, [r3, #16]
 8000a1a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a1e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000a22:	2201      	movs	r2, #1
 8000a24:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a26:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a2a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000a2e:	2201      	movs	r2, #1
 8000a30:	631a      	str	r2, [r3, #48]	; 0x30
			{0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0}
	};
	int positionXY[] = {3,1};
 8000a32:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000a3a:	4a10      	ldr	r2, [pc, #64]	; (8000a7c <TaskInitializeBoard+0xa0>)
 8000a3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a40:	e883 0003 	stmia.w	r3, {r0, r1}
    for(;;)
    {
		if(xSemaphoreTake(initializeBoardSem, (TickType_t)portMAX_DELAY)== pdTRUE)
 8000a44:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <TaskInitializeBoard+0xa4>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f04f 31ff 	mov.w	r1, #4294967295
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f005 fab5 	bl	8005fbc <xQueueSemaphoreTake>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d1f5      	bne.n	8000a44 <TaskInitializeBoard+0x68>
		{
			xQueueSend( feld, ( void * ) &display,  1 );
 8000a58:	4b0a      	ldr	r3, [pc, #40]	; (8000a84 <TaskInitializeBoard+0xa8>)
 8000a5a:	6818      	ldr	r0, [r3, #0]
 8000a5c:	f107 0110 	add.w	r1, r7, #16
 8000a60:	2300      	movs	r3, #0
 8000a62:	2201      	movs	r2, #1
 8000a64:	f004 ffa4 	bl	80059b0 <xQueueGenericSend>
			xQueueSend( position, ( void * ) &positionXY,  1 );
 8000a68:	4b07      	ldr	r3, [pc, #28]	; (8000a88 <TaskInitializeBoard+0xac>)
 8000a6a:	6818      	ldr	r0, [r3, #0]
 8000a6c:	f107 0108 	add.w	r1, r7, #8
 8000a70:	2300      	movs	r3, #0
 8000a72:	2201      	movs	r2, #1
 8000a74:	f004 ff9c 	bl	80059b0 <xQueueGenericSend>
		if(xSemaphoreTake(initializeBoardSem, (TickType_t)portMAX_DELAY)== pdTRUE)
 8000a78:	e7e4      	b.n	8000a44 <TaskInitializeBoard+0x68>
 8000a7a:	bf00      	nop
 8000a7c:	08008528 	.word	0x08008528
 8000a80:	20000128 	.word	0x20000128
 8000a84:	2000013c 	.word	0x2000013c
 8000a88:	20000140 	.word	0x20000140

08000a8c <TaskNewBlock>:

    }
}
//_________________________________________________________
void TaskNewBlock( void * pvParameters )
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b0c4      	sub	sp, #272	; 0x110
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a96:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000a9a:	6018      	str	r0, [r3, #0]
	int display[8][8];
	int positionXY[] = {3,1};
 8000a9c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000aa0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000aa4:	4a32      	ldr	r2, [pc, #200]	; (8000b70 <TaskNewBlock+0xe4>)
 8000aa6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000aaa:	e883 0003 	stmia.w	r3, {r0, r1}
    for(;;)
    {
		if(xSemaphoreTake(newBlockSem, (TickType_t)portMAX_DELAY)== pdTRUE)
 8000aae:	4b31      	ldr	r3, [pc, #196]	; (8000b74 <TaskNewBlock+0xe8>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f04f 31ff 	mov.w	r1, #4294967295
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f005 fa80 	bl	8005fbc <xQueueSemaphoreTake>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	d1f5      	bne.n	8000aae <TaskNewBlock+0x22>
		{
			xQueueReceive( position, &positionXY, ( TickType_t ) 10 );
 8000ac2:	4b2d      	ldr	r3, [pc, #180]	; (8000b78 <TaskNewBlock+0xec>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f107 0108 	add.w	r1, r7, #8
 8000aca:	220a      	movs	r2, #10
 8000acc:	4618      	mov	r0, r3
 8000ace:	f005 f995 	bl	8005dfc <xQueueReceive>
			xQueueReceive( feld, &display, ( TickType_t ) 10 );
 8000ad2:	4b2a      	ldr	r3, [pc, #168]	; (8000b7c <TaskNewBlock+0xf0>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f107 0110 	add.w	r1, r7, #16
 8000ada:	220a      	movs	r2, #10
 8000adc:	4618      	mov	r0, r3
 8000ade:	f005 f98d 	bl	8005dfc <xQueueReceive>

			//if enough space to put new block
			if(display[2][3]==0 && display[2][4]==0){
 8000ae2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ae6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d136      	bne.n	8000b5e <TaskNewBlock+0xd2>
 8000af0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000af4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000af8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d12f      	bne.n	8000b5e <TaskNewBlock+0xd2>
				display[0][3] =1;
 8000afe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b02:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000b06:	2201      	movs	r2, #1
 8000b08:	60da      	str	r2, [r3, #12]
				display[0][4] =1;
 8000b0a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b0e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000b12:	2201      	movs	r2, #1
 8000b14:	611a      	str	r2, [r3, #16]
				display[1][3] =1;
 8000b16:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b1a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000b1e:	2201      	movs	r2, #1
 8000b20:	62da      	str	r2, [r3, #44]	; 0x2c
				display[1][4] =1;
 8000b22:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b26:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	631a      	str	r2, [r3, #48]	; 0x30

				xQueueSend( feld, ( void * ) &display,  1 );
 8000b2e:	4b13      	ldr	r3, [pc, #76]	; (8000b7c <TaskNewBlock+0xf0>)
 8000b30:	6818      	ldr	r0, [r3, #0]
 8000b32:	f107 0110 	add.w	r1, r7, #16
 8000b36:	2300      	movs	r3, #0
 8000b38:	2201      	movs	r2, #1
 8000b3a:	f004 ff39 	bl	80059b0 <xQueueGenericSend>
				xQueueSend( position, ( void * ) &positionXY,  1 );
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <TaskNewBlock+0xec>)
 8000b40:	6818      	ldr	r0, [r3, #0]
 8000b42:	f107 0108 	add.w	r1, r7, #8
 8000b46:	2300      	movs	r3, #0
 8000b48:	2201      	movs	r2, #1
 8000b4a:	f004 ff31 	bl	80059b0 <xQueueGenericSend>
				xSemaphoreGive(displayUsartSem);
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <TaskNewBlock+0xf4>)
 8000b50:	6818      	ldr	r0, [r3, #0]
 8000b52:	2300      	movs	r3, #0
 8000b54:	2200      	movs	r2, #0
 8000b56:	2100      	movs	r1, #0
 8000b58:	f004 ff2a 	bl	80059b0 <xQueueGenericSend>
 8000b5c:	e006      	b.n	8000b6c <TaskNewBlock+0xe0>
			}
			else{
				//if not create new initial board
				//xSemaphoreGive(lostSem);
				xSemaphoreGive(initializeBoardSem);
 8000b5e:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <TaskNewBlock+0xf8>)
 8000b60:	6818      	ldr	r0, [r3, #0]
 8000b62:	2300      	movs	r3, #0
 8000b64:	2200      	movs	r2, #0
 8000b66:	2100      	movs	r1, #0
 8000b68:	f004 ff22 	bl	80059b0 <xQueueGenericSend>
		if(xSemaphoreTake(newBlockSem, (TickType_t)portMAX_DELAY)== pdTRUE)
 8000b6c:	e79f      	b.n	8000aae <TaskNewBlock+0x22>
 8000b6e:	bf00      	nop
 8000b70:	08008528 	.word	0x08008528
 8000b74:	2000012c 	.word	0x2000012c
 8000b78:	20000140 	.word	0x20000140
 8000b7c:	2000013c 	.word	0x2000013c
 8000b80:	20000124 	.word	0x20000124
 8000b84:	20000128 	.word	0x20000128

08000b88 <TaskLost>:

    }
}
//_________________________________________________________
void TaskLost( void * pvParameters )
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b0ca      	sub	sp, #296	; 0x128
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000b92:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000b96:	6018      	str	r0, [r3, #0]
	int display[8][8];
    for(;;)
    {
		if(xSemaphoreTake(lostSem, (TickType_t)portMAX_DELAY)== pdTRUE)
 8000b98:	4b94      	ldr	r3, [pc, #592]	; (8000dec <TaskLost+0x264>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f005 fa0b 	bl	8005fbc <xQueueSemaphoreTake>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d1f5      	bne.n	8000b98 <TaskLost+0x10>
		{
			xQueueReceive( feld, &display, ( TickType_t ) 10 );
 8000bac:	4b90      	ldr	r3, [pc, #576]	; (8000df0 <TaskLost+0x268>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f107 0108 	add.w	r1, r7, #8
 8000bb4:	220a      	movs	r2, #10
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f005 f920 	bl	8005dfc <xQueueReceive>


			for(int i = 0; i <8; i++){
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000bc2:	e01e      	b.n	8000c02 <TaskLost+0x7a>
				for(int j = 0; j <8; j++){
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000bca:	e011      	b.n	8000bf0 <TaskLost+0x68>
					display[i][j]=1;
 8000bcc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000bd0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000bd4:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000bd8:	00d1      	lsls	r1, r2, #3
 8000bda:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8000bde:	440a      	add	r2, r1
 8000be0:	2101      	movs	r1, #1
 8000be2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for(int j = 0; j <8; j++){
 8000be6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000bea:	3301      	adds	r3, #1
 8000bec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000bf0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000bf4:	2b07      	cmp	r3, #7
 8000bf6:	dde9      	ble.n	8000bcc <TaskLost+0x44>
			for(int i = 0; i <8; i++){
 8000bf8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000c02:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000c06:	2b07      	cmp	r3, #7
 8000c08:	dddc      	ble.n	8000bc4 <TaskLost+0x3c>
				}

			}
			xQueueSend( feld, ( void * ) &display,  1 );
 8000c0a:	4b79      	ldr	r3, [pc, #484]	; (8000df0 <TaskLost+0x268>)
 8000c0c:	6818      	ldr	r0, [r3, #0]
 8000c0e:	f107 0108 	add.w	r1, r7, #8
 8000c12:	2300      	movs	r3, #0
 8000c14:	2201      	movs	r2, #1
 8000c16:	f004 fecb 	bl	80059b0 <xQueueGenericSend>
			vTaskDelay(500);
 8000c1a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c1e:	f005 fe01 	bl	8006824 <vTaskDelay>
			xSemaphoreGive(displayUsartSem);
 8000c22:	4b74      	ldr	r3, [pc, #464]	; (8000df4 <TaskLost+0x26c>)
 8000c24:	6818      	ldr	r0, [r3, #0]
 8000c26:	2300      	movs	r3, #0
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	f004 fec0 	bl	80059b0 <xQueueGenericSend>
			vTaskDelay(500);
 8000c30:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c34:	f005 fdf6 	bl	8006824 <vTaskDelay>
			xQueueReceive( feld, &display, ( TickType_t ) 10 );
 8000c38:	4b6d      	ldr	r3, [pc, #436]	; (8000df0 <TaskLost+0x268>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f107 0108 	add.w	r1, r7, #8
 8000c40:	220a      	movs	r2, #10
 8000c42:	4618      	mov	r0, r3
 8000c44:	f005 f8da 	bl	8005dfc <xQueueReceive>

			for(int i = 0; i <8; i++){
 8000c48:	2300      	movs	r3, #0
 8000c4a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8000c4e:	e01e      	b.n	8000c8e <TaskLost+0x106>
				for(int j = 0; j <8; j++){
 8000c50:	2300      	movs	r3, #0
 8000c52:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8000c56:	e011      	b.n	8000c7c <TaskLost+0xf4>
					display[i][j]=0;
 8000c58:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000c5c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000c60:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8000c64:	00d1      	lsls	r1, r2, #3
 8000c66:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000c6a:	440a      	add	r2, r1
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for(int j = 0; j <8; j++){
 8000c72:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000c76:	3301      	adds	r3, #1
 8000c78:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8000c7c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000c80:	2b07      	cmp	r3, #7
 8000c82:	dde9      	ble.n	8000c58 <TaskLost+0xd0>
			for(int i = 0; i <8; i++){
 8000c84:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000c88:	3301      	adds	r3, #1
 8000c8a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8000c8e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000c92:	2b07      	cmp	r3, #7
 8000c94:	dddc      	ble.n	8000c50 <TaskLost+0xc8>
				}

			}
			xQueueSend( feld, ( void * ) &display,  1 );
 8000c96:	4b56      	ldr	r3, [pc, #344]	; (8000df0 <TaskLost+0x268>)
 8000c98:	6818      	ldr	r0, [r3, #0]
 8000c9a:	f107 0108 	add.w	r1, r7, #8
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	f004 fe85 	bl	80059b0 <xQueueGenericSend>
			vTaskDelay(500);
 8000ca6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000caa:	f005 fdbb 	bl	8006824 <vTaskDelay>
			xSemaphoreGive(displayUsartSem);
 8000cae:	4b51      	ldr	r3, [pc, #324]	; (8000df4 <TaskLost+0x26c>)
 8000cb0:	6818      	ldr	r0, [r3, #0]
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	f004 fe7a 	bl	80059b0 <xQueueGenericSend>
			vTaskDelay(500);
 8000cbc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cc0:	f005 fdb0 	bl	8006824 <vTaskDelay>
			xQueueReceive( feld, &display, ( TickType_t ) 10 );
 8000cc4:	4b4a      	ldr	r3, [pc, #296]	; (8000df0 <TaskLost+0x268>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f107 0108 	add.w	r1, r7, #8
 8000ccc:	220a      	movs	r2, #10
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f005 f894 	bl	8005dfc <xQueueReceive>

			for(int i = 0; i <8; i++){
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000cda:	e01e      	b.n	8000d1a <TaskLost+0x192>
				for(int j = 0; j <8; j++){
 8000cdc:	2300      	movs	r3, #0
 8000cde:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8000ce2:	e011      	b.n	8000d08 <TaskLost+0x180>
					display[i][j]=1;
 8000ce4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000ce8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000cec:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000cf0:	00d1      	lsls	r1, r2, #3
 8000cf2:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8000cf6:	440a      	add	r2, r1
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for(int j = 0; j <8; j++){
 8000cfe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000d02:	3301      	adds	r3, #1
 8000d04:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8000d08:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000d0c:	2b07      	cmp	r3, #7
 8000d0e:	dde9      	ble.n	8000ce4 <TaskLost+0x15c>
			for(int i = 0; i <8; i++){
 8000d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000d14:	3301      	adds	r3, #1
 8000d16:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000d1e:	2b07      	cmp	r3, #7
 8000d20:	dddc      	ble.n	8000cdc <TaskLost+0x154>
				}

			}
			xQueueSend( feld, ( void * ) &display,  1 );
 8000d22:	4b33      	ldr	r3, [pc, #204]	; (8000df0 <TaskLost+0x268>)
 8000d24:	6818      	ldr	r0, [r3, #0]
 8000d26:	f107 0108 	add.w	r1, r7, #8
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	f004 fe3f 	bl	80059b0 <xQueueGenericSend>
			vTaskDelay(500);
 8000d32:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d36:	f005 fd75 	bl	8006824 <vTaskDelay>
			xSemaphoreGive(displayUsartSem);
 8000d3a:	4b2e      	ldr	r3, [pc, #184]	; (8000df4 <TaskLost+0x26c>)
 8000d3c:	6818      	ldr	r0, [r3, #0]
 8000d3e:	2300      	movs	r3, #0
 8000d40:	2200      	movs	r2, #0
 8000d42:	2100      	movs	r1, #0
 8000d44:	f004 fe34 	bl	80059b0 <xQueueGenericSend>
			vTaskDelay(500);
 8000d48:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d4c:	f005 fd6a 	bl	8006824 <vTaskDelay>
			xQueueReceive( feld, &display, ( TickType_t ) 10 );
 8000d50:	4b27      	ldr	r3, [pc, #156]	; (8000df0 <TaskLost+0x268>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f107 0108 	add.w	r1, r7, #8
 8000d58:	220a      	movs	r2, #10
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f005 f84e 	bl	8005dfc <xQueueReceive>

			for(int i = 0; i <8; i++){
 8000d60:	2300      	movs	r3, #0
 8000d62:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000d66:	e01e      	b.n	8000da6 <TaskLost+0x21e>
				for(int j = 0; j <8; j++){
 8000d68:	2300      	movs	r3, #0
 8000d6a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8000d6e:	e011      	b.n	8000d94 <TaskLost+0x20c>
					display[i][j]=0;
 8000d70:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000d74:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000d78:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8000d7c:	00d1      	lsls	r1, r2, #3
 8000d7e:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8000d82:	440a      	add	r2, r1
 8000d84:	2100      	movs	r1, #0
 8000d86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for(int j = 0; j <8; j++){
 8000d8a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000d8e:	3301      	adds	r3, #1
 8000d90:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8000d94:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000d98:	2b07      	cmp	r3, #7
 8000d9a:	dde9      	ble.n	8000d70 <TaskLost+0x1e8>
			for(int i = 0; i <8; i++){
 8000d9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000da0:	3301      	adds	r3, #1
 8000da2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000da6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000daa:	2b07      	cmp	r3, #7
 8000dac:	dddc      	ble.n	8000d68 <TaskLost+0x1e0>
				}

			}
			xQueueSend( feld, ( void * ) &display,  1 );
 8000dae:	4b10      	ldr	r3, [pc, #64]	; (8000df0 <TaskLost+0x268>)
 8000db0:	6818      	ldr	r0, [r3, #0]
 8000db2:	f107 0108 	add.w	r1, r7, #8
 8000db6:	2300      	movs	r3, #0
 8000db8:	2201      	movs	r2, #1
 8000dba:	f004 fdf9 	bl	80059b0 <xQueueGenericSend>
			vTaskDelay(500);
 8000dbe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dc2:	f005 fd2f 	bl	8006824 <vTaskDelay>
			xSemaphoreGive(displayUsartSem);
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <TaskLost+0x26c>)
 8000dc8:	6818      	ldr	r0, [r3, #0]
 8000dca:	2300      	movs	r3, #0
 8000dcc:	2200      	movs	r2, #0
 8000dce:	2100      	movs	r1, #0
 8000dd0:	f004 fdee 	bl	80059b0 <xQueueGenericSend>
			vTaskDelay(500);
 8000dd4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dd8:	f005 fd24 	bl	8006824 <vTaskDelay>

			xSemaphoreGive(initializeBoardSem);
 8000ddc:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <TaskLost+0x270>)
 8000dde:	6818      	ldr	r0, [r3, #0]
 8000de0:	2300      	movs	r3, #0
 8000de2:	2200      	movs	r2, #0
 8000de4:	2100      	movs	r1, #0
 8000de6:	f004 fde3 	bl	80059b0 <xQueueGenericSend>
		if(xSemaphoreTake(lostSem, (TickType_t)portMAX_DELAY)== pdTRUE)
 8000dea:	e6d5      	b.n	8000b98 <TaskLost+0x10>
 8000dec:	20000134 	.word	0x20000134
 8000df0:	2000013c 	.word	0x2000013c
 8000df4:	20000124 	.word	0x20000124
 8000df8:	20000128 	.word	0x20000128

08000dfc <TaskMoveRight>:

    }
}
//_________________________________________________________
void TaskMoveRight( void * pvParameters )
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b0c8      	sub	sp, #288	; 0x120
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000e06:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8000e0a:	6018      	str	r0, [r3, #0]
	char x = 'r';
 8000e0c:	2372      	movs	r3, #114	; 0x72
 8000e0e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	int positionXY[2];
	int xAchse;
	int yAchse;
    for(;;)
    {
		if(xSemaphoreTake(buttonA, (TickType_t)portMAX_DELAY)== pdTRUE)
 8000e12:	4b60      	ldr	r3, [pc, #384]	; (8000f94 <TaskMoveRight+0x198>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f04f 31ff 	mov.w	r1, #4294967295
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f005 f8ce 	bl	8005fbc <xQueueSemaphoreTake>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d1f5      	bne.n	8000e12 <TaskMoveRight+0x16>
		{
			HAL_UART_Transmit(&huart2, &x, sizeof(x), HAL_MAX_DELAY);
 8000e26:	f207 1117 	addw	r1, r7, #279	; 0x117
 8000e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2e:	2201      	movs	r2, #1
 8000e30:	4859      	ldr	r0, [pc, #356]	; (8000f98 <TaskMoveRight+0x19c>)
 8000e32:	f003 fd5f 	bl	80048f4 <HAL_UART_Transmit>
			xQueueReceive( position, &positionXY, ( TickType_t ) 10 );
 8000e36:	4b59      	ldr	r3, [pc, #356]	; (8000f9c <TaskMoveRight+0x1a0>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f107 010c 	add.w	r1, r7, #12
 8000e3e:	220a      	movs	r2, #10
 8000e40:	4618      	mov	r0, r3
 8000e42:	f004 ffdb 	bl	8005dfc <xQueueReceive>
			xQueueReceive( feld, &display, ( TickType_t ) 10 );
 8000e46:	4b56      	ldr	r3, [pc, #344]	; (8000fa0 <TaskMoveRight+0x1a4>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f107 0114 	add.w	r1, r7, #20
 8000e4e:	220a      	movs	r2, #10
 8000e50:	4618      	mov	r0, r3
 8000e52:	f004 ffd3 	bl	8005dfc <xQueueReceive>
			xAchse = positionXY[0];
 8000e56:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000e5a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
			yAchse = positionXY[1];
 8000e64:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000e68:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

			// wenn nicht schon ganz rechts
			if(xAchse <6){
 8000e72:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000e76:	2b05      	cmp	r3, #5
 8000e78:	dc73      	bgt.n	8000f62 <TaskMoveRight+0x166>
				HAL_UART_Transmit(&huart2, "y", sizeof(char), HAL_MAX_DELAY);
 8000e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7e:	2201      	movs	r2, #1
 8000e80:	4948      	ldr	r1, [pc, #288]	; (8000fa4 <TaskMoveRight+0x1a8>)
 8000e82:	4845      	ldr	r0, [pc, #276]	; (8000f98 <TaskMoveRight+0x19c>)
 8000e84:	f003 fd36 	bl	80048f4 <HAL_UART_Transmit>
				// wenn feld neben block frei
				if(display[yAchse-1][xAchse+2]==0 && display[yAchse][xAchse+2]==0){
 8000e88:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000e8c:	1e59      	subs	r1, r3, #1
 8000e8e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000e92:	1c9a      	adds	r2, r3, #2
 8000e94:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000e98:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000e9c:	00c9      	lsls	r1, r1, #3
 8000e9e:	440a      	add	r2, r1
 8000ea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d15c      	bne.n	8000f62 <TaskMoveRight+0x166>
 8000ea8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000eac:	1c9a      	adds	r2, r3, #2
 8000eae:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000eb2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000eb6:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8000eba:	00c9      	lsls	r1, r1, #3
 8000ebc:	440a      	add	r2, r1
 8000ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d14d      	bne.n	8000f62 <TaskMoveRight+0x166>
					HAL_UART_Transmit(&huart2, "g", sizeof(char), HAL_MAX_DELAY);
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eca:	2201      	movs	r2, #1
 8000ecc:	4936      	ldr	r1, [pc, #216]	; (8000fa8 <TaskMoveRight+0x1ac>)
 8000ece:	4832      	ldr	r0, [pc, #200]	; (8000f98 <TaskMoveRight+0x19c>)
 8000ed0:	f003 fd10 	bl	80048f4 <HAL_UART_Transmit>
					//block an position löschen
					display[yAchse-1][xAchse]=0;
 8000ed4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000ed8:	1e5a      	subs	r2, r3, #1
 8000eda:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000ede:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000ee2:	00d1      	lsls	r1, r2, #3
 8000ee4:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8000ee8:	440a      	add	r2, r1
 8000eea:	2100      	movs	r1, #0
 8000eec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					display[yAchse][xAchse]=0;
 8000ef0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000ef4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000ef8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000efc:	00d1      	lsls	r1, r2, #3
 8000efe:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8000f02:	440a      	add	r2, r1
 8000f04:	2100      	movs	r1, #0
 8000f06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					//block verschieben
					display[yAchse-1][xAchse+2]=1;
 8000f0a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000f0e:	1e59      	subs	r1, r3, #1
 8000f10:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000f14:	1c9a      	adds	r2, r3, #2
 8000f16:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000f1a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000f1e:	00c9      	lsls	r1, r1, #3
 8000f20:	440a      	add	r2, r1
 8000f22:	2101      	movs	r1, #1
 8000f24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					display[yAchse][xAchse+2]=1;
 8000f28:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000f2c:	1c9a      	adds	r2, r3, #2
 8000f2e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000f32:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000f36:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8000f3a:	00c9      	lsls	r1, r1, #3
 8000f3c:	440a      	add	r2, r1
 8000f3e:	2101      	movs	r1, #1
 8000f40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

					//update pos
					positionXY[0]=xAchse+1;
 8000f44:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000f48:	1c5a      	adds	r2, r3, #1
 8000f4a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000f4e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000f52:	601a      	str	r2, [r3, #0]
					positionXY[1]=yAchse;
 8000f54:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000f58:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000f5c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000f60:	605a      	str	r2, [r3, #4]
				}
			}
			xQueueSend( feld, ( void * ) &display,  1 );
 8000f62:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <TaskMoveRight+0x1a4>)
 8000f64:	6818      	ldr	r0, [r3, #0]
 8000f66:	f107 0114 	add.w	r1, r7, #20
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	f004 fd1f 	bl	80059b0 <xQueueGenericSend>
			xQueueSend( position, ( void * ) &positionXY,  1 );
 8000f72:	4b0a      	ldr	r3, [pc, #40]	; (8000f9c <TaskMoveRight+0x1a0>)
 8000f74:	6818      	ldr	r0, [r3, #0]
 8000f76:	f107 010c 	add.w	r1, r7, #12
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	f004 fd17 	bl	80059b0 <xQueueGenericSend>
			xSemaphoreGive(displayUsartSem);
 8000f82:	4b0a      	ldr	r3, [pc, #40]	; (8000fac <TaskMoveRight+0x1b0>)
 8000f84:	6818      	ldr	r0, [r3, #0]
 8000f86:	2300      	movs	r3, #0
 8000f88:	2200      	movs	r2, #0
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	f004 fd10 	bl	80059b0 <xQueueGenericSend>
		if(xSemaphoreTake(buttonA, (TickType_t)portMAX_DELAY)== pdTRUE)
 8000f90:	e73f      	b.n	8000e12 <TaskMoveRight+0x16>
 8000f92:	bf00      	nop
 8000f94:	20000118 	.word	0x20000118
 8000f98:	20000090 	.word	0x20000090
 8000f9c:	20000140 	.word	0x20000140
 8000fa0:	2000013c 	.word	0x2000013c
 8000fa4:	08008530 	.word	0x08008530
 8000fa8:	08008534 	.word	0x08008534
 8000fac:	20000124 	.word	0x20000124

08000fb0 <TaskMoveLeft>:

    }
}
//_________________________________________________________
void TaskMoveLeft( void * pvParameters )
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b0c8      	sub	sp, #288	; 0x120
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000fba:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8000fbe:	6018      	str	r0, [r3, #0]
	char x = 'l';
 8000fc0:	236c      	movs	r3, #108	; 0x6c
 8000fc2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	int positionXY[2];
	int xAchse;
	int yAchse;
    for(;;)
    {
		if(xSemaphoreTake(buttonB, (TickType_t)portMAX_DELAY)== pdTRUE)
 8000fc6:	4b5a      	ldr	r3, [pc, #360]	; (8001130 <TaskMoveLeft+0x180>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f04f 31ff 	mov.w	r1, #4294967295
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f004 fff4 	bl	8005fbc <xQueueSemaphoreTake>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d1f5      	bne.n	8000fc6 <TaskMoveLeft+0x16>
		{
			HAL_UART_Transmit(&huart2, &x, sizeof(x), HAL_MAX_DELAY);
 8000fda:	f207 1117 	addw	r1, r7, #279	; 0x117
 8000fde:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	4853      	ldr	r0, [pc, #332]	; (8001134 <TaskMoveLeft+0x184>)
 8000fe6:	f003 fc85 	bl	80048f4 <HAL_UART_Transmit>
			xQueueReceive( position, &positionXY, ( TickType_t ) 10 );
 8000fea:	4b53      	ldr	r3, [pc, #332]	; (8001138 <TaskMoveLeft+0x188>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f107 010c 	add.w	r1, r7, #12
 8000ff2:	220a      	movs	r2, #10
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f004 ff01 	bl	8005dfc <xQueueReceive>
			xQueueReceive( feld, &display, ( TickType_t ) 10 );
 8000ffa:	4b50      	ldr	r3, [pc, #320]	; (800113c <TaskMoveLeft+0x18c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f107 0114 	add.w	r1, r7, #20
 8001002:	220a      	movs	r2, #10
 8001004:	4618      	mov	r0, r3
 8001006:	f004 fef9 	bl	8005dfc <xQueueReceive>
			xAchse = positionXY[0];
 800100a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800100e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
			yAchse = positionXY[1];
 8001018:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800101c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

			// wenn nicht schon ganz links
			if(xAchse >0){
 8001026:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800102a:	2b00      	cmp	r3, #0
 800102c:	dd67      	ble.n	80010fe <TaskMoveLeft+0x14e>
				HAL_UART_Transmit(&huart2, &v, sizeof(char), HAL_MAX_DELAY);
				HAL_UART_Transmit(&huart2, "+", sizeof(char), HAL_MAX_DELAY);
				HAL_UART_Transmit(&huart2, &u, sizeof(char), HAL_MAX_DELAY);
				HAL_UART_Transmit(&huart2, &w, sizeof(char), HAL_MAX_DELAY);*/
				// wenn feld neben block frei
				if(display[yAchse-1][xAchse-1]==0 && display[yAchse][xAchse-1]==0){
 800102e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001032:	1e59      	subs	r1, r3, #1
 8001034:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001038:	1e5a      	subs	r2, r3, #1
 800103a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800103e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001042:	00c9      	lsls	r1, r1, #3
 8001044:	440a      	add	r2, r1
 8001046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d157      	bne.n	80010fe <TaskMoveLeft+0x14e>
 800104e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001052:	1e5a      	subs	r2, r3, #1
 8001054:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001058:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800105c:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8001060:	00c9      	lsls	r1, r1, #3
 8001062:	440a      	add	r2, r1
 8001064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d148      	bne.n	80010fe <TaskMoveLeft+0x14e>
					//HAL_UART_Transmit(&huart2, "g", sizeof(char), HAL_MAX_DELAY);
					//block an position löschen
					display[yAchse-1][xAchse+1]=0;
 800106c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001070:	1e59      	subs	r1, r3, #1
 8001072:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001076:	1c5a      	adds	r2, r3, #1
 8001078:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800107c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001080:	00c9      	lsls	r1, r1, #3
 8001082:	440a      	add	r2, r1
 8001084:	2100      	movs	r1, #0
 8001086:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					display[yAchse][xAchse+1]=0;
 800108a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800108e:	1c5a      	adds	r2, r3, #1
 8001090:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001094:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001098:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 800109c:	00c9      	lsls	r1, r1, #3
 800109e:	440a      	add	r2, r1
 80010a0:	2100      	movs	r1, #0
 80010a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					//block verschieben
					display[yAchse-1][xAchse-1]=1;
 80010a6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80010aa:	1e59      	subs	r1, r3, #1
 80010ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80010b0:	1e5a      	subs	r2, r3, #1
 80010b2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80010b6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80010ba:	00c9      	lsls	r1, r1, #3
 80010bc:	440a      	add	r2, r1
 80010be:	2101      	movs	r1, #1
 80010c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					display[yAchse][xAchse-1]=1;
 80010c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80010c8:	1e5a      	subs	r2, r3, #1
 80010ca:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80010ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80010d2:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 80010d6:	00c9      	lsls	r1, r1, #3
 80010d8:	440a      	add	r2, r1
 80010da:	2101      	movs	r1, #1
 80010dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

					//update position
					positionXY[0]=xAchse-1;
 80010e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80010e4:	1e5a      	subs	r2, r3, #1
 80010e6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80010ea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80010ee:	601a      	str	r2, [r3, #0]
					positionXY[1]=yAchse;
 80010f0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80010f4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80010f8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80010fc:	605a      	str	r2, [r3, #4]
				}
			}
			xQueueSend( feld, ( void * ) &display,  1 );
 80010fe:	4b0f      	ldr	r3, [pc, #60]	; (800113c <TaskMoveLeft+0x18c>)
 8001100:	6818      	ldr	r0, [r3, #0]
 8001102:	f107 0114 	add.w	r1, r7, #20
 8001106:	2300      	movs	r3, #0
 8001108:	2201      	movs	r2, #1
 800110a:	f004 fc51 	bl	80059b0 <xQueueGenericSend>
			xQueueSend( position, ( void * ) &positionXY,  1 );
 800110e:	4b0a      	ldr	r3, [pc, #40]	; (8001138 <TaskMoveLeft+0x188>)
 8001110:	6818      	ldr	r0, [r3, #0]
 8001112:	f107 010c 	add.w	r1, r7, #12
 8001116:	2300      	movs	r3, #0
 8001118:	2201      	movs	r2, #1
 800111a:	f004 fc49 	bl	80059b0 <xQueueGenericSend>
			xSemaphoreGive(displayUsartSem);
 800111e:	4b08      	ldr	r3, [pc, #32]	; (8001140 <TaskMoveLeft+0x190>)
 8001120:	6818      	ldr	r0, [r3, #0]
 8001122:	2300      	movs	r3, #0
 8001124:	2200      	movs	r2, #0
 8001126:	2100      	movs	r1, #0
 8001128:	f004 fc42 	bl	80059b0 <xQueueGenericSend>
		if(xSemaphoreTake(buttonB, (TickType_t)portMAX_DELAY)== pdTRUE)
 800112c:	e74b      	b.n	8000fc6 <TaskMoveLeft+0x16>
 800112e:	bf00      	nop
 8001130:	2000011c 	.word	0x2000011c
 8001134:	20000090 	.word	0x20000090
 8001138:	20000140 	.word	0x20000140
 800113c:	2000013c 	.word	0x2000013c
 8001140:	20000124 	.word	0x20000124

08001144 <TaskMoveDown>:

    }
}
//_________________________________________________________
void TaskMoveDown( void * pvParameters )
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b0cc      	sub	sp, #304	; 0x130
 8001148:	af00      	add	r7, sp, #0
 800114a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800114e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001152:	6018      	str	r0, [r3, #0]
	char x = 'd';
 8001154:	2364      	movs	r3, #100	; 0x64
 8001156:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
	int yAchse;
	int lowest;

    for(;;)
    {
		if(xSemaphoreTake(buttonC, (TickType_t)portMAX_DELAY)== pdTRUE)
 800115a:	4b9e      	ldr	r3, [pc, #632]	; (80013d4 <TaskMoveDown+0x290>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f04f 31ff 	mov.w	r1, #4294967295
 8001162:	4618      	mov	r0, r3
 8001164:	f004 ff2a 	bl	8005fbc <xQueueSemaphoreTake>
 8001168:	4603      	mov	r3, r0
 800116a:	2b01      	cmp	r3, #1
 800116c:	d1f5      	bne.n	800115a <TaskMoveDown+0x16>
		{
			xQueueReceive( position, &positionXY, ( TickType_t ) 10 );
 800116e:	4b9a      	ldr	r3, [pc, #616]	; (80013d8 <TaskMoveDown+0x294>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f107 010c 	add.w	r1, r7, #12
 8001176:	220a      	movs	r2, #10
 8001178:	4618      	mov	r0, r3
 800117a:	f004 fe3f 	bl	8005dfc <xQueueReceive>
			xQueueReceive( feld, &display, ( TickType_t ) 10 );
 800117e:	4b97      	ldr	r3, [pc, #604]	; (80013dc <TaskMoveDown+0x298>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f107 0114 	add.w	r1, r7, #20
 8001186:	220a      	movs	r2, #10
 8001188:	4618      	mov	r0, r3
 800118a:	f004 fe37 	bl	8005dfc <xQueueReceive>
			xAchse = positionXY[0];
 800118e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001192:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
			yAchse = positionXY[1];
 800119c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80011a0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

			//find lowest free space
			int counter =1;
 80011aa:	2301      	movs	r3, #1
 80011ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
			lowest = yAchse;
 80011b0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80011b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
			for(int i = yAchse; i <= 7; i++){
 80011b8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80011bc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80011c0:	e054      	b.n	800126c <TaskMoveDown+0x128>
				if(display[yAchse+counter][xAchse] == 0 && display[yAchse+counter][xAchse+1] == 0){
 80011c2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80011c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80011ca:	441a      	add	r2, r3
 80011cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80011d0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80011d4:	00d1      	lsls	r1, r2, #3
 80011d6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80011da:	440a      	add	r2, r1
 80011dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d116      	bne.n	8001212 <TaskMoveDown+0xce>
 80011e4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80011e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80011ec:	18d1      	adds	r1, r2, r3
 80011ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80011f2:	1c5a      	adds	r2, r3, #1
 80011f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80011f8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80011fc:	00c9      	lsls	r1, r1, #3
 80011fe:	440a      	add	r2, r1
 8001200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d104      	bne.n	8001212 <TaskMoveDown+0xce>
					lowest = i;
 8001208:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800120c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001210:	e022      	b.n	8001258 <TaskMoveDown+0x114>
				}
				else if(display[yAchse+counter][xAchse] == 1 && display[yAchse+counter][xAchse+1] == 1){
 8001212:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001216:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800121a:	441a      	add	r2, r3
 800121c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001220:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001224:	00d1      	lsls	r1, r2, #3
 8001226:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800122a:	440a      	add	r2, r1
 800122c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d111      	bne.n	8001258 <TaskMoveDown+0x114>
 8001234:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001238:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800123c:	18d1      	adds	r1, r2, r3
 800123e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001242:	1c5a      	adds	r2, r3, #1
 8001244:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001248:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800124c:	00c9      	lsls	r1, r1, #3
 800124e:	440a      	add	r2, r1
 8001250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d00e      	beq.n	8001276 <TaskMoveDown+0x132>
					break;
				}
				counter++;
 8001258:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800125c:	3301      	adds	r3, #1
 800125e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
			for(int i = yAchse; i <= 7; i++){
 8001262:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001266:	3301      	adds	r3, #1
 8001268:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800126c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001270:	2b07      	cmp	r3, #7
 8001272:	dda6      	ble.n	80011c2 <TaskMoveDown+0x7e>
 8001274:	e000      	b.n	8001278 <TaskMoveDown+0x134>
					break;
 8001276:	bf00      	nop
			}

			char y=yAchse+'0';
 8001278:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800127c:	b2db      	uxtb	r3, r3
 800127e:	3330      	adds	r3, #48	; 0x30
 8001280:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
			char v=lowest+'0';
 8001284:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001288:	b2db      	uxtb	r3, r3
 800128a:	3330      	adds	r3, #48	; 0x30
 800128c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
			//HAL_UART_Transmit(&huart2, &x, sizeof(x), HAL_MAX_DELAY);
			//HAL_UART_Transmit(&huart2, &v, sizeof(x), HAL_MAX_DELAY);
			//HAL_UART_Transmit(&huart2, "+", sizeof(x), HAL_MAX_DELAY);
			//HAL_UART_Transmit(&huart2,&y , sizeof(y), HAL_MAX_DELAY);

			lowest++;
 8001290:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001294:	3301      	adds	r3, #1
 8001296:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
			//set block to lowest possible point
			display[lowest][xAchse]=1;
 800129a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800129e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80012a2:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80012a6:	00d1      	lsls	r1, r2, #3
 80012a8:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80012ac:	440a      	add	r2, r1
 80012ae:	2101      	movs	r1, #1
 80012b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			display[lowest][xAchse+1]=1;
 80012b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80012b8:	1c5a      	adds	r2, r3, #1
 80012ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80012be:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80012c2:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 80012c6:	00c9      	lsls	r1, r1, #3
 80012c8:	440a      	add	r2, r1
 80012ca:	2101      	movs	r1, #1
 80012cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			display[lowest-1][xAchse]=1;
 80012d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80012d4:	1e5a      	subs	r2, r3, #1
 80012d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80012da:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80012de:	00d1      	lsls	r1, r2, #3
 80012e0:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80012e4:	440a      	add	r2, r1
 80012e6:	2101      	movs	r1, #1
 80012e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			display[lowest-1][xAchse+1]=1;
 80012ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80012f0:	1e59      	subs	r1, r3, #1
 80012f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80012f6:	1c5a      	adds	r2, r3, #1
 80012f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80012fc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001300:	00c9      	lsls	r1, r1, #3
 8001302:	440a      	add	r2, r1
 8001304:	2101      	movs	r1, #1
 8001306:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			if(lowest-1 != yAchse){
 800130a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800130e:	3b01      	subs	r3, #1
 8001310:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001314:	429a      	cmp	r2, r3
 8001316:	d037      	beq.n	8001388 <TaskMoveDown+0x244>
				//remove old block
				display[yAchse][xAchse]=0;
 8001318:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800131c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001320:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001324:	00d1      	lsls	r1, r2, #3
 8001326:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800132a:	440a      	add	r2, r1
 800132c:	2100      	movs	r1, #0
 800132e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				display[yAchse][xAchse+1]=0;
 8001332:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001336:	1c5a      	adds	r2, r3, #1
 8001338:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800133c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001340:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8001344:	00c9      	lsls	r1, r1, #3
 8001346:	440a      	add	r2, r1
 8001348:	2100      	movs	r1, #0
 800134a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				display[yAchse-1][xAchse]=0;
 800134e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001352:	1e5a      	subs	r2, r3, #1
 8001354:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001358:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800135c:	00d1      	lsls	r1, r2, #3
 800135e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001362:	440a      	add	r2, r1
 8001364:	2100      	movs	r1, #0
 8001366:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				display[yAchse-1][xAchse+1]=0;
 800136a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800136e:	1e59      	subs	r1, r3, #1
 8001370:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001374:	1c5a      	adds	r2, r3, #1
 8001376:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800137a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800137e:	00c9      	lsls	r1, r1, #3
 8001380:	440a      	add	r2, r1
 8001382:	2100      	movs	r1, #0
 8001384:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			}
			xQueueSend( feld, ( void * ) &display,  1 );
 8001388:	4b14      	ldr	r3, [pc, #80]	; (80013dc <TaskMoveDown+0x298>)
 800138a:	6818      	ldr	r0, [r3, #0]
 800138c:	f107 0114 	add.w	r1, r7, #20
 8001390:	2300      	movs	r3, #0
 8001392:	2201      	movs	r2, #1
 8001394:	f004 fb0c 	bl	80059b0 <xQueueGenericSend>
			positionXY[0]=xAchse;
 8001398:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800139c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80013a0:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80013a4:	601a      	str	r2, [r3, #0]
			positionXY[1]=lowest;
 80013a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80013aa:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80013ae:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80013b2:	605a      	str	r2, [r3, #4]
			xQueueSend( position, ( void * ) &positionXY,  1 );
 80013b4:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <TaskMoveDown+0x294>)
 80013b6:	6818      	ldr	r0, [r3, #0]
 80013b8:	f107 010c 	add.w	r1, r7, #12
 80013bc:	2300      	movs	r3, #0
 80013be:	2201      	movs	r2, #1
 80013c0:	f004 faf6 	bl	80059b0 <xQueueGenericSend>

			//xSemaphoreGive(displayUsartSem);
			//vTaskDelay(400);
			xSemaphoreGive(checkRowsSem);
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <TaskMoveDown+0x29c>)
 80013c6:	6818      	ldr	r0, [r3, #0]
 80013c8:	2300      	movs	r3, #0
 80013ca:	2200      	movs	r2, #0
 80013cc:	2100      	movs	r1, #0
 80013ce:	f004 faef 	bl	80059b0 <xQueueGenericSend>
		if(xSemaphoreTake(buttonC, (TickType_t)portMAX_DELAY)== pdTRUE)
 80013d2:	e6c2      	b.n	800115a <TaskMoveDown+0x16>
 80013d4:	20000120 	.word	0x20000120
 80013d8:	20000140 	.word	0x20000140
 80013dc:	2000013c 	.word	0x2000013c
 80013e0:	20000130 	.word	0x20000130

080013e4 <TaskCheckRow>:
		}

    }
}
//_________________________________________________________
void TaskCheckRow( void * pvParameters ){
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b0ce      	sub	sp, #312	; 0x138
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80013ee:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80013f2:	6018      	str	r0, [r3, #0]
	int display[8][8];
	int positionXY[2];
	int xAchse;
	int yAchse;
	bool allOnes = true;
 80013f4:	2301      	movs	r3, #1
 80013f6:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137

    for(;;)
    {
    	if(xSemaphoreTake(checkRowsSem, (TickType_t)portMAX_DELAY)== pdTRUE)
 80013fa:	4b97      	ldr	r3, [pc, #604]	; (8001658 <TaskCheckRow+0x274>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f04f 31ff 	mov.w	r1, #4294967295
 8001402:	4618      	mov	r0, r3
 8001404:	f004 fdda 	bl	8005fbc <xQueueSemaphoreTake>
 8001408:	4603      	mov	r3, r0
 800140a:	2b01      	cmp	r3, #1
 800140c:	d1f5      	bne.n	80013fa <TaskCheckRow+0x16>
    	{
			xQueueReceive( position, &positionXY, ( TickType_t ) 10 );
 800140e:	4b93      	ldr	r3, [pc, #588]	; (800165c <TaskCheckRow+0x278>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f107 0108 	add.w	r1, r7, #8
 8001416:	220a      	movs	r2, #10
 8001418:	4618      	mov	r0, r3
 800141a:	f004 fcef 	bl	8005dfc <xQueueReceive>
			xQueueReceive( feld, &display, ( TickType_t ) 10 );
 800141e:	4b90      	ldr	r3, [pc, #576]	; (8001660 <TaskCheckRow+0x27c>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f107 0110 	add.w	r1, r7, #16
 8001426:	220a      	movs	r2, #10
 8001428:	4618      	mov	r0, r3
 800142a:	f004 fce7 	bl	8005dfc <xQueueReceive>
			xAchse = positionXY[0];
 800142e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001432:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
			yAchse = positionXY[1];
 800143c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001440:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
			allOnes = true;
 800144a:	2301      	movs	r3, #1
 800144c:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
			for(int i =0; i<8; i++){
 8001450:	2300      	movs	r3, #0
 8001452:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8001456:	e015      	b.n	8001484 <TaskCheckRow+0xa0>
				if (display[yAchse][i] == 0){
 8001458:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800145c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001460:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001464:	00d1      	lsls	r1, r2, #3
 8001466:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800146a:	440a      	add	r2, r1
 800146c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d102      	bne.n	800147a <TaskCheckRow+0x96>
					allOnes = false;
 8001474:	2300      	movs	r3, #0
 8001476:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
			for(int i =0; i<8; i++){
 800147a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800147e:	3301      	adds	r3, #1
 8001480:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8001484:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001488:	2b07      	cmp	r3, #7
 800148a:	dde5      	ble.n	8001458 <TaskCheckRow+0x74>
				}
			}
			if(allOnes){
 800148c:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8001490:	2b00      	cmp	r3, #0
 8001492:	d019      	beq.n	80014c8 <TaskCheckRow+0xe4>
				for(int i =0; i<8; i++){
 8001494:	2300      	movs	r3, #0
 8001496:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800149a:	e011      	b.n	80014c0 <TaskCheckRow+0xdc>
					display[yAchse][i]=0;
 800149c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80014a0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80014a4:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80014a8:	00d1      	lsls	r1, r2, #3
 80014aa:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80014ae:	440a      	add	r2, r1
 80014b0:	2100      	movs	r1, #0
 80014b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for(int i =0; i<8; i++){
 80014b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80014ba:	3301      	adds	r3, #1
 80014bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80014c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80014c4:	2b07      	cmp	r3, #7
 80014c6:	dde9      	ble.n	800149c <TaskCheckRow+0xb8>
				}
			}

			allOnes = true;
 80014c8:	2301      	movs	r3, #1
 80014ca:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
			for(int i =0; i<8; i++){
 80014ce:	2300      	movs	r3, #0
 80014d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80014d4:	e016      	b.n	8001504 <TaskCheckRow+0x120>
				if (display[yAchse-1][i] == 0){
 80014d6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80014da:	1e5a      	subs	r2, r3, #1
 80014dc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80014e0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80014e4:	00d1      	lsls	r1, r2, #3
 80014e6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80014ea:	440a      	add	r2, r1
 80014ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d102      	bne.n	80014fa <TaskCheckRow+0x116>
					allOnes = false;
 80014f4:	2300      	movs	r3, #0
 80014f6:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
			for(int i =0; i<8; i++){
 80014fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80014fe:	3301      	adds	r3, #1
 8001500:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001504:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001508:	2b07      	cmp	r3, #7
 800150a:	dde4      	ble.n	80014d6 <TaskCheckRow+0xf2>
				}
			}
			if(allOnes){
 800150c:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8001510:	2b00      	cmp	r3, #0
 8001512:	d01a      	beq.n	800154a <TaskCheckRow+0x166>
				for(int i =0; i<8; i++){
 8001514:	2300      	movs	r3, #0
 8001516:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800151a:	e012      	b.n	8001542 <TaskCheckRow+0x15e>
					display[yAchse-1][i]=0;
 800151c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001520:	1e5a      	subs	r2, r3, #1
 8001522:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001526:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800152a:	00d1      	lsls	r1, r2, #3
 800152c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001530:	440a      	add	r2, r1
 8001532:	2100      	movs	r1, #0
 8001534:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for(int i =0; i<8; i++){
 8001538:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800153c:	3301      	adds	r3, #1
 800153e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001542:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001546:	2b07      	cmp	r3, #7
 8001548:	dde8      	ble.n	800151c <TaskCheckRow+0x138>
				}
			}

			//test
			if(allOnes){
 800154a:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800154e:	2b00      	cmp	r3, #0
 8001550:	d053      	beq.n	80015fa <TaskCheckRow+0x216>
				for(int i = yAchse; i > 0; i-- ){
 8001552:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001556:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800155a:	e02a      	b.n	80015b2 <TaskCheckRow+0x1ce>
					for(int j =0; j<8;j++){
 800155c:	2300      	movs	r3, #0
 800155e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001562:	e01d      	b.n	80015a0 <TaskCheckRow+0x1bc>
						display[i][j]=display[i-2][j];
 8001564:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001568:	1e9a      	subs	r2, r3, #2
 800156a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800156e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001572:	00d1      	lsls	r1, r2, #3
 8001574:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001578:	440a      	add	r2, r1
 800157a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800157e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001582:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001586:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800158a:	00d0      	lsls	r0, r2, #3
 800158c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001590:	4402      	add	r2, r0
 8001592:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					for(int j =0; j<8;j++){
 8001596:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800159a:	3301      	adds	r3, #1
 800159c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80015a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80015a4:	2b07      	cmp	r3, #7
 80015a6:	dddd      	ble.n	8001564 <TaskCheckRow+0x180>
				for(int i = yAchse; i > 0; i-- ){
 80015a8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015ac:	3b01      	subs	r3, #1
 80015ae:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80015b2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	dcd0      	bgt.n	800155c <TaskCheckRow+0x178>
					}
				}

				for(int i = 0; i<8;i++){
 80015ba:	2300      	movs	r3, #0
 80015bc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80015c0:	e017      	b.n	80015f2 <TaskCheckRow+0x20e>
					display[0][i] =0;
 80015c2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80015c6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80015ca:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80015ce:	2100      	movs	r1, #0
 80015d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					display[1][i] =0;
 80015d4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80015d8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80015dc:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80015e0:	3208      	adds	r2, #8
 80015e2:	2100      	movs	r1, #0
 80015e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for(int i = 0; i<8;i++){
 80015e8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80015ec:	3301      	adds	r3, #1
 80015ee:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80015f2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80015f6:	2b07      	cmp	r3, #7
 80015f8:	dde3      	ble.n	80015c2 <TaskCheckRow+0x1de>
				}
			}
			//test ende

			xQueueSend( feld, ( void * ) &display,  1 );
 80015fa:	4b19      	ldr	r3, [pc, #100]	; (8001660 <TaskCheckRow+0x27c>)
 80015fc:	6818      	ldr	r0, [r3, #0]
 80015fe:	f107 0110 	add.w	r1, r7, #16
 8001602:	2300      	movs	r3, #0
 8001604:	2201      	movs	r2, #1
 8001606:	f004 f9d3 	bl	80059b0 <xQueueGenericSend>
			positionXY[0]=3;
 800160a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800160e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001612:	2203      	movs	r2, #3
 8001614:	601a      	str	r2, [r3, #0]
			positionXY[1]=1;
 8001616:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800161a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800161e:	2201      	movs	r2, #1
 8001620:	605a      	str	r2, [r3, #4]
			xQueueSend( position, ( void * ) &positionXY,  1 );
 8001622:	4b0e      	ldr	r3, [pc, #56]	; (800165c <TaskCheckRow+0x278>)
 8001624:	6818      	ldr	r0, [r3, #0]
 8001626:	f107 0108 	add.w	r1, r7, #8
 800162a:	2300      	movs	r3, #0
 800162c:	2201      	movs	r2, #1
 800162e:	f004 f9bf 	bl	80059b0 <xQueueGenericSend>
			xSemaphoreGive(displayUsartSem);
 8001632:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <TaskCheckRow+0x280>)
 8001634:	6818      	ldr	r0, [r3, #0]
 8001636:	2300      	movs	r3, #0
 8001638:	2200      	movs	r2, #0
 800163a:	2100      	movs	r1, #0
 800163c:	f004 f9b8 	bl	80059b0 <xQueueGenericSend>
			vTaskDelay(400);
 8001640:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001644:	f005 f8ee 	bl	8006824 <vTaskDelay>
			xSemaphoreGive(newBlockSem);
 8001648:	4b07      	ldr	r3, [pc, #28]	; (8001668 <TaskCheckRow+0x284>)
 800164a:	6818      	ldr	r0, [r3, #0]
 800164c:	2300      	movs	r3, #0
 800164e:	2200      	movs	r2, #0
 8001650:	2100      	movs	r1, #0
 8001652:	f004 f9ad 	bl	80059b0 <xQueueGenericSend>
    	if(xSemaphoreTake(checkRowsSem, (TickType_t)portMAX_DELAY)== pdTRUE)
 8001656:	e6d0      	b.n	80013fa <TaskCheckRow+0x16>
 8001658:	20000130 	.word	0x20000130
 800165c:	20000140 	.word	0x20000140
 8001660:	2000013c 	.word	0x2000013c
 8001664:	20000124 	.word	0x20000124
 8001668:	2000012c 	.word	0x2000012c

0800166c <TaskDisplayUsart>:

    	}
    }
}
//_________________________________________________________
void TaskDisplayUsart( void * pvParameters ){
 800166c:	b580      	push	{r7, lr}
 800166e:	b0c6      	sub	sp, #280	; 0x118
 8001670:	af00      	add	r7, sp, #0
 8001672:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001676:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800167a:	6018      	str	r0, [r3, #0]
	int display[8][8];
    for(;;)
    {
		if(xSemaphoreTake(displayUsartSem, (TickType_t)portMAX_DELAY)== pdTRUE)
 800167c:	4b39      	ldr	r3, [pc, #228]	; (8001764 <TaskDisplayUsart+0xf8>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f04f 31ff 	mov.w	r1, #4294967295
 8001684:	4618      	mov	r0, r3
 8001686:	f004 fc99 	bl	8005fbc <xQueueSemaphoreTake>
 800168a:	4603      	mov	r3, r0
 800168c:	2b01      	cmp	r3, #1
 800168e:	d1f5      	bne.n	800167c <TaskDisplayUsart+0x10>
		{
			xQueueReceive( feld, &display, ( TickType_t ) 10 );
 8001690:	4b35      	ldr	r3, [pc, #212]	; (8001768 <TaskDisplayUsart+0xfc>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f107 0110 	add.w	r1, r7, #16
 8001698:	220a      	movs	r2, #10
 800169a:	4618      	mov	r0, r3
 800169c:	f004 fbae 	bl	8005dfc <xQueueReceive>

			HAL_UART_Transmit(&huart2, "\n", sizeof(char), HAL_MAX_DELAY);
 80016a0:	f04f 33ff 	mov.w	r3, #4294967295
 80016a4:	2201      	movs	r2, #1
 80016a6:	4931      	ldr	r1, [pc, #196]	; (800176c <TaskDisplayUsart+0x100>)
 80016a8:	4831      	ldr	r0, [pc, #196]	; (8001770 <TaskDisplayUsart+0x104>)
 80016aa:	f003 f923 	bl	80048f4 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, "\r", sizeof(char), HAL_MAX_DELAY);
 80016ae:	f04f 33ff 	mov.w	r3, #4294967295
 80016b2:	2201      	movs	r2, #1
 80016b4:	492f      	ldr	r1, [pc, #188]	; (8001774 <TaskDisplayUsart+0x108>)
 80016b6:	482e      	ldr	r0, [pc, #184]	; (8001770 <TaskDisplayUsart+0x104>)
 80016b8:	f003 f91c 	bl	80048f4 <HAL_UART_Transmit>

			for(int i = 0; i <8; i++){
 80016bc:	2300      	movs	r3, #0
 80016be:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80016c2:	e042      	b.n	800174a <TaskDisplayUsart+0xde>
				for(int j = 0; j <8; j++){
 80016c4:	2300      	movs	r3, #0
 80016c6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80016ca:	e027      	b.n	800171c <TaskDisplayUsart+0xb0>
					char c=display[i][j]+'0';
 80016cc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80016d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80016d4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80016d8:	00d1      	lsls	r1, r2, #3
 80016da:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80016de:	440a      	add	r2, r1
 80016e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	3330      	adds	r3, #48	; 0x30
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80016ee:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80016f2:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart2, &c, sizeof(char), HAL_MAX_DELAY);
 80016f4:	f107 010f 	add.w	r1, r7, #15
 80016f8:	f04f 33ff 	mov.w	r3, #4294967295
 80016fc:	2201      	movs	r2, #1
 80016fe:	481c      	ldr	r0, [pc, #112]	; (8001770 <TaskDisplayUsart+0x104>)
 8001700:	f003 f8f8 	bl	80048f4 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart2, " ", sizeof(char), HAL_MAX_DELAY);
 8001704:	f04f 33ff 	mov.w	r3, #4294967295
 8001708:	2201      	movs	r2, #1
 800170a:	491b      	ldr	r1, [pc, #108]	; (8001778 <TaskDisplayUsart+0x10c>)
 800170c:	4818      	ldr	r0, [pc, #96]	; (8001770 <TaskDisplayUsart+0x104>)
 800170e:	f003 f8f1 	bl	80048f4 <HAL_UART_Transmit>
				for(int j = 0; j <8; j++){
 8001712:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001716:	3301      	adds	r3, #1
 8001718:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800171c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001720:	2b07      	cmp	r3, #7
 8001722:	ddd3      	ble.n	80016cc <TaskDisplayUsart+0x60>
				}
				HAL_UART_Transmit(&huart2, "\n", sizeof(char), HAL_MAX_DELAY);
 8001724:	f04f 33ff 	mov.w	r3, #4294967295
 8001728:	2201      	movs	r2, #1
 800172a:	4910      	ldr	r1, [pc, #64]	; (800176c <TaskDisplayUsart+0x100>)
 800172c:	4810      	ldr	r0, [pc, #64]	; (8001770 <TaskDisplayUsart+0x104>)
 800172e:	f003 f8e1 	bl	80048f4 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, "\r", sizeof(char), HAL_MAX_DELAY);
 8001732:	f04f 33ff 	mov.w	r3, #4294967295
 8001736:	2201      	movs	r2, #1
 8001738:	490e      	ldr	r1, [pc, #56]	; (8001774 <TaskDisplayUsart+0x108>)
 800173a:	480d      	ldr	r0, [pc, #52]	; (8001770 <TaskDisplayUsart+0x104>)
 800173c:	f003 f8da 	bl	80048f4 <HAL_UART_Transmit>
			for(int i = 0; i <8; i++){
 8001740:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001744:	3301      	adds	r3, #1
 8001746:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800174a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800174e:	2b07      	cmp	r3, #7
 8001750:	ddb8      	ble.n	80016c4 <TaskDisplayUsart+0x58>
			}
			xQueueSend( feld, ( void * ) &display,  1 );
 8001752:	4b05      	ldr	r3, [pc, #20]	; (8001768 <TaskDisplayUsart+0xfc>)
 8001754:	6818      	ldr	r0, [r3, #0]
 8001756:	f107 0110 	add.w	r1, r7, #16
 800175a:	2300      	movs	r3, #0
 800175c:	2201      	movs	r2, #1
 800175e:	f004 f927 	bl	80059b0 <xQueueGenericSend>
		if(xSemaphoreTake(displayUsartSem, (TickType_t)portMAX_DELAY)== pdTRUE)
 8001762:	e78b      	b.n	800167c <TaskDisplayUsart+0x10>
 8001764:	20000124 	.word	0x20000124
 8001768:	2000013c 	.word	0x2000013c
 800176c:	08008538 	.word	0x08008538
 8001770:	20000090 	.word	0x20000090
 8001774:	0800853c 	.word	0x0800853c
 8001778:	08008540 	.word	0x08008540

0800177c <TaskDisplaySPI>:
		}

    }
}
//_________________________________________________________
void TaskDisplaySPI( void * pvParameters ){
 800177c:	b580      	push	{r7, lr}
 800177e:	b0c2      	sub	sp, #264	; 0x108
 8001780:	af00      	add	r7, sp, #0
 8001782:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001786:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800178a:	6018      	str	r0, [r3, #0]
	int display[8][8];
    for(;;)
    {
		if(xSemaphoreTake(displaySPISem, (TickType_t)portMAX_DELAY)== pdTRUE)
 800178c:	4b14      	ldr	r3, [pc, #80]	; (80017e0 <TaskDisplaySPI+0x64>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f04f 31ff 	mov.w	r1, #4294967295
 8001794:	4618      	mov	r0, r3
 8001796:	f004 fc11 	bl	8005fbc <xQueueSemaphoreTake>
 800179a:	4603      	mov	r3, r0
 800179c:	2b01      	cmp	r3, #1
 800179e:	d1f5      	bne.n	800178c <TaskDisplaySPI+0x10>
		{
			xQueueReceive( feld, &display, ( TickType_t ) 10 );
 80017a0:	4b10      	ldr	r3, [pc, #64]	; (80017e4 <TaskDisplaySPI+0x68>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f107 0108 	add.w	r1, r7, #8
 80017a8:	220a      	movs	r2, #10
 80017aa:	4618      	mov	r0, r3
 80017ac:	f004 fb26 	bl	8005dfc <xQueueReceive>
			//MAX7219_paintPoints(0, display);
			HAL_UART_Transmit(&huart2, "l", sizeof(char), HAL_MAX_DELAY);
 80017b0:	f04f 33ff 	mov.w	r3, #4294967295
 80017b4:	2201      	movs	r2, #1
 80017b6:	490c      	ldr	r1, [pc, #48]	; (80017e8 <TaskDisplaySPI+0x6c>)
 80017b8:	480c      	ldr	r0, [pc, #48]	; (80017ec <TaskDisplaySPI+0x70>)
 80017ba:	f003 f89b 	bl	80048f4 <HAL_UART_Transmit>
			MAX7219_MatrixSetRow64(0, CHR('A'));
 80017be:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <TaskDisplaySPI+0x74>)
 80017c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c4:	2000      	movs	r0, #0
 80017c6:	f000 f9a1 	bl	8001b0c <MAX7219_MatrixSetRow64>
			MAX7219_MatrixUpdate();
 80017ca:	f000 f9d1 	bl	8001b70 <MAX7219_MatrixUpdate>
			xQueueSend( feld, ( void * ) &display,  1 );
 80017ce:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <TaskDisplaySPI+0x68>)
 80017d0:	6818      	ldr	r0, [r3, #0]
 80017d2:	f107 0108 	add.w	r1, r7, #8
 80017d6:	2300      	movs	r3, #0
 80017d8:	2201      	movs	r2, #1
 80017da:	f004 f8e9 	bl	80059b0 <xQueueGenericSend>
		if(xSemaphoreTake(displaySPISem, (TickType_t)portMAX_DELAY)== pdTRUE)
 80017de:	e7d5      	b.n	800178c <TaskDisplaySPI+0x10>
 80017e0:	20000138 	.word	0x20000138
 80017e4:	2000013c 	.word	0x2000013c
 80017e8:	08008544 	.word	0x08008544
 80017ec:	20000090 	.word	0x20000090
 80017f0:	08008588 	.word	0x08008588

080017f4 <EXTI3_IRQHandler>:

    }
}
//_________________________________________________________
void EXTI3_IRQHandler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
	BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 80017fa:	2300      	movs	r3, #0
 80017fc:	607b      	str	r3, [r7, #4]
	xSemaphoreGiveFromISR(buttonA,  &xHigherPriorityTaskWoken);
 80017fe:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <EXTI3_IRQHandler+0x3c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	1d3a      	adds	r2, r7, #4
 8001804:	4611      	mov	r1, r2
 8001806:	4618      	mov	r0, r3
 8001808:	f004 fa6b 	bl	8005ce2 <xQueueGiveFromISR>
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d007      	beq.n	8001822 <EXTI3_IRQHandler+0x2e>
 8001812:	4b08      	ldr	r3, [pc, #32]	; (8001834 <EXTI3_IRQHandler+0x40>)
 8001814:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	f3bf 8f4f 	dsb	sy
 800181e:	f3bf 8f6f 	isb	sy
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_3);
 8001822:	4b05      	ldr	r3, [pc, #20]	; (8001838 <EXTI3_IRQHandler+0x44>)
 8001824:	2208      	movs	r2, #8
 8001826:	615a      	str	r2, [r3, #20]
}
 8001828:	bf00      	nop
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20000118 	.word	0x20000118
 8001834:	e000ed04 	.word	0xe000ed04
 8001838:	40010400 	.word	0x40010400

0800183c <EXTI4_IRQHandler>:
//_________________________________________________________
void EXTI4_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
	BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 8001842:	2300      	movs	r3, #0
 8001844:	607b      	str	r3, [r7, #4]
	xSemaphoreGiveFromISR(buttonB,  &xHigherPriorityTaskWoken);
 8001846:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <EXTI4_IRQHandler+0x3c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	1d3a      	adds	r2, r7, #4
 800184c:	4611      	mov	r1, r2
 800184e:	4618      	mov	r0, r3
 8001850:	f004 fa47 	bl	8005ce2 <xQueueGiveFromISR>
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d007      	beq.n	800186a <EXTI4_IRQHandler+0x2e>
 800185a:	4b08      	ldr	r3, [pc, #32]	; (800187c <EXTI4_IRQHandler+0x40>)
 800185c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	f3bf 8f4f 	dsb	sy
 8001866:	f3bf 8f6f 	isb	sy
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 800186a:	4b05      	ldr	r3, [pc, #20]	; (8001880 <EXTI4_IRQHandler+0x44>)
 800186c:	2210      	movs	r2, #16
 800186e:	615a      	str	r2, [r3, #20]
}
 8001870:	bf00      	nop
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	2000011c 	.word	0x2000011c
 800187c:	e000ed04 	.word	0xe000ed04
 8001880:	40010400 	.word	0x40010400

08001884 <EXTI9_5_IRQHandler>:
//_________________________________________________________
void EXTI9_5_IRQHandler(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
	BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 800188a:	2300      	movs	r3, #0
 800188c:	607b      	str	r3, [r7, #4]
	xSemaphoreGiveFromISR(buttonC,  &xHigherPriorityTaskWoken);
 800188e:	4b0c      	ldr	r3, [pc, #48]	; (80018c0 <EXTI9_5_IRQHandler+0x3c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	1d3a      	adds	r2, r7, #4
 8001894:	4611      	mov	r1, r2
 8001896:	4618      	mov	r0, r3
 8001898:	f004 fa23 	bl	8005ce2 <xQueueGiveFromISR>
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d007      	beq.n	80018b2 <EXTI9_5_IRQHandler+0x2e>
 80018a2:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <EXTI9_5_IRQHandler+0x40>)
 80018a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	f3bf 8f4f 	dsb	sy
 80018ae:	f3bf 8f6f 	isb	sy
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_5);
 80018b2:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <EXTI9_5_IRQHandler+0x44>)
 80018b4:	2220      	movs	r2, #32
 80018b6:	615a      	str	r2, [r3, #20]
}
 80018b8:	bf00      	nop
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	20000120 	.word	0x20000120
 80018c4:	e000ed04 	.word	0xe000ed04
 80018c8:	40010400 	.word	0x40010400

080018cc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80018d4:	2001      	movs	r0, #1
 80018d6:	f003 fe29 	bl	800552c <osDelay>
 80018da:	e7fb      	b.n	80018d4 <StartDefaultTask+0x8>

080018dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a04      	ldr	r2, [pc, #16]	; (80018fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d101      	bne.n	80018f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80018ee:	f000 fb31 	bl	8001f54 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40001400 	.word	0x40001400

08001900 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001904:	b672      	cpsid	i
}
 8001906:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001908:	e7fe      	b.n	8001908 <Error_Handler+0x8>

0800190a <MAX7219_Write>:
	/* Deselect SS */
	SS_Deselect();
}

bool MAX7219_Write(uint8_t index, uint8_t reg, uint8_t data)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b084      	sub	sp, #16
 800190e:	af00      	add	r7, sp, #0
 8001910:	4603      	mov	r3, r0
 8001912:	71fb      	strb	r3, [r7, #7]
 8001914:	460b      	mov	r3, r1
 8001916:	71bb      	strb	r3, [r7, #6]
 8001918:	4613      	mov	r3, r2
 800191a:	717b      	strb	r3, [r7, #5]
	if(index >= MAX7219_IC_NUM) return false;
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MAX7219_Write+0x1c>
 8001922:	2300      	movs	r3, #0
 8001924:	e05b      	b.n	80019de <MAX7219_Write+0xd4>

	SS_Select();
 8001926:	f000 f887 	bl	8001a38 <SS_Select>

	/* NOOP to following ic */
	for(int i = index; i < MAX7219_IC_NUM-1; i++)
 800192a:	79fb      	ldrb	r3, [r7, #7]
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	e018      	b.n	8001962 <MAX7219_Write+0x58>
	{
		if(!SPI_Tx(MAX7219_REG_NOOP)) return false;		/* Reg */
 8001930:	2000      	movs	r0, #0
 8001932:	f000 f8a9 	bl	8001a88 <SPI_Tx>
 8001936:	4603      	mov	r3, r0
 8001938:	f083 0301 	eor.w	r3, r3, #1
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MAX7219_Write+0x3c>
 8001942:	2300      	movs	r3, #0
 8001944:	e04b      	b.n	80019de <MAX7219_Write+0xd4>
		if(!SPI_Tx(MAX7219_REG_NOOP)) return false;		/* Data */
 8001946:	2000      	movs	r0, #0
 8001948:	f000 f89e 	bl	8001a88 <SPI_Tx>
 800194c:	4603      	mov	r3, r0
 800194e:	f083 0301 	eor.w	r3, r3, #1
 8001952:	b2db      	uxtb	r3, r3
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MAX7219_Write+0x52>
 8001958:	2300      	movs	r3, #0
 800195a:	e040      	b.n	80019de <MAX7219_Write+0xd4>
	for(int i = index; i < MAX7219_IC_NUM-1; i++)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	3301      	adds	r3, #1
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2b00      	cmp	r3, #0
 8001966:	dbe3      	blt.n	8001930 <MAX7219_Write+0x26>
	}

	/* Write register */
	if(!SPI_Tx(reg)) return false;
 8001968:	79bb      	ldrb	r3, [r7, #6]
 800196a:	4618      	mov	r0, r3
 800196c:	f000 f88c 	bl	8001a88 <SPI_Tx>
 8001970:	4603      	mov	r3, r0
 8001972:	f083 0301 	eor.w	r3, r3, #1
 8001976:	b2db      	uxtb	r3, r3
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MAX7219_Write+0x76>
 800197c:	2300      	movs	r3, #0
 800197e:	e02e      	b.n	80019de <MAX7219_Write+0xd4>
	if(!SPI_Tx(data)) return false;
 8001980:	797b      	ldrb	r3, [r7, #5]
 8001982:	4618      	mov	r0, r3
 8001984:	f000 f880 	bl	8001a88 <SPI_Tx>
 8001988:	4603      	mov	r3, r0
 800198a:	f083 0301 	eor.w	r3, r3, #1
 800198e:	b2db      	uxtb	r3, r3
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MAX7219_Write+0x8e>
 8001994:	2300      	movs	r3, #0
 8001996:	e022      	b.n	80019de <MAX7219_Write+0xd4>

	/* NOOP to previous ic */
	for(int i = 0; i < index; i++)
 8001998:	2300      	movs	r3, #0
 800199a:	60bb      	str	r3, [r7, #8]
 800199c:	e018      	b.n	80019d0 <MAX7219_Write+0xc6>
	{
		if(!SPI_Tx(MAX7219_REG_NOOP)) return false;		/* Reg */
 800199e:	2000      	movs	r0, #0
 80019a0:	f000 f872 	bl	8001a88 <SPI_Tx>
 80019a4:	4603      	mov	r3, r0
 80019a6:	f083 0301 	eor.w	r3, r3, #1
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MAX7219_Write+0xaa>
 80019b0:	2300      	movs	r3, #0
 80019b2:	e014      	b.n	80019de <MAX7219_Write+0xd4>
		if(!SPI_Tx(MAX7219_REG_NOOP)) return false;		/* Data */
 80019b4:	2000      	movs	r0, #0
 80019b6:	f000 f867 	bl	8001a88 <SPI_Tx>
 80019ba:	4603      	mov	r3, r0
 80019bc:	f083 0301 	eor.w	r3, r3, #1
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MAX7219_Write+0xc0>
 80019c6:	2300      	movs	r3, #0
 80019c8:	e009      	b.n	80019de <MAX7219_Write+0xd4>
	for(int i = 0; i < index; i++)
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	3301      	adds	r3, #1
 80019ce:	60bb      	str	r3, [r7, #8]
 80019d0:	79fb      	ldrb	r3, [r7, #7]
 80019d2:	68ba      	ldr	r2, [r7, #8]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	dbe2      	blt.n	800199e <MAX7219_Write+0x94>
	}

	SS_Deselect();
 80019d8:	f000 f842 	bl	8001a60 <SS_Deselect>

	return true;
 80019dc:	2301      	movs	r3, #1
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <MAX7219_Digit>:

bool MAX7219_Digit(uint8_t index, uint8_t digit, int8_t value)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b082      	sub	sp, #8
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	4603      	mov	r3, r0
 80019ee:	71fb      	strb	r3, [r7, #7]
 80019f0:	460b      	mov	r3, r1
 80019f2:	71bb      	strb	r3, [r7, #6]
 80019f4:	4613      	mov	r3, r2
 80019f6:	717b      	strb	r3, [r7, #5]
	if(index >= MAX7219_IC_NUM) return false;
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MAX7219_Digit+0x1c>
 80019fe:	2300      	movs	r3, #0
 8001a00:	e015      	b.n	8001a2e <MAX7219_Digit+0x48>
	if(digit > 0x07) return false;
 8001a02:	79bb      	ldrb	r3, [r7, #6]
 8001a04:	2b07      	cmp	r3, #7
 8001a06:	d901      	bls.n	8001a0c <MAX7219_Digit+0x26>
 8001a08:	2300      	movs	r3, #0
 8001a0a:	e010      	b.n	8001a2e <MAX7219_Digit+0x48>

	if(!MAX7219_Write(index, digit+1, value)) return false;
 8001a0c:	79bb      	ldrb	r3, [r7, #6]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	b2d9      	uxtb	r1, r3
 8001a12:	797a      	ldrb	r2, [r7, #5]
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff ff77 	bl	800190a <MAX7219_Write>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	f083 0301 	eor.w	r3, r3, #1
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MAX7219_Digit+0x46>
 8001a28:	2300      	movs	r3, #0
 8001a2a:	e000      	b.n	8001a2e <MAX7219_Digit+0x48>

	return true;
 8001a2c:	2301      	movs	r3, #1
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
	...

08001a38 <SS_Select>:

	return true;
}

static void SS_Select()
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Max7219_SS_Port, Max7219_SS_Pin, GPIO_PIN_RESET);
 8001a3c:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <SS_Select+0x20>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a06      	ldr	r2, [pc, #24]	; (8001a5c <SS_Select+0x24>)
 8001a42:	8811      	ldrh	r1, [r2, #0]
 8001a44:	2200      	movs	r2, #0
 8001a46:	4618      	mov	r0, r3
 8001a48:	f000 fd54 	bl	80024f4 <HAL_GPIO_WritePin>
	DelayUS(1);
 8001a4c:	2001      	movs	r0, #1
 8001a4e:	f000 f835 	bl	8001abc <DelayUS>
}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20000148 	.word	0x20000148
 8001a5c:	2000014c 	.word	0x2000014c

08001a60 <SS_Deselect>:

static void SS_Deselect()
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Max7219_SS_Port, Max7219_SS_Pin, GPIO_PIN_SET);
 8001a64:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <SS_Deselect+0x20>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a06      	ldr	r2, [pc, #24]	; (8001a84 <SS_Deselect+0x24>)
 8001a6a:	8811      	ldrh	r1, [r2, #0]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f000 fd40 	bl	80024f4 <HAL_GPIO_WritePin>
	DelayUS(1);
 8001a74:	2001      	movs	r0, #1
 8001a76:	f000 f821 	bl	8001abc <DelayUS>
}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20000148 	.word	0x20000148
 8001a84:	2000014c 	.word	0x2000014c

08001a88 <SPI_Tx>:

static bool SPI_Tx(uint8_t data)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	71fb      	strb	r3, [r7, #7]
	if(HAL_SPI_Transmit(Max7219_SPI, &data, 1, HAL_MAX_DELAY) != HAL_OK) return false;
 8001a92:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <SPI_Tx+0x30>)
 8001a94:	6818      	ldr	r0, [r3, #0]
 8001a96:	1df9      	adds	r1, r7, #7
 8001a98:	f04f 33ff 	mov.w	r3, #4294967295
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f002 f936 	bl	8003d0e <HAL_SPI_Transmit>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <SPI_Tx+0x24>
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	e000      	b.n	8001aae <SPI_Tx+0x26>
	return true;
 8001aac:	2301      	movs	r3, #1
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20000144 	.word	0x20000144

08001abc <DelayUS>:
  __ASM volatile ("NOP");
  __ASM volatile ("NOP");
  __ASM volatile ("NOP");
}

static void DelayUS(uint32_t us) {
 8001abc:	b480      	push	{r7}
 8001abe:	b087      	sub	sp, #28
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8001ac4:	4b0e      	ldr	r3, [pc, #56]	; (8001b00 <DelayUS+0x44>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a0e      	ldr	r2, [pc, #56]	; (8001b04 <DelayUS+0x48>)
 8001aca:	fba2 2303 	umull	r2, r3, r2, r3
 8001ace:	0c9a      	lsrs	r2, r3, #18
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	fb02 f303 	mul.w	r3, r2, r3
 8001ad6:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8001ad8:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <DelayUS+0x4c>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8001ade:	4b0a      	ldr	r3, [pc, #40]	; (8001b08 <DelayUS+0x4c>)
 8001ae0:	685a      	ldr	r2, [r3, #4]
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	697a      	ldr	r2, [r7, #20]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d8f6      	bhi.n	8001ade <DelayUS+0x22>
}
 8001af0:	bf00      	nop
 8001af2:	bf00      	nop
 8001af4:	371c      	adds	r7, #28
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	20000000 	.word	0x20000000
 8001b04:	431bde83 	.word	0x431bde83
 8001b08:	e0001000 	.word	0xe0001000

08001b0c <MAX7219_MatrixSetRow64>:
		FrameBuffer[index][i] = rows[i];
	}
}

void MAX7219_MatrixSetRow64(uint8_t index,  uint64_t rows)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b087      	sub	sp, #28
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4601      	mov	r1, r0
 8001b14:	e9c7 2300 	strd	r2, r3, [r7]
 8001b18:	460b      	mov	r3, r1
 8001b1a:	73fb      	strb	r3, [r7, #15]
	for(int i =0; i < 8; i++)
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	617b      	str	r3, [r7, #20]
 8001b20:	e01a      	b.n	8001b58 <MAX7219_MatrixSetRow64+0x4c>
	{
		uint8_t row = rows & 0xFF;
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	74fb      	strb	r3, [r7, #19]
		FrameBuffer[index][7-i] = row;
 8001b26:	7bfa      	ldrb	r2, [r7, #15]
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	f1c3 0307 	rsb	r3, r3, #7
 8001b2e:	490f      	ldr	r1, [pc, #60]	; (8001b6c <MAX7219_MatrixSetRow64+0x60>)
 8001b30:	00d2      	lsls	r2, r2, #3
 8001b32:	440a      	add	r2, r1
 8001b34:	4413      	add	r3, r2
 8001b36:	7cfa      	ldrb	r2, [r7, #19]
 8001b38:	701a      	strb	r2, [r3, #0]
		rows = rows >> 8;
 8001b3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b3e:	f04f 0200 	mov.w	r2, #0
 8001b42:	f04f 0300 	mov.w	r3, #0
 8001b46:	0a02      	lsrs	r2, r0, #8
 8001b48:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001b4c:	0a0b      	lsrs	r3, r1, #8
 8001b4e:	e9c7 2300 	strd	r2, r3, [r7]
	for(int i =0; i < 8; i++)
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	3301      	adds	r3, #1
 8001b56:	617b      	str	r3, [r7, #20]
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	2b07      	cmp	r3, #7
 8001b5c:	dde1      	ble.n	8001b22 <MAX7219_MatrixSetRow64+0x16>
	}
}
 8001b5e:	bf00      	nop
 8001b60:	bf00      	nop
 8001b62:	371c      	adds	r7, #28
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	20000150 	.word	0x20000150

08001b70 <MAX7219_MatrixUpdate>:
		FrameBuffer[3][i] |= lsbD0;
	}
}

bool MAX7219_MatrixUpdate()
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
	for(int index = 0; index < MAX7219_IC_NUM; index++)
 8001b76:	2300      	movs	r3, #0
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	e024      	b.n	8001bc6 <MAX7219_MatrixUpdate+0x56>
	{
		for(int digit = 0; digit < 8; digit++)
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60bb      	str	r3, [r7, #8]
 8001b80:	e01b      	b.n	8001bba <MAX7219_MatrixUpdate+0x4a>
		{

			uint8_t row = FrameBuffer[index][digit];
 8001b82:	4a15      	ldr	r2, [pc, #84]	; (8001bd8 <MAX7219_MatrixUpdate+0x68>)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	441a      	add	r2, r3
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	71fb      	strb	r3, [r7, #7]
			if(!MAX7219_Digit(index, digit, row)) return false;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	68ba      	ldr	r2, [r7, #8]
 8001b98:	b2d1      	uxtb	r1, r2
 8001b9a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff ff21 	bl	80019e6 <MAX7219_Digit>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	f083 0301 	eor.w	r3, r3, #1
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MAX7219_MatrixUpdate+0x44>
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	e00c      	b.n	8001bce <MAX7219_MatrixUpdate+0x5e>
		for(int digit = 0; digit < 8; digit++)
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	60bb      	str	r3, [r7, #8]
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	2b07      	cmp	r3, #7
 8001bbe:	dde0      	ble.n	8001b82 <MAX7219_MatrixUpdate+0x12>
	for(int index = 0; index < MAX7219_IC_NUM; index++)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	ddd7      	ble.n	8001b7c <MAX7219_MatrixUpdate+0xc>
		}
	}

	return true;
 8001bcc:	2301      	movs	r3, #1
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20000150 	.word	0x20000150

08001bdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be2:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <HAL_MspInit+0x4c>)
 8001be4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001be6:	4a10      	ldr	r2, [pc, #64]	; (8001c28 <HAL_MspInit+0x4c>)
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	6613      	str	r3, [r2, #96]	; 0x60
 8001bee:	4b0e      	ldr	r3, [pc, #56]	; (8001c28 <HAL_MspInit+0x4c>)
 8001bf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	607b      	str	r3, [r7, #4]
 8001bf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bfa:	4b0b      	ldr	r3, [pc, #44]	; (8001c28 <HAL_MspInit+0x4c>)
 8001bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bfe:	4a0a      	ldr	r2, [pc, #40]	; (8001c28 <HAL_MspInit+0x4c>)
 8001c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c04:	6593      	str	r3, [r2, #88]	; 0x58
 8001c06:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <HAL_MspInit+0x4c>)
 8001c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c0e:	603b      	str	r3, [r7, #0]
 8001c10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c12:	2200      	movs	r2, #0
 8001c14:	210f      	movs	r1, #15
 8001c16:	f06f 0001 	mvn.w	r0, #1
 8001c1a:	f000 fa97 	bl	800214c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40021000 	.word	0x40021000

08001c2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b08a      	sub	sp, #40	; 0x28
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c34:	f107 0314 	add.w	r3, r7, #20
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	60da      	str	r2, [r3, #12]
 8001c42:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a17      	ldr	r2, [pc, #92]	; (8001ca8 <HAL_SPI_MspInit+0x7c>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d128      	bne.n	8001ca0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c4e:	4b17      	ldr	r3, [pc, #92]	; (8001cac <HAL_SPI_MspInit+0x80>)
 8001c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c52:	4a16      	ldr	r2, [pc, #88]	; (8001cac <HAL_SPI_MspInit+0x80>)
 8001c54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c58:	6613      	str	r3, [r2, #96]	; 0x60
 8001c5a:	4b14      	ldr	r3, [pc, #80]	; (8001cac <HAL_SPI_MspInit+0x80>)
 8001c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c62:	613b      	str	r3, [r7, #16]
 8001c64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c66:	4b11      	ldr	r3, [pc, #68]	; (8001cac <HAL_SPI_MspInit+0x80>)
 8001c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c6a:	4a10      	ldr	r2, [pc, #64]	; (8001cac <HAL_SPI_MspInit+0x80>)
 8001c6c:	f043 0301 	orr.w	r3, r3, #1
 8001c70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c72:	4b0e      	ldr	r3, [pc, #56]	; (8001cac <HAL_SPI_MspInit+0x80>)
 8001c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001c7e:	23a0      	movs	r3, #160	; 0xa0
 8001c80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c82:	2302      	movs	r3, #2
 8001c84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c8e:	2305      	movs	r3, #5
 8001c90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c92:	f107 0314 	add.w	r3, r7, #20
 8001c96:	4619      	mov	r1, r3
 8001c98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c9c:	f000 fa80 	bl	80021a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ca0:	bf00      	nop
 8001ca2:	3728      	adds	r7, #40	; 0x28
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40013000 	.word	0x40013000
 8001cac:	40021000 	.word	0x40021000

08001cb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b0ac      	sub	sp, #176	; 0xb0
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	605a      	str	r2, [r3, #4]
 8001cc2:	609a      	str	r2, [r3, #8]
 8001cc4:	60da      	str	r2, [r3, #12]
 8001cc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cc8:	f107 0314 	add.w	r3, r7, #20
 8001ccc:	2288      	movs	r2, #136	; 0x88
 8001cce:	2100      	movs	r1, #0
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f006 fbbd 	bl	8008450 <memset>
  if(huart->Instance==USART2)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a21      	ldr	r2, [pc, #132]	; (8001d60 <HAL_UART_MspInit+0xb0>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d13b      	bne.n	8001d58 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ce8:	f107 0314 	add.w	r3, r7, #20
 8001cec:	4618      	mov	r0, r3
 8001cee:	f001 faaf 	bl	8003250 <HAL_RCCEx_PeriphCLKConfig>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001cf8:	f7ff fe02 	bl	8001900 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cfc:	4b19      	ldr	r3, [pc, #100]	; (8001d64 <HAL_UART_MspInit+0xb4>)
 8001cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d00:	4a18      	ldr	r2, [pc, #96]	; (8001d64 <HAL_UART_MspInit+0xb4>)
 8001d02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d06:	6593      	str	r3, [r2, #88]	; 0x58
 8001d08:	4b16      	ldr	r3, [pc, #88]	; (8001d64 <HAL_UART_MspInit+0xb4>)
 8001d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d10:	613b      	str	r3, [r7, #16]
 8001d12:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d14:	4b13      	ldr	r3, [pc, #76]	; (8001d64 <HAL_UART_MspInit+0xb4>)
 8001d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d18:	4a12      	ldr	r2, [pc, #72]	; (8001d64 <HAL_UART_MspInit+0xb4>)
 8001d1a:	f043 0301 	orr.w	r3, r3, #1
 8001d1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d20:	4b10      	ldr	r3, [pc, #64]	; (8001d64 <HAL_UART_MspInit+0xb4>)
 8001d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d2c:	230c      	movs	r3, #12
 8001d2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d32:	2302      	movs	r3, #2
 8001d34:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d44:	2307      	movs	r3, #7
 8001d46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d4e:	4619      	mov	r1, r3
 8001d50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d54:	f000 fa24 	bl	80021a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d58:	bf00      	nop
 8001d5a:	37b0      	adds	r7, #176	; 0xb0
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40004400 	.word	0x40004400
 8001d64:	40021000 	.word	0x40021000

08001d68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b08e      	sub	sp, #56	; 0x38
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001d70:	2300      	movs	r3, #0
 8001d72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001d76:	4b34      	ldr	r3, [pc, #208]	; (8001e48 <HAL_InitTick+0xe0>)
 8001d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7a:	4a33      	ldr	r2, [pc, #204]	; (8001e48 <HAL_InitTick+0xe0>)
 8001d7c:	f043 0320 	orr.w	r3, r3, #32
 8001d80:	6593      	str	r3, [r2, #88]	; 0x58
 8001d82:	4b31      	ldr	r3, [pc, #196]	; (8001e48 <HAL_InitTick+0xe0>)
 8001d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d86:	f003 0320 	and.w	r3, r3, #32
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d8e:	f107 0210 	add.w	r2, r7, #16
 8001d92:	f107 0314 	add.w	r3, r7, #20
 8001d96:	4611      	mov	r1, r2
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f001 f9c7 	bl	800312c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001d9e:	6a3b      	ldr	r3, [r7, #32]
 8001da0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d103      	bne.n	8001db0 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001da8:	f001 f994 	bl	80030d4 <HAL_RCC_GetPCLK1Freq>
 8001dac:	6378      	str	r0, [r7, #52]	; 0x34
 8001dae:	e004      	b.n	8001dba <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001db0:	f001 f990 	bl	80030d4 <HAL_RCC_GetPCLK1Freq>
 8001db4:	4603      	mov	r3, r0
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dbc:	4a23      	ldr	r2, [pc, #140]	; (8001e4c <HAL_InitTick+0xe4>)
 8001dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc2:	0c9b      	lsrs	r3, r3, #18
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001dc8:	4b21      	ldr	r3, [pc, #132]	; (8001e50 <HAL_InitTick+0xe8>)
 8001dca:	4a22      	ldr	r2, [pc, #136]	; (8001e54 <HAL_InitTick+0xec>)
 8001dcc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001dce:	4b20      	ldr	r3, [pc, #128]	; (8001e50 <HAL_InitTick+0xe8>)
 8001dd0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001dd4:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001dd6:	4a1e      	ldr	r2, [pc, #120]	; (8001e50 <HAL_InitTick+0xe8>)
 8001dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dda:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001ddc:	4b1c      	ldr	r3, [pc, #112]	; (8001e50 <HAL_InitTick+0xe8>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001de2:	4b1b      	ldr	r3, [pc, #108]	; (8001e50 <HAL_InitTick+0xe8>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001de8:	4b19      	ldr	r3, [pc, #100]	; (8001e50 <HAL_InitTick+0xe8>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8001dee:	4818      	ldr	r0, [pc, #96]	; (8001e50 <HAL_InitTick+0xe8>)
 8001df0:	f002 fa60 	bl	80042b4 <HAL_TIM_Base_Init>
 8001df4:	4603      	mov	r3, r0
 8001df6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001dfa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d11b      	bne.n	8001e3a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8001e02:	4813      	ldr	r0, [pc, #76]	; (8001e50 <HAL_InitTick+0xe8>)
 8001e04:	f002 fab8 	bl	8004378 <HAL_TIM_Base_Start_IT>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001e0e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d111      	bne.n	8001e3a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001e16:	2037      	movs	r0, #55	; 0x37
 8001e18:	f000 f9b4 	bl	8002184 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2b0f      	cmp	r3, #15
 8001e20:	d808      	bhi.n	8001e34 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8001e22:	2200      	movs	r2, #0
 8001e24:	6879      	ldr	r1, [r7, #4]
 8001e26:	2037      	movs	r0, #55	; 0x37
 8001e28:	f000 f990 	bl	800214c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e2c:	4a0a      	ldr	r2, [pc, #40]	; (8001e58 <HAL_InitTick+0xf0>)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6013      	str	r3, [r2, #0]
 8001e32:	e002      	b.n	8001e3a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001e3a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3738      	adds	r7, #56	; 0x38
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	431bde83 	.word	0x431bde83
 8001e50:	20000158 	.word	0x20000158
 8001e54:	40001400 	.word	0x40001400
 8001e58:	20000004 	.word	0x20000004

08001e5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e60:	e7fe      	b.n	8001e60 <NMI_Handler+0x4>

08001e62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e62:	b480      	push	{r7}
 8001e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e66:	e7fe      	b.n	8001e66 <HardFault_Handler+0x4>

08001e68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e6c:	e7fe      	b.n	8001e6c <MemManage_Handler+0x4>

08001e6e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e72:	e7fe      	b.n	8001e72 <BusFault_Handler+0x4>

08001e74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e78:	e7fe      	b.n	8001e78 <UsageFault_Handler+0x4>

08001e7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <TIM7_IRQHandler>:
/******************************************************************************/
/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001e8c:	4802      	ldr	r0, [pc, #8]	; (8001e98 <TIM7_IRQHandler+0x10>)
 8001e8e:	f002 fae3 	bl	8004458 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	20000158 	.word	0x20000158

08001e9c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ea0:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <SystemInit+0x20>)
 8001ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ea6:	4a05      	ldr	r2, [pc, #20]	; (8001ebc <SystemInit+0x20>)
 8001ea8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001eac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001eb0:	bf00      	nop
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	e000ed00 	.word	0xe000ed00

08001ec0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ec0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ef8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ec4:	f7ff ffea 	bl	8001e9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ec8:	480c      	ldr	r0, [pc, #48]	; (8001efc <LoopForever+0x6>)
  ldr r1, =_edata
 8001eca:	490d      	ldr	r1, [pc, #52]	; (8001f00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ecc:	4a0d      	ldr	r2, [pc, #52]	; (8001f04 <LoopForever+0xe>)
  movs r3, #0
 8001ece:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ed0:	e002      	b.n	8001ed8 <LoopCopyDataInit>

08001ed2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ed2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ed4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ed6:	3304      	adds	r3, #4

08001ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ed8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001edc:	d3f9      	bcc.n	8001ed2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ede:	4a0a      	ldr	r2, [pc, #40]	; (8001f08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ee0:	4c0a      	ldr	r4, [pc, #40]	; (8001f0c <LoopForever+0x16>)
  movs r3, #0
 8001ee2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ee4:	e001      	b.n	8001eea <LoopFillZerobss>

08001ee6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ee6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ee8:	3204      	adds	r2, #4

08001eea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eec:	d3fb      	bcc.n	8001ee6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001eee:	f006 fa7d 	bl	80083ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ef2:	f7fe faef 	bl	80004d4 <main>

08001ef6 <LoopForever>:

LoopForever:
    b LoopForever
 8001ef6:	e7fe      	b.n	8001ef6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ef8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001efc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f00:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001f04:	08008788 	.word	0x08008788
  ldr r2, =_sbss
 8001f08:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001f0c:	20008bf8 	.word	0x20008bf8

08001f10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f10:	e7fe      	b.n	8001f10 <ADC1_2_IRQHandler>
	...

08001f14 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f1e:	4b0c      	ldr	r3, [pc, #48]	; (8001f50 <HAL_Init+0x3c>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a0b      	ldr	r2, [pc, #44]	; (8001f50 <HAL_Init+0x3c>)
 8001f24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f28:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f2a:	2003      	movs	r0, #3
 8001f2c:	f000 f903 	bl	8002136 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f30:	200f      	movs	r0, #15
 8001f32:	f7ff ff19 	bl	8001d68 <HAL_InitTick>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d002      	beq.n	8001f42 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	71fb      	strb	r3, [r7, #7]
 8001f40:	e001      	b.n	8001f46 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f42:	f7ff fe4b 	bl	8001bdc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f46:	79fb      	ldrb	r3, [r7, #7]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40022000 	.word	0x40022000

08001f54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f58:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <HAL_IncTick+0x20>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <HAL_IncTick+0x24>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4413      	add	r3, r2
 8001f64:	4a04      	ldr	r2, [pc, #16]	; (8001f78 <HAL_IncTick+0x24>)
 8001f66:	6013      	str	r3, [r2, #0]
}
 8001f68:	bf00      	nop
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	20000008 	.word	0x20000008
 8001f78:	200001a4 	.word	0x200001a4

08001f7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f80:	4b03      	ldr	r3, [pc, #12]	; (8001f90 <HAL_GetTick+0x14>)
 8001f82:	681b      	ldr	r3, [r3, #0]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	200001a4 	.word	0x200001a4

08001f94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f9c:	f7ff ffee 	bl	8001f7c <HAL_GetTick>
 8001fa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fac:	d005      	beq.n	8001fba <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001fae:	4b0a      	ldr	r3, [pc, #40]	; (8001fd8 <HAL_Delay+0x44>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fba:	bf00      	nop
 8001fbc:	f7ff ffde 	bl	8001f7c <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d8f7      	bhi.n	8001fbc <HAL_Delay+0x28>
  {
  }
}
 8001fcc:	bf00      	nop
 8001fce:	bf00      	nop
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	20000008 	.word	0x20000008

08001fdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fec:	4b0c      	ldr	r3, [pc, #48]	; (8002020 <__NVIC_SetPriorityGrouping+0x44>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ff2:	68ba      	ldr	r2, [r7, #8]
 8001ff4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002004:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800200c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800200e:	4a04      	ldr	r2, [pc, #16]	; (8002020 <__NVIC_SetPriorityGrouping+0x44>)
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	60d3      	str	r3, [r2, #12]
}
 8002014:	bf00      	nop
 8002016:	3714      	adds	r7, #20
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	e000ed00 	.word	0xe000ed00

08002024 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002028:	4b04      	ldr	r3, [pc, #16]	; (800203c <__NVIC_GetPriorityGrouping+0x18>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	0a1b      	lsrs	r3, r3, #8
 800202e:	f003 0307 	and.w	r3, r3, #7
}
 8002032:	4618      	mov	r0, r3
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	e000ed00 	.word	0xe000ed00

08002040 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800204a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204e:	2b00      	cmp	r3, #0
 8002050:	db0b      	blt.n	800206a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002052:	79fb      	ldrb	r3, [r7, #7]
 8002054:	f003 021f 	and.w	r2, r3, #31
 8002058:	4907      	ldr	r1, [pc, #28]	; (8002078 <__NVIC_EnableIRQ+0x38>)
 800205a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205e:	095b      	lsrs	r3, r3, #5
 8002060:	2001      	movs	r0, #1
 8002062:	fa00 f202 	lsl.w	r2, r0, r2
 8002066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	e000e100 	.word	0xe000e100

0800207c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	4603      	mov	r3, r0
 8002084:	6039      	str	r1, [r7, #0]
 8002086:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208c:	2b00      	cmp	r3, #0
 800208e:	db0a      	blt.n	80020a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	b2da      	uxtb	r2, r3
 8002094:	490c      	ldr	r1, [pc, #48]	; (80020c8 <__NVIC_SetPriority+0x4c>)
 8002096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209a:	0112      	lsls	r2, r2, #4
 800209c:	b2d2      	uxtb	r2, r2
 800209e:	440b      	add	r3, r1
 80020a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020a4:	e00a      	b.n	80020bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	4908      	ldr	r1, [pc, #32]	; (80020cc <__NVIC_SetPriority+0x50>)
 80020ac:	79fb      	ldrb	r3, [r7, #7]
 80020ae:	f003 030f 	and.w	r3, r3, #15
 80020b2:	3b04      	subs	r3, #4
 80020b4:	0112      	lsls	r2, r2, #4
 80020b6:	b2d2      	uxtb	r2, r2
 80020b8:	440b      	add	r3, r1
 80020ba:	761a      	strb	r2, [r3, #24]
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	e000e100 	.word	0xe000e100
 80020cc:	e000ed00 	.word	0xe000ed00

080020d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b089      	sub	sp, #36	; 0x24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	f1c3 0307 	rsb	r3, r3, #7
 80020ea:	2b04      	cmp	r3, #4
 80020ec:	bf28      	it	cs
 80020ee:	2304      	movcs	r3, #4
 80020f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	3304      	adds	r3, #4
 80020f6:	2b06      	cmp	r3, #6
 80020f8:	d902      	bls.n	8002100 <NVIC_EncodePriority+0x30>
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	3b03      	subs	r3, #3
 80020fe:	e000      	b.n	8002102 <NVIC_EncodePriority+0x32>
 8002100:	2300      	movs	r3, #0
 8002102:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002104:	f04f 32ff 	mov.w	r2, #4294967295
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	43da      	mvns	r2, r3
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	401a      	ands	r2, r3
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002118:	f04f 31ff 	mov.w	r1, #4294967295
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	fa01 f303 	lsl.w	r3, r1, r3
 8002122:	43d9      	mvns	r1, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002128:	4313      	orrs	r3, r2
         );
}
 800212a:	4618      	mov	r0, r3
 800212c:	3724      	adds	r7, #36	; 0x24
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr

08002136 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b082      	sub	sp, #8
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f7ff ff4c 	bl	8001fdc <__NVIC_SetPriorityGrouping>
}
 8002144:	bf00      	nop
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0
 8002152:	4603      	mov	r3, r0
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]
 8002158:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800215a:	2300      	movs	r3, #0
 800215c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800215e:	f7ff ff61 	bl	8002024 <__NVIC_GetPriorityGrouping>
 8002162:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	68b9      	ldr	r1, [r7, #8]
 8002168:	6978      	ldr	r0, [r7, #20]
 800216a:	f7ff ffb1 	bl	80020d0 <NVIC_EncodePriority>
 800216e:	4602      	mov	r2, r0
 8002170:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002174:	4611      	mov	r1, r2
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff ff80 	bl	800207c <__NVIC_SetPriority>
}
 800217c:	bf00      	nop
 800217e:	3718      	adds	r7, #24
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	4603      	mov	r3, r0
 800218c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800218e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff ff54 	bl	8002040 <__NVIC_EnableIRQ>
}
 8002198:	bf00      	nop
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b087      	sub	sp, #28
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021aa:	2300      	movs	r3, #0
 80021ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ae:	e17f      	b.n	80024b0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	2101      	movs	r1, #1
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	fa01 f303 	lsl.w	r3, r1, r3
 80021bc:	4013      	ands	r3, r2
 80021be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	f000 8171 	beq.w	80024aa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f003 0303 	and.w	r3, r3, #3
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d005      	beq.n	80021e0 <HAL_GPIO_Init+0x40>
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f003 0303 	and.w	r3, r3, #3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d130      	bne.n	8002242 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	2203      	movs	r2, #3
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	43db      	mvns	r3, r3
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	4013      	ands	r3, r2
 80021f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	68da      	ldr	r2, [r3, #12]
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	4313      	orrs	r3, r2
 8002208:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002216:	2201      	movs	r2, #1
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	fa02 f303 	lsl.w	r3, r2, r3
 800221e:	43db      	mvns	r3, r3
 8002220:	693a      	ldr	r2, [r7, #16]
 8002222:	4013      	ands	r3, r2
 8002224:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	091b      	lsrs	r3, r3, #4
 800222c:	f003 0201 	and.w	r2, r3, #1
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	4313      	orrs	r3, r2
 800223a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f003 0303 	and.w	r3, r3, #3
 800224a:	2b03      	cmp	r3, #3
 800224c:	d118      	bne.n	8002280 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002252:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002254:	2201      	movs	r2, #1
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	43db      	mvns	r3, r3
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	4013      	ands	r3, r2
 8002262:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	08db      	lsrs	r3, r3, #3
 800226a:	f003 0201 	and.w	r2, r3, #1
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	4313      	orrs	r3, r2
 8002278:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f003 0303 	and.w	r3, r3, #3
 8002288:	2b03      	cmp	r3, #3
 800228a:	d017      	beq.n	80022bc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	2203      	movs	r2, #3
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	43db      	mvns	r3, r3
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	4013      	ands	r3, r2
 80022a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f003 0303 	and.w	r3, r3, #3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d123      	bne.n	8002310 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	08da      	lsrs	r2, r3, #3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	3208      	adds	r2, #8
 80022d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	f003 0307 	and.w	r3, r3, #7
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	220f      	movs	r2, #15
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	43db      	mvns	r3, r3
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	4013      	ands	r3, r2
 80022ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	691a      	ldr	r2, [r3, #16]
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	693a      	ldr	r2, [r7, #16]
 80022fe:	4313      	orrs	r3, r2
 8002300:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	08da      	lsrs	r2, r3, #3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	3208      	adds	r2, #8
 800230a:	6939      	ldr	r1, [r7, #16]
 800230c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	2203      	movs	r2, #3
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	43db      	mvns	r3, r3
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	4013      	ands	r3, r2
 8002326:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f003 0203 	and.w	r2, r3, #3
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	4313      	orrs	r3, r2
 800233c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800234c:	2b00      	cmp	r3, #0
 800234e:	f000 80ac 	beq.w	80024aa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002352:	4b5f      	ldr	r3, [pc, #380]	; (80024d0 <HAL_GPIO_Init+0x330>)
 8002354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002356:	4a5e      	ldr	r2, [pc, #376]	; (80024d0 <HAL_GPIO_Init+0x330>)
 8002358:	f043 0301 	orr.w	r3, r3, #1
 800235c:	6613      	str	r3, [r2, #96]	; 0x60
 800235e:	4b5c      	ldr	r3, [pc, #368]	; (80024d0 <HAL_GPIO_Init+0x330>)
 8002360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	60bb      	str	r3, [r7, #8]
 8002368:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800236a:	4a5a      	ldr	r2, [pc, #360]	; (80024d4 <HAL_GPIO_Init+0x334>)
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	089b      	lsrs	r3, r3, #2
 8002370:	3302      	adds	r3, #2
 8002372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002376:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	f003 0303 	and.w	r3, r3, #3
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	220f      	movs	r2, #15
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	43db      	mvns	r3, r3
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	4013      	ands	r3, r2
 800238c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002394:	d025      	beq.n	80023e2 <HAL_GPIO_Init+0x242>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a4f      	ldr	r2, [pc, #316]	; (80024d8 <HAL_GPIO_Init+0x338>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d01f      	beq.n	80023de <HAL_GPIO_Init+0x23e>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a4e      	ldr	r2, [pc, #312]	; (80024dc <HAL_GPIO_Init+0x33c>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d019      	beq.n	80023da <HAL_GPIO_Init+0x23a>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a4d      	ldr	r2, [pc, #308]	; (80024e0 <HAL_GPIO_Init+0x340>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d013      	beq.n	80023d6 <HAL_GPIO_Init+0x236>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a4c      	ldr	r2, [pc, #304]	; (80024e4 <HAL_GPIO_Init+0x344>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d00d      	beq.n	80023d2 <HAL_GPIO_Init+0x232>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a4b      	ldr	r2, [pc, #300]	; (80024e8 <HAL_GPIO_Init+0x348>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d007      	beq.n	80023ce <HAL_GPIO_Init+0x22e>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a4a      	ldr	r2, [pc, #296]	; (80024ec <HAL_GPIO_Init+0x34c>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d101      	bne.n	80023ca <HAL_GPIO_Init+0x22a>
 80023c6:	2306      	movs	r3, #6
 80023c8:	e00c      	b.n	80023e4 <HAL_GPIO_Init+0x244>
 80023ca:	2307      	movs	r3, #7
 80023cc:	e00a      	b.n	80023e4 <HAL_GPIO_Init+0x244>
 80023ce:	2305      	movs	r3, #5
 80023d0:	e008      	b.n	80023e4 <HAL_GPIO_Init+0x244>
 80023d2:	2304      	movs	r3, #4
 80023d4:	e006      	b.n	80023e4 <HAL_GPIO_Init+0x244>
 80023d6:	2303      	movs	r3, #3
 80023d8:	e004      	b.n	80023e4 <HAL_GPIO_Init+0x244>
 80023da:	2302      	movs	r3, #2
 80023dc:	e002      	b.n	80023e4 <HAL_GPIO_Init+0x244>
 80023de:	2301      	movs	r3, #1
 80023e0:	e000      	b.n	80023e4 <HAL_GPIO_Init+0x244>
 80023e2:	2300      	movs	r3, #0
 80023e4:	697a      	ldr	r2, [r7, #20]
 80023e6:	f002 0203 	and.w	r2, r2, #3
 80023ea:	0092      	lsls	r2, r2, #2
 80023ec:	4093      	lsls	r3, r2
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023f4:	4937      	ldr	r1, [pc, #220]	; (80024d4 <HAL_GPIO_Init+0x334>)
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	089b      	lsrs	r3, r3, #2
 80023fa:	3302      	adds	r3, #2
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002402:	4b3b      	ldr	r3, [pc, #236]	; (80024f0 <HAL_GPIO_Init+0x350>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	43db      	mvns	r3, r3
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	4013      	ands	r3, r2
 8002410:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	4313      	orrs	r3, r2
 8002424:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002426:	4a32      	ldr	r2, [pc, #200]	; (80024f0 <HAL_GPIO_Init+0x350>)
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800242c:	4b30      	ldr	r3, [pc, #192]	; (80024f0 <HAL_GPIO_Init+0x350>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	43db      	mvns	r3, r3
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	4013      	ands	r3, r2
 800243a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d003      	beq.n	8002450 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	4313      	orrs	r3, r2
 800244e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002450:	4a27      	ldr	r2, [pc, #156]	; (80024f0 <HAL_GPIO_Init+0x350>)
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002456:	4b26      	ldr	r3, [pc, #152]	; (80024f0 <HAL_GPIO_Init+0x350>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	43db      	mvns	r3, r3
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	4013      	ands	r3, r2
 8002464:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d003      	beq.n	800247a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	4313      	orrs	r3, r2
 8002478:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800247a:	4a1d      	ldr	r2, [pc, #116]	; (80024f0 <HAL_GPIO_Init+0x350>)
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002480:	4b1b      	ldr	r3, [pc, #108]	; (80024f0 <HAL_GPIO_Init+0x350>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	43db      	mvns	r3, r3
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	4013      	ands	r3, r2
 800248e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d003      	beq.n	80024a4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024a4:	4a12      	ldr	r2, [pc, #72]	; (80024f0 <HAL_GPIO_Init+0x350>)
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	3301      	adds	r3, #1
 80024ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	fa22 f303 	lsr.w	r3, r2, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f47f ae78 	bne.w	80021b0 <HAL_GPIO_Init+0x10>
  }
}
 80024c0:	bf00      	nop
 80024c2:	bf00      	nop
 80024c4:	371c      	adds	r7, #28
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	40021000 	.word	0x40021000
 80024d4:	40010000 	.word	0x40010000
 80024d8:	48000400 	.word	0x48000400
 80024dc:	48000800 	.word	0x48000800
 80024e0:	48000c00 	.word	0x48000c00
 80024e4:	48001000 	.word	0x48001000
 80024e8:	48001400 	.word	0x48001400
 80024ec:	48001800 	.word	0x48001800
 80024f0:	40010400 	.word	0x40010400

080024f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	460b      	mov	r3, r1
 80024fe:	807b      	strh	r3, [r7, #2]
 8002500:	4613      	mov	r3, r2
 8002502:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002504:	787b      	ldrb	r3, [r7, #1]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d003      	beq.n	8002512 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800250a:	887a      	ldrh	r2, [r7, #2]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002510:	e002      	b.n	8002518 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002512:	887a      	ldrh	r2, [r7, #2]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002528:	4b04      	ldr	r3, [pc, #16]	; (800253c <HAL_PWREx_GetVoltageRange+0x18>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002530:	4618      	mov	r0, r3
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	40007000 	.word	0x40007000

08002540 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800254e:	d130      	bne.n	80025b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002550:	4b23      	ldr	r3, [pc, #140]	; (80025e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002558:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800255c:	d038      	beq.n	80025d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800255e:	4b20      	ldr	r3, [pc, #128]	; (80025e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002566:	4a1e      	ldr	r2, [pc, #120]	; (80025e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002568:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800256c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800256e:	4b1d      	ldr	r3, [pc, #116]	; (80025e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2232      	movs	r2, #50	; 0x32
 8002574:	fb02 f303 	mul.w	r3, r2, r3
 8002578:	4a1b      	ldr	r2, [pc, #108]	; (80025e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800257a:	fba2 2303 	umull	r2, r3, r2, r3
 800257e:	0c9b      	lsrs	r3, r3, #18
 8002580:	3301      	adds	r3, #1
 8002582:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002584:	e002      	b.n	800258c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	3b01      	subs	r3, #1
 800258a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800258c:	4b14      	ldr	r3, [pc, #80]	; (80025e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800258e:	695b      	ldr	r3, [r3, #20]
 8002590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002594:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002598:	d102      	bne.n	80025a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1f2      	bne.n	8002586 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025a0:	4b0f      	ldr	r3, [pc, #60]	; (80025e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ac:	d110      	bne.n	80025d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e00f      	b.n	80025d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80025b2:	4b0b      	ldr	r3, [pc, #44]	; (80025e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80025ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025be:	d007      	beq.n	80025d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80025c0:	4b07      	ldr	r3, [pc, #28]	; (80025e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025c8:	4a05      	ldr	r2, [pc, #20]	; (80025e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3714      	adds	r7, #20
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	40007000 	.word	0x40007000
 80025e4:	20000000 	.word	0x20000000
 80025e8:	431bde83 	.word	0x431bde83

080025ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b088      	sub	sp, #32
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e3ca      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025fe:	4b97      	ldr	r3, [pc, #604]	; (800285c <HAL_RCC_OscConfig+0x270>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f003 030c 	and.w	r3, r3, #12
 8002606:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002608:	4b94      	ldr	r3, [pc, #592]	; (800285c <HAL_RCC_OscConfig+0x270>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	f003 0303 	and.w	r3, r3, #3
 8002610:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0310 	and.w	r3, r3, #16
 800261a:	2b00      	cmp	r3, #0
 800261c:	f000 80e4 	beq.w	80027e8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d007      	beq.n	8002636 <HAL_RCC_OscConfig+0x4a>
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	2b0c      	cmp	r3, #12
 800262a:	f040 808b 	bne.w	8002744 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	2b01      	cmp	r3, #1
 8002632:	f040 8087 	bne.w	8002744 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002636:	4b89      	ldr	r3, [pc, #548]	; (800285c <HAL_RCC_OscConfig+0x270>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d005      	beq.n	800264e <HAL_RCC_OscConfig+0x62>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e3a2      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a1a      	ldr	r2, [r3, #32]
 8002652:	4b82      	ldr	r3, [pc, #520]	; (800285c <HAL_RCC_OscConfig+0x270>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0308 	and.w	r3, r3, #8
 800265a:	2b00      	cmp	r3, #0
 800265c:	d004      	beq.n	8002668 <HAL_RCC_OscConfig+0x7c>
 800265e:	4b7f      	ldr	r3, [pc, #508]	; (800285c <HAL_RCC_OscConfig+0x270>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002666:	e005      	b.n	8002674 <HAL_RCC_OscConfig+0x88>
 8002668:	4b7c      	ldr	r3, [pc, #496]	; (800285c <HAL_RCC_OscConfig+0x270>)
 800266a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800266e:	091b      	lsrs	r3, r3, #4
 8002670:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002674:	4293      	cmp	r3, r2
 8002676:	d223      	bcs.n	80026c0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	4618      	mov	r0, r3
 800267e:	f000 fd87 	bl	8003190 <RCC_SetFlashLatencyFromMSIRange>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e383      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800268c:	4b73      	ldr	r3, [pc, #460]	; (800285c <HAL_RCC_OscConfig+0x270>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a72      	ldr	r2, [pc, #456]	; (800285c <HAL_RCC_OscConfig+0x270>)
 8002692:	f043 0308 	orr.w	r3, r3, #8
 8002696:	6013      	str	r3, [r2, #0]
 8002698:	4b70      	ldr	r3, [pc, #448]	; (800285c <HAL_RCC_OscConfig+0x270>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a1b      	ldr	r3, [r3, #32]
 80026a4:	496d      	ldr	r1, [pc, #436]	; (800285c <HAL_RCC_OscConfig+0x270>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026aa:	4b6c      	ldr	r3, [pc, #432]	; (800285c <HAL_RCC_OscConfig+0x270>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	021b      	lsls	r3, r3, #8
 80026b8:	4968      	ldr	r1, [pc, #416]	; (800285c <HAL_RCC_OscConfig+0x270>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	604b      	str	r3, [r1, #4]
 80026be:	e025      	b.n	800270c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026c0:	4b66      	ldr	r3, [pc, #408]	; (800285c <HAL_RCC_OscConfig+0x270>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a65      	ldr	r2, [pc, #404]	; (800285c <HAL_RCC_OscConfig+0x270>)
 80026c6:	f043 0308 	orr.w	r3, r3, #8
 80026ca:	6013      	str	r3, [r2, #0]
 80026cc:	4b63      	ldr	r3, [pc, #396]	; (800285c <HAL_RCC_OscConfig+0x270>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	4960      	ldr	r1, [pc, #384]	; (800285c <HAL_RCC_OscConfig+0x270>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026de:	4b5f      	ldr	r3, [pc, #380]	; (800285c <HAL_RCC_OscConfig+0x270>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	69db      	ldr	r3, [r3, #28]
 80026ea:	021b      	lsls	r3, r3, #8
 80026ec:	495b      	ldr	r1, [pc, #364]	; (800285c <HAL_RCC_OscConfig+0x270>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d109      	bne.n	800270c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f000 fd47 	bl	8003190 <RCC_SetFlashLatencyFromMSIRange>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e343      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800270c:	f000 fc4a 	bl	8002fa4 <HAL_RCC_GetSysClockFreq>
 8002710:	4602      	mov	r2, r0
 8002712:	4b52      	ldr	r3, [pc, #328]	; (800285c <HAL_RCC_OscConfig+0x270>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	091b      	lsrs	r3, r3, #4
 8002718:	f003 030f 	and.w	r3, r3, #15
 800271c:	4950      	ldr	r1, [pc, #320]	; (8002860 <HAL_RCC_OscConfig+0x274>)
 800271e:	5ccb      	ldrb	r3, [r1, r3]
 8002720:	f003 031f 	and.w	r3, r3, #31
 8002724:	fa22 f303 	lsr.w	r3, r2, r3
 8002728:	4a4e      	ldr	r2, [pc, #312]	; (8002864 <HAL_RCC_OscConfig+0x278>)
 800272a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800272c:	4b4e      	ldr	r3, [pc, #312]	; (8002868 <HAL_RCC_OscConfig+0x27c>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff fb19 	bl	8001d68 <HAL_InitTick>
 8002736:	4603      	mov	r3, r0
 8002738:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800273a:	7bfb      	ldrb	r3, [r7, #15]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d052      	beq.n	80027e6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002740:	7bfb      	ldrb	r3, [r7, #15]
 8002742:	e327      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d032      	beq.n	80027b2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800274c:	4b43      	ldr	r3, [pc, #268]	; (800285c <HAL_RCC_OscConfig+0x270>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a42      	ldr	r2, [pc, #264]	; (800285c <HAL_RCC_OscConfig+0x270>)
 8002752:	f043 0301 	orr.w	r3, r3, #1
 8002756:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002758:	f7ff fc10 	bl	8001f7c <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002760:	f7ff fc0c 	bl	8001f7c <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e310      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002772:	4b3a      	ldr	r3, [pc, #232]	; (800285c <HAL_RCC_OscConfig+0x270>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d0f0      	beq.n	8002760 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800277e:	4b37      	ldr	r3, [pc, #220]	; (800285c <HAL_RCC_OscConfig+0x270>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a36      	ldr	r2, [pc, #216]	; (800285c <HAL_RCC_OscConfig+0x270>)
 8002784:	f043 0308 	orr.w	r3, r3, #8
 8002788:	6013      	str	r3, [r2, #0]
 800278a:	4b34      	ldr	r3, [pc, #208]	; (800285c <HAL_RCC_OscConfig+0x270>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a1b      	ldr	r3, [r3, #32]
 8002796:	4931      	ldr	r1, [pc, #196]	; (800285c <HAL_RCC_OscConfig+0x270>)
 8002798:	4313      	orrs	r3, r2
 800279a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800279c:	4b2f      	ldr	r3, [pc, #188]	; (800285c <HAL_RCC_OscConfig+0x270>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	69db      	ldr	r3, [r3, #28]
 80027a8:	021b      	lsls	r3, r3, #8
 80027aa:	492c      	ldr	r1, [pc, #176]	; (800285c <HAL_RCC_OscConfig+0x270>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	604b      	str	r3, [r1, #4]
 80027b0:	e01a      	b.n	80027e8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80027b2:	4b2a      	ldr	r3, [pc, #168]	; (800285c <HAL_RCC_OscConfig+0x270>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a29      	ldr	r2, [pc, #164]	; (800285c <HAL_RCC_OscConfig+0x270>)
 80027b8:	f023 0301 	bic.w	r3, r3, #1
 80027bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027be:	f7ff fbdd 	bl	8001f7c <HAL_GetTick>
 80027c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027c6:	f7ff fbd9 	bl	8001f7c <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e2dd      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027d8:	4b20      	ldr	r3, [pc, #128]	; (800285c <HAL_RCC_OscConfig+0x270>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1f0      	bne.n	80027c6 <HAL_RCC_OscConfig+0x1da>
 80027e4:	e000      	b.n	80027e8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027e6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d074      	beq.n	80028de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	2b08      	cmp	r3, #8
 80027f8:	d005      	beq.n	8002806 <HAL_RCC_OscConfig+0x21a>
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	2b0c      	cmp	r3, #12
 80027fe:	d10e      	bne.n	800281e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	2b03      	cmp	r3, #3
 8002804:	d10b      	bne.n	800281e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002806:	4b15      	ldr	r3, [pc, #84]	; (800285c <HAL_RCC_OscConfig+0x270>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d064      	beq.n	80028dc <HAL_RCC_OscConfig+0x2f0>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d160      	bne.n	80028dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e2ba      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002826:	d106      	bne.n	8002836 <HAL_RCC_OscConfig+0x24a>
 8002828:	4b0c      	ldr	r3, [pc, #48]	; (800285c <HAL_RCC_OscConfig+0x270>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a0b      	ldr	r2, [pc, #44]	; (800285c <HAL_RCC_OscConfig+0x270>)
 800282e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002832:	6013      	str	r3, [r2, #0]
 8002834:	e026      	b.n	8002884 <HAL_RCC_OscConfig+0x298>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800283e:	d115      	bne.n	800286c <HAL_RCC_OscConfig+0x280>
 8002840:	4b06      	ldr	r3, [pc, #24]	; (800285c <HAL_RCC_OscConfig+0x270>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a05      	ldr	r2, [pc, #20]	; (800285c <HAL_RCC_OscConfig+0x270>)
 8002846:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800284a:	6013      	str	r3, [r2, #0]
 800284c:	4b03      	ldr	r3, [pc, #12]	; (800285c <HAL_RCC_OscConfig+0x270>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a02      	ldr	r2, [pc, #8]	; (800285c <HAL_RCC_OscConfig+0x270>)
 8002852:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002856:	6013      	str	r3, [r2, #0]
 8002858:	e014      	b.n	8002884 <HAL_RCC_OscConfig+0x298>
 800285a:	bf00      	nop
 800285c:	40021000 	.word	0x40021000
 8002860:	08008730 	.word	0x08008730
 8002864:	20000000 	.word	0x20000000
 8002868:	20000004 	.word	0x20000004
 800286c:	4ba0      	ldr	r3, [pc, #640]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a9f      	ldr	r2, [pc, #636]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 8002872:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002876:	6013      	str	r3, [r2, #0]
 8002878:	4b9d      	ldr	r3, [pc, #628]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a9c      	ldr	r2, [pc, #624]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 800287e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002882:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d013      	beq.n	80028b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288c:	f7ff fb76 	bl	8001f7c <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002894:	f7ff fb72 	bl	8001f7c <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b64      	cmp	r3, #100	; 0x64
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e276      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028a6:	4b92      	ldr	r3, [pc, #584]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d0f0      	beq.n	8002894 <HAL_RCC_OscConfig+0x2a8>
 80028b2:	e014      	b.n	80028de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b4:	f7ff fb62 	bl	8001f7c <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028bc:	f7ff fb5e 	bl	8001f7c <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b64      	cmp	r3, #100	; 0x64
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e262      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028ce:	4b88      	ldr	r3, [pc, #544]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1f0      	bne.n	80028bc <HAL_RCC_OscConfig+0x2d0>
 80028da:	e000      	b.n	80028de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d060      	beq.n	80029ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	2b04      	cmp	r3, #4
 80028ee:	d005      	beq.n	80028fc <HAL_RCC_OscConfig+0x310>
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	2b0c      	cmp	r3, #12
 80028f4:	d119      	bne.n	800292a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d116      	bne.n	800292a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028fc:	4b7c      	ldr	r3, [pc, #496]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002904:	2b00      	cmp	r3, #0
 8002906:	d005      	beq.n	8002914 <HAL_RCC_OscConfig+0x328>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d101      	bne.n	8002914 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e23f      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002914:	4b76      	ldr	r3, [pc, #472]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	061b      	lsls	r3, r3, #24
 8002922:	4973      	ldr	r1, [pc, #460]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 8002924:	4313      	orrs	r3, r2
 8002926:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002928:	e040      	b.n	80029ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d023      	beq.n	800297a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002932:	4b6f      	ldr	r3, [pc, #444]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a6e      	ldr	r2, [pc, #440]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 8002938:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800293c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293e:	f7ff fb1d 	bl	8001f7c <HAL_GetTick>
 8002942:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002944:	e008      	b.n	8002958 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002946:	f7ff fb19 	bl	8001f7c <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d901      	bls.n	8002958 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e21d      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002958:	4b65      	ldr	r3, [pc, #404]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002960:	2b00      	cmp	r3, #0
 8002962:	d0f0      	beq.n	8002946 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002964:	4b62      	ldr	r3, [pc, #392]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	061b      	lsls	r3, r3, #24
 8002972:	495f      	ldr	r1, [pc, #380]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 8002974:	4313      	orrs	r3, r2
 8002976:	604b      	str	r3, [r1, #4]
 8002978:	e018      	b.n	80029ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800297a:	4b5d      	ldr	r3, [pc, #372]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a5c      	ldr	r2, [pc, #368]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 8002980:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002984:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002986:	f7ff faf9 	bl	8001f7c <HAL_GetTick>
 800298a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800298c:	e008      	b.n	80029a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800298e:	f7ff faf5 	bl	8001f7c <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e1f9      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029a0:	4b53      	ldr	r3, [pc, #332]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1f0      	bne.n	800298e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0308 	and.w	r3, r3, #8
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d03c      	beq.n	8002a32 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	695b      	ldr	r3, [r3, #20]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d01c      	beq.n	80029fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029c0:	4b4b      	ldr	r3, [pc, #300]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 80029c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029c6:	4a4a      	ldr	r2, [pc, #296]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 80029c8:	f043 0301 	orr.w	r3, r3, #1
 80029cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d0:	f7ff fad4 	bl	8001f7c <HAL_GetTick>
 80029d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029d8:	f7ff fad0 	bl	8001f7c <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e1d4      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029ea:	4b41      	ldr	r3, [pc, #260]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 80029ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d0ef      	beq.n	80029d8 <HAL_RCC_OscConfig+0x3ec>
 80029f8:	e01b      	b.n	8002a32 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029fa:	4b3d      	ldr	r3, [pc, #244]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 80029fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a00:	4a3b      	ldr	r2, [pc, #236]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 8002a02:	f023 0301 	bic.w	r3, r3, #1
 8002a06:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a0a:	f7ff fab7 	bl	8001f7c <HAL_GetTick>
 8002a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a10:	e008      	b.n	8002a24 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a12:	f7ff fab3 	bl	8001f7c <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e1b7      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a24:	4b32      	ldr	r3, [pc, #200]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 8002a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1ef      	bne.n	8002a12 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0304 	and.w	r3, r3, #4
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f000 80a6 	beq.w	8002b8c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a40:	2300      	movs	r3, #0
 8002a42:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a44:	4b2a      	ldr	r3, [pc, #168]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 8002a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d10d      	bne.n	8002a6c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a50:	4b27      	ldr	r3, [pc, #156]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 8002a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a54:	4a26      	ldr	r2, [pc, #152]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 8002a56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a5a:	6593      	str	r3, [r2, #88]	; 0x58
 8002a5c:	4b24      	ldr	r3, [pc, #144]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 8002a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a64:	60bb      	str	r3, [r7, #8]
 8002a66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a6c:	4b21      	ldr	r3, [pc, #132]	; (8002af4 <HAL_RCC_OscConfig+0x508>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d118      	bne.n	8002aaa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a78:	4b1e      	ldr	r3, [pc, #120]	; (8002af4 <HAL_RCC_OscConfig+0x508>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a1d      	ldr	r2, [pc, #116]	; (8002af4 <HAL_RCC_OscConfig+0x508>)
 8002a7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a82:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a84:	f7ff fa7a 	bl	8001f7c <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a8c:	f7ff fa76 	bl	8001f7c <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e17a      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a9e:	4b15      	ldr	r3, [pc, #84]	; (8002af4 <HAL_RCC_OscConfig+0x508>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d0f0      	beq.n	8002a8c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d108      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x4d8>
 8002ab2:	4b0f      	ldr	r3, [pc, #60]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 8002ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab8:	4a0d      	ldr	r2, [pc, #52]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 8002aba:	f043 0301 	orr.w	r3, r3, #1
 8002abe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ac2:	e029      	b.n	8002b18 <HAL_RCC_OscConfig+0x52c>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	2b05      	cmp	r3, #5
 8002aca:	d115      	bne.n	8002af8 <HAL_RCC_OscConfig+0x50c>
 8002acc:	4b08      	ldr	r3, [pc, #32]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 8002ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad2:	4a07      	ldr	r2, [pc, #28]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 8002ad4:	f043 0304 	orr.w	r3, r3, #4
 8002ad8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002adc:	4b04      	ldr	r3, [pc, #16]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 8002ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae2:	4a03      	ldr	r2, [pc, #12]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 8002ae4:	f043 0301 	orr.w	r3, r3, #1
 8002ae8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002aec:	e014      	b.n	8002b18 <HAL_RCC_OscConfig+0x52c>
 8002aee:	bf00      	nop
 8002af0:	40021000 	.word	0x40021000
 8002af4:	40007000 	.word	0x40007000
 8002af8:	4b9c      	ldr	r3, [pc, #624]	; (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002afe:	4a9b      	ldr	r2, [pc, #620]	; (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002b00:	f023 0301 	bic.w	r3, r3, #1
 8002b04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b08:	4b98      	ldr	r3, [pc, #608]	; (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b0e:	4a97      	ldr	r2, [pc, #604]	; (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002b10:	f023 0304 	bic.w	r3, r3, #4
 8002b14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d016      	beq.n	8002b4e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b20:	f7ff fa2c 	bl	8001f7c <HAL_GetTick>
 8002b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b26:	e00a      	b.n	8002b3e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b28:	f7ff fa28 	bl	8001f7c <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e12a      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b3e:	4b8b      	ldr	r3, [pc, #556]	; (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d0ed      	beq.n	8002b28 <HAL_RCC_OscConfig+0x53c>
 8002b4c:	e015      	b.n	8002b7a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b4e:	f7ff fa15 	bl	8001f7c <HAL_GetTick>
 8002b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b54:	e00a      	b.n	8002b6c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b56:	f7ff fa11 	bl	8001f7c <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d901      	bls.n	8002b6c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e113      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b6c:	4b7f      	ldr	r3, [pc, #508]	; (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1ed      	bne.n	8002b56 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b7a:	7ffb      	ldrb	r3, [r7, #31]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d105      	bne.n	8002b8c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b80:	4b7a      	ldr	r3, [pc, #488]	; (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b84:	4a79      	ldr	r2, [pc, #484]	; (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002b86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b8a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f000 80fe 	beq.w	8002d92 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	f040 80d0 	bne.w	8002d40 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002ba0:	4b72      	ldr	r3, [pc, #456]	; (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	f003 0203 	and.w	r2, r3, #3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d130      	bne.n	8002c16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d127      	bne.n	8002c16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bd0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d11f      	bne.n	8002c16 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002be0:	2a07      	cmp	r2, #7
 8002be2:	bf14      	ite	ne
 8002be4:	2201      	movne	r2, #1
 8002be6:	2200      	moveq	r2, #0
 8002be8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d113      	bne.n	8002c16 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf8:	085b      	lsrs	r3, r3, #1
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d109      	bne.n	8002c16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0c:	085b      	lsrs	r3, r3, #1
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d06e      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	2b0c      	cmp	r3, #12
 8002c1a:	d069      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002c1c:	4b53      	ldr	r3, [pc, #332]	; (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d105      	bne.n	8002c34 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002c28:	4b50      	ldr	r3, [pc, #320]	; (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e0ad      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c38:	4b4c      	ldr	r3, [pc, #304]	; (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a4b      	ldr	r2, [pc, #300]	; (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002c3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c42:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c44:	f7ff f99a 	bl	8001f7c <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c4c:	f7ff f996 	bl	8001f7c <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e09a      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c5e:	4b43      	ldr	r3, [pc, #268]	; (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1f0      	bne.n	8002c4c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c6a:	4b40      	ldr	r3, [pc, #256]	; (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002c6c:	68da      	ldr	r2, [r3, #12]
 8002c6e:	4b40      	ldr	r3, [pc, #256]	; (8002d70 <HAL_RCC_OscConfig+0x784>)
 8002c70:	4013      	ands	r3, r2
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002c7a:	3a01      	subs	r2, #1
 8002c7c:	0112      	lsls	r2, r2, #4
 8002c7e:	4311      	orrs	r1, r2
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c84:	0212      	lsls	r2, r2, #8
 8002c86:	4311      	orrs	r1, r2
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c8c:	0852      	lsrs	r2, r2, #1
 8002c8e:	3a01      	subs	r2, #1
 8002c90:	0552      	lsls	r2, r2, #21
 8002c92:	4311      	orrs	r1, r2
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c98:	0852      	lsrs	r2, r2, #1
 8002c9a:	3a01      	subs	r2, #1
 8002c9c:	0652      	lsls	r2, r2, #25
 8002c9e:	4311      	orrs	r1, r2
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ca4:	0912      	lsrs	r2, r2, #4
 8002ca6:	0452      	lsls	r2, r2, #17
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	4930      	ldr	r1, [pc, #192]	; (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002cb0:	4b2e      	ldr	r3, [pc, #184]	; (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a2d      	ldr	r2, [pc, #180]	; (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002cb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cbc:	4b2b      	ldr	r3, [pc, #172]	; (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	4a2a      	ldr	r2, [pc, #168]	; (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002cc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cc6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002cc8:	f7ff f958 	bl	8001f7c <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd0:	f7ff f954 	bl	8001f7c <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e058      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ce2:	4b22      	ldr	r3, [pc, #136]	; (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d0f0      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cee:	e050      	b.n	8002d92 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e04f      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cf4:	4b1d      	ldr	r3, [pc, #116]	; (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d148      	bne.n	8002d92 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002d00:	4b1a      	ldr	r3, [pc, #104]	; (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a19      	ldr	r2, [pc, #100]	; (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002d06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d0a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d0c:	4b17      	ldr	r3, [pc, #92]	; (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	4a16      	ldr	r2, [pc, #88]	; (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002d12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d16:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d18:	f7ff f930 	bl	8001f7c <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d20:	f7ff f92c 	bl	8001f7c <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e030      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d32:	4b0e      	ldr	r3, [pc, #56]	; (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d0f0      	beq.n	8002d20 <HAL_RCC_OscConfig+0x734>
 8002d3e:	e028      	b.n	8002d92 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	2b0c      	cmp	r3, #12
 8002d44:	d023      	beq.n	8002d8e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d46:	4b09      	ldr	r3, [pc, #36]	; (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a08      	ldr	r2, [pc, #32]	; (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002d4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d52:	f7ff f913 	bl	8001f7c <HAL_GetTick>
 8002d56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d58:	e00c      	b.n	8002d74 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d5a:	f7ff f90f 	bl	8001f7c <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d905      	bls.n	8002d74 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e013      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
 8002d6c:	40021000 	.word	0x40021000
 8002d70:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d74:	4b09      	ldr	r3, [pc, #36]	; (8002d9c <HAL_RCC_OscConfig+0x7b0>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1ec      	bne.n	8002d5a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002d80:	4b06      	ldr	r3, [pc, #24]	; (8002d9c <HAL_RCC_OscConfig+0x7b0>)
 8002d82:	68da      	ldr	r2, [r3, #12]
 8002d84:	4905      	ldr	r1, [pc, #20]	; (8002d9c <HAL_RCC_OscConfig+0x7b0>)
 8002d86:	4b06      	ldr	r3, [pc, #24]	; (8002da0 <HAL_RCC_OscConfig+0x7b4>)
 8002d88:	4013      	ands	r3, r2
 8002d8a:	60cb      	str	r3, [r1, #12]
 8002d8c:	e001      	b.n	8002d92 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e000      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3720      	adds	r7, #32
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	feeefffc 	.word	0xfeeefffc

08002da4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d101      	bne.n	8002db8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e0e7      	b.n	8002f88 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002db8:	4b75      	ldr	r3, [pc, #468]	; (8002f90 <HAL_RCC_ClockConfig+0x1ec>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0307 	and.w	r3, r3, #7
 8002dc0:	683a      	ldr	r2, [r7, #0]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d910      	bls.n	8002de8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dc6:	4b72      	ldr	r3, [pc, #456]	; (8002f90 <HAL_RCC_ClockConfig+0x1ec>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f023 0207 	bic.w	r2, r3, #7
 8002dce:	4970      	ldr	r1, [pc, #448]	; (8002f90 <HAL_RCC_ClockConfig+0x1ec>)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dd6:	4b6e      	ldr	r3, [pc, #440]	; (8002f90 <HAL_RCC_ClockConfig+0x1ec>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0307 	and.w	r3, r3, #7
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d001      	beq.n	8002de8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e0cf      	b.n	8002f88 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d010      	beq.n	8002e16 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689a      	ldr	r2, [r3, #8]
 8002df8:	4b66      	ldr	r3, [pc, #408]	; (8002f94 <HAL_RCC_ClockConfig+0x1f0>)
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d908      	bls.n	8002e16 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e04:	4b63      	ldr	r3, [pc, #396]	; (8002f94 <HAL_RCC_ClockConfig+0x1f0>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	4960      	ldr	r1, [pc, #384]	; (8002f94 <HAL_RCC_ClockConfig+0x1f0>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d04c      	beq.n	8002ebc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	2b03      	cmp	r3, #3
 8002e28:	d107      	bne.n	8002e3a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e2a:	4b5a      	ldr	r3, [pc, #360]	; (8002f94 <HAL_RCC_ClockConfig+0x1f0>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d121      	bne.n	8002e7a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e0a6      	b.n	8002f88 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d107      	bne.n	8002e52 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e42:	4b54      	ldr	r3, [pc, #336]	; (8002f94 <HAL_RCC_ClockConfig+0x1f0>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d115      	bne.n	8002e7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e09a      	b.n	8002f88 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d107      	bne.n	8002e6a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e5a:	4b4e      	ldr	r3, [pc, #312]	; (8002f94 <HAL_RCC_ClockConfig+0x1f0>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d109      	bne.n	8002e7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e08e      	b.n	8002f88 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e6a:	4b4a      	ldr	r3, [pc, #296]	; (8002f94 <HAL_RCC_ClockConfig+0x1f0>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e086      	b.n	8002f88 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e7a:	4b46      	ldr	r3, [pc, #280]	; (8002f94 <HAL_RCC_ClockConfig+0x1f0>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f023 0203 	bic.w	r2, r3, #3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	4943      	ldr	r1, [pc, #268]	; (8002f94 <HAL_RCC_ClockConfig+0x1f0>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e8c:	f7ff f876 	bl	8001f7c <HAL_GetTick>
 8002e90:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e92:	e00a      	b.n	8002eaa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e94:	f7ff f872 	bl	8001f7c <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e06e      	b.n	8002f88 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eaa:	4b3a      	ldr	r3, [pc, #232]	; (8002f94 <HAL_RCC_ClockConfig+0x1f0>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f003 020c 	and.w	r2, r3, #12
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d1eb      	bne.n	8002e94 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d010      	beq.n	8002eea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	4b31      	ldr	r3, [pc, #196]	; (8002f94 <HAL_RCC_ClockConfig+0x1f0>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d208      	bcs.n	8002eea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ed8:	4b2e      	ldr	r3, [pc, #184]	; (8002f94 <HAL_RCC_ClockConfig+0x1f0>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	492b      	ldr	r1, [pc, #172]	; (8002f94 <HAL_RCC_ClockConfig+0x1f0>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002eea:	4b29      	ldr	r3, [pc, #164]	; (8002f90 <HAL_RCC_ClockConfig+0x1ec>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0307 	and.w	r3, r3, #7
 8002ef2:	683a      	ldr	r2, [r7, #0]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d210      	bcs.n	8002f1a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ef8:	4b25      	ldr	r3, [pc, #148]	; (8002f90 <HAL_RCC_ClockConfig+0x1ec>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f023 0207 	bic.w	r2, r3, #7
 8002f00:	4923      	ldr	r1, [pc, #140]	; (8002f90 <HAL_RCC_ClockConfig+0x1ec>)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f08:	4b21      	ldr	r3, [pc, #132]	; (8002f90 <HAL_RCC_ClockConfig+0x1ec>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0307 	and.w	r3, r3, #7
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d001      	beq.n	8002f1a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e036      	b.n	8002f88 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0304 	and.w	r3, r3, #4
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d008      	beq.n	8002f38 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f26:	4b1b      	ldr	r3, [pc, #108]	; (8002f94 <HAL_RCC_ClockConfig+0x1f0>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	4918      	ldr	r1, [pc, #96]	; (8002f94 <HAL_RCC_ClockConfig+0x1f0>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0308 	and.w	r3, r3, #8
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d009      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f44:	4b13      	ldr	r3, [pc, #76]	; (8002f94 <HAL_RCC_ClockConfig+0x1f0>)
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	4910      	ldr	r1, [pc, #64]	; (8002f94 <HAL_RCC_ClockConfig+0x1f0>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f58:	f000 f824 	bl	8002fa4 <HAL_RCC_GetSysClockFreq>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	4b0d      	ldr	r3, [pc, #52]	; (8002f94 <HAL_RCC_ClockConfig+0x1f0>)
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	091b      	lsrs	r3, r3, #4
 8002f64:	f003 030f 	and.w	r3, r3, #15
 8002f68:	490b      	ldr	r1, [pc, #44]	; (8002f98 <HAL_RCC_ClockConfig+0x1f4>)
 8002f6a:	5ccb      	ldrb	r3, [r1, r3]
 8002f6c:	f003 031f 	and.w	r3, r3, #31
 8002f70:	fa22 f303 	lsr.w	r3, r2, r3
 8002f74:	4a09      	ldr	r2, [pc, #36]	; (8002f9c <HAL_RCC_ClockConfig+0x1f8>)
 8002f76:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f78:	4b09      	ldr	r3, [pc, #36]	; (8002fa0 <HAL_RCC_ClockConfig+0x1fc>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7fe fef3 	bl	8001d68 <HAL_InitTick>
 8002f82:	4603      	mov	r3, r0
 8002f84:	72fb      	strb	r3, [r7, #11]

  return status;
 8002f86:	7afb      	ldrb	r3, [r7, #11]
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	40022000 	.word	0x40022000
 8002f94:	40021000 	.word	0x40021000
 8002f98:	08008730 	.word	0x08008730
 8002f9c:	20000000 	.word	0x20000000
 8002fa0:	20000004 	.word	0x20000004

08002fa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b089      	sub	sp, #36	; 0x24
 8002fa8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002faa:	2300      	movs	r3, #0
 8002fac:	61fb      	str	r3, [r7, #28]
 8002fae:	2300      	movs	r3, #0
 8002fb0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fb2:	4b3e      	ldr	r3, [pc, #248]	; (80030ac <HAL_RCC_GetSysClockFreq+0x108>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f003 030c 	and.w	r3, r3, #12
 8002fba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fbc:	4b3b      	ldr	r3, [pc, #236]	; (80030ac <HAL_RCC_GetSysClockFreq+0x108>)
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	f003 0303 	and.w	r3, r3, #3
 8002fc4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d005      	beq.n	8002fd8 <HAL_RCC_GetSysClockFreq+0x34>
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	2b0c      	cmp	r3, #12
 8002fd0:	d121      	bne.n	8003016 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d11e      	bne.n	8003016 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002fd8:	4b34      	ldr	r3, [pc, #208]	; (80030ac <HAL_RCC_GetSysClockFreq+0x108>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0308 	and.w	r3, r3, #8
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d107      	bne.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002fe4:	4b31      	ldr	r3, [pc, #196]	; (80030ac <HAL_RCC_GetSysClockFreq+0x108>)
 8002fe6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fea:	0a1b      	lsrs	r3, r3, #8
 8002fec:	f003 030f 	and.w	r3, r3, #15
 8002ff0:	61fb      	str	r3, [r7, #28]
 8002ff2:	e005      	b.n	8003000 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ff4:	4b2d      	ldr	r3, [pc, #180]	; (80030ac <HAL_RCC_GetSysClockFreq+0x108>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	091b      	lsrs	r3, r3, #4
 8002ffa:	f003 030f 	and.w	r3, r3, #15
 8002ffe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003000:	4a2b      	ldr	r2, [pc, #172]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003008:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d10d      	bne.n	800302c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003014:	e00a      	b.n	800302c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	2b04      	cmp	r3, #4
 800301a:	d102      	bne.n	8003022 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800301c:	4b25      	ldr	r3, [pc, #148]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800301e:	61bb      	str	r3, [r7, #24]
 8003020:	e004      	b.n	800302c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	2b08      	cmp	r3, #8
 8003026:	d101      	bne.n	800302c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003028:	4b23      	ldr	r3, [pc, #140]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x114>)
 800302a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	2b0c      	cmp	r3, #12
 8003030:	d134      	bne.n	800309c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003032:	4b1e      	ldr	r3, [pc, #120]	; (80030ac <HAL_RCC_GetSysClockFreq+0x108>)
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	f003 0303 	and.w	r3, r3, #3
 800303a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	2b02      	cmp	r3, #2
 8003040:	d003      	beq.n	800304a <HAL_RCC_GetSysClockFreq+0xa6>
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	2b03      	cmp	r3, #3
 8003046:	d003      	beq.n	8003050 <HAL_RCC_GetSysClockFreq+0xac>
 8003048:	e005      	b.n	8003056 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800304a:	4b1a      	ldr	r3, [pc, #104]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800304c:	617b      	str	r3, [r7, #20]
      break;
 800304e:	e005      	b.n	800305c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003050:	4b19      	ldr	r3, [pc, #100]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003052:	617b      	str	r3, [r7, #20]
      break;
 8003054:	e002      	b.n	800305c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	617b      	str	r3, [r7, #20]
      break;
 800305a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800305c:	4b13      	ldr	r3, [pc, #76]	; (80030ac <HAL_RCC_GetSysClockFreq+0x108>)
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	091b      	lsrs	r3, r3, #4
 8003062:	f003 0307 	and.w	r3, r3, #7
 8003066:	3301      	adds	r3, #1
 8003068:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800306a:	4b10      	ldr	r3, [pc, #64]	; (80030ac <HAL_RCC_GetSysClockFreq+0x108>)
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	0a1b      	lsrs	r3, r3, #8
 8003070:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003074:	697a      	ldr	r2, [r7, #20]
 8003076:	fb03 f202 	mul.w	r2, r3, r2
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003080:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003082:	4b0a      	ldr	r3, [pc, #40]	; (80030ac <HAL_RCC_GetSysClockFreq+0x108>)
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	0e5b      	lsrs	r3, r3, #25
 8003088:	f003 0303 	and.w	r3, r3, #3
 800308c:	3301      	adds	r3, #1
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	fbb2 f3f3 	udiv	r3, r2, r3
 800309a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800309c:	69bb      	ldr	r3, [r7, #24]
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3724      	adds	r7, #36	; 0x24
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	40021000 	.word	0x40021000
 80030b0:	08008748 	.word	0x08008748
 80030b4:	00f42400 	.word	0x00f42400
 80030b8:	007a1200 	.word	0x007a1200

080030bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030c0:	4b03      	ldr	r3, [pc, #12]	; (80030d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80030c2:	681b      	ldr	r3, [r3, #0]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	20000000 	.word	0x20000000

080030d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80030d8:	f7ff fff0 	bl	80030bc <HAL_RCC_GetHCLKFreq>
 80030dc:	4602      	mov	r2, r0
 80030de:	4b06      	ldr	r3, [pc, #24]	; (80030f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	0a1b      	lsrs	r3, r3, #8
 80030e4:	f003 0307 	and.w	r3, r3, #7
 80030e8:	4904      	ldr	r1, [pc, #16]	; (80030fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80030ea:	5ccb      	ldrb	r3, [r1, r3]
 80030ec:	f003 031f 	and.w	r3, r3, #31
 80030f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	40021000 	.word	0x40021000
 80030fc:	08008740 	.word	0x08008740

08003100 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003104:	f7ff ffda 	bl	80030bc <HAL_RCC_GetHCLKFreq>
 8003108:	4602      	mov	r2, r0
 800310a:	4b06      	ldr	r3, [pc, #24]	; (8003124 <HAL_RCC_GetPCLK2Freq+0x24>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	0adb      	lsrs	r3, r3, #11
 8003110:	f003 0307 	and.w	r3, r3, #7
 8003114:	4904      	ldr	r1, [pc, #16]	; (8003128 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003116:	5ccb      	ldrb	r3, [r1, r3]
 8003118:	f003 031f 	and.w	r3, r3, #31
 800311c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003120:	4618      	mov	r0, r3
 8003122:	bd80      	pop	{r7, pc}
 8003124:	40021000 	.word	0x40021000
 8003128:	08008740 	.word	0x08008740

0800312c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	220f      	movs	r2, #15
 800313a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800313c:	4b12      	ldr	r3, [pc, #72]	; (8003188 <HAL_RCC_GetClockConfig+0x5c>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f003 0203 	and.w	r2, r3, #3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003148:	4b0f      	ldr	r3, [pc, #60]	; (8003188 <HAL_RCC_GetClockConfig+0x5c>)
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003154:	4b0c      	ldr	r3, [pc, #48]	; (8003188 <HAL_RCC_GetClockConfig+0x5c>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003160:	4b09      	ldr	r3, [pc, #36]	; (8003188 <HAL_RCC_GetClockConfig+0x5c>)
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	08db      	lsrs	r3, r3, #3
 8003166:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800316e:	4b07      	ldr	r3, [pc, #28]	; (800318c <HAL_RCC_GetClockConfig+0x60>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0207 	and.w	r2, r3, #7
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	601a      	str	r2, [r3, #0]
}
 800317a:	bf00      	nop
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	40021000 	.word	0x40021000
 800318c:	40022000 	.word	0x40022000

08003190 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003198:	2300      	movs	r3, #0
 800319a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800319c:	4b2a      	ldr	r3, [pc, #168]	; (8003248 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800319e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d003      	beq.n	80031b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80031a8:	f7ff f9bc 	bl	8002524 <HAL_PWREx_GetVoltageRange>
 80031ac:	6178      	str	r0, [r7, #20]
 80031ae:	e014      	b.n	80031da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80031b0:	4b25      	ldr	r3, [pc, #148]	; (8003248 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b4:	4a24      	ldr	r2, [pc, #144]	; (8003248 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ba:	6593      	str	r3, [r2, #88]	; 0x58
 80031bc:	4b22      	ldr	r3, [pc, #136]	; (8003248 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c4:	60fb      	str	r3, [r7, #12]
 80031c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80031c8:	f7ff f9ac 	bl	8002524 <HAL_PWREx_GetVoltageRange>
 80031cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80031ce:	4b1e      	ldr	r3, [pc, #120]	; (8003248 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d2:	4a1d      	ldr	r2, [pc, #116]	; (8003248 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031d8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031e0:	d10b      	bne.n	80031fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2b80      	cmp	r3, #128	; 0x80
 80031e6:	d919      	bls.n	800321c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2ba0      	cmp	r3, #160	; 0xa0
 80031ec:	d902      	bls.n	80031f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031ee:	2302      	movs	r3, #2
 80031f0:	613b      	str	r3, [r7, #16]
 80031f2:	e013      	b.n	800321c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031f4:	2301      	movs	r3, #1
 80031f6:	613b      	str	r3, [r7, #16]
 80031f8:	e010      	b.n	800321c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2b80      	cmp	r3, #128	; 0x80
 80031fe:	d902      	bls.n	8003206 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003200:	2303      	movs	r3, #3
 8003202:	613b      	str	r3, [r7, #16]
 8003204:	e00a      	b.n	800321c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2b80      	cmp	r3, #128	; 0x80
 800320a:	d102      	bne.n	8003212 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800320c:	2302      	movs	r3, #2
 800320e:	613b      	str	r3, [r7, #16]
 8003210:	e004      	b.n	800321c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2b70      	cmp	r3, #112	; 0x70
 8003216:	d101      	bne.n	800321c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003218:	2301      	movs	r3, #1
 800321a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800321c:	4b0b      	ldr	r3, [pc, #44]	; (800324c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f023 0207 	bic.w	r2, r3, #7
 8003224:	4909      	ldr	r1, [pc, #36]	; (800324c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	4313      	orrs	r3, r2
 800322a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800322c:	4b07      	ldr	r3, [pc, #28]	; (800324c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0307 	and.w	r3, r3, #7
 8003234:	693a      	ldr	r2, [r7, #16]
 8003236:	429a      	cmp	r2, r3
 8003238:	d001      	beq.n	800323e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e000      	b.n	8003240 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	3718      	adds	r7, #24
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	40021000 	.word	0x40021000
 800324c:	40022000 	.word	0x40022000

08003250 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b086      	sub	sp, #24
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003258:	2300      	movs	r3, #0
 800325a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800325c:	2300      	movs	r3, #0
 800325e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003268:	2b00      	cmp	r3, #0
 800326a:	d041      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003270:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003274:	d02a      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003276:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800327a:	d824      	bhi.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800327c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003280:	d008      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003282:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003286:	d81e      	bhi.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00a      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800328c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003290:	d010      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003292:	e018      	b.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003294:	4b86      	ldr	r3, [pc, #536]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	4a85      	ldr	r2, [pc, #532]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800329a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800329e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032a0:	e015      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	3304      	adds	r3, #4
 80032a6:	2100      	movs	r1, #0
 80032a8:	4618      	mov	r0, r3
 80032aa:	f000 fabb 	bl	8003824 <RCCEx_PLLSAI1_Config>
 80032ae:	4603      	mov	r3, r0
 80032b0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032b2:	e00c      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	3320      	adds	r3, #32
 80032b8:	2100      	movs	r1, #0
 80032ba:	4618      	mov	r0, r3
 80032bc:	f000 fba6 	bl	8003a0c <RCCEx_PLLSAI2_Config>
 80032c0:	4603      	mov	r3, r0
 80032c2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032c4:	e003      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	74fb      	strb	r3, [r7, #19]
      break;
 80032ca:	e000      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80032cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032ce:	7cfb      	ldrb	r3, [r7, #19]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d10b      	bne.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032d4:	4b76      	ldr	r3, [pc, #472]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032e2:	4973      	ldr	r1, [pc, #460]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80032ea:	e001      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ec:	7cfb      	ldrb	r3, [r7, #19]
 80032ee:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d041      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003300:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003304:	d02a      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003306:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800330a:	d824      	bhi.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800330c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003310:	d008      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003312:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003316:	d81e      	bhi.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00a      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800331c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003320:	d010      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003322:	e018      	b.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003324:	4b62      	ldr	r3, [pc, #392]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	4a61      	ldr	r2, [pc, #388]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800332a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800332e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003330:	e015      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	3304      	adds	r3, #4
 8003336:	2100      	movs	r1, #0
 8003338:	4618      	mov	r0, r3
 800333a:	f000 fa73 	bl	8003824 <RCCEx_PLLSAI1_Config>
 800333e:	4603      	mov	r3, r0
 8003340:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003342:	e00c      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	3320      	adds	r3, #32
 8003348:	2100      	movs	r1, #0
 800334a:	4618      	mov	r0, r3
 800334c:	f000 fb5e 	bl	8003a0c <RCCEx_PLLSAI2_Config>
 8003350:	4603      	mov	r3, r0
 8003352:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003354:	e003      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	74fb      	strb	r3, [r7, #19]
      break;
 800335a:	e000      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800335c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800335e:	7cfb      	ldrb	r3, [r7, #19]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d10b      	bne.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003364:	4b52      	ldr	r3, [pc, #328]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800336a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003372:	494f      	ldr	r1, [pc, #316]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003374:	4313      	orrs	r3, r2
 8003376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800337a:	e001      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800337c:	7cfb      	ldrb	r3, [r7, #19]
 800337e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 80a0 	beq.w	80034ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800338e:	2300      	movs	r3, #0
 8003390:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003392:	4b47      	ldr	r3, [pc, #284]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800339e:	2301      	movs	r3, #1
 80033a0:	e000      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80033a2:	2300      	movs	r3, #0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00d      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033a8:	4b41      	ldr	r3, [pc, #260]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ac:	4a40      	ldr	r2, [pc, #256]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033b2:	6593      	str	r3, [r2, #88]	; 0x58
 80033b4:	4b3e      	ldr	r3, [pc, #248]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033bc:	60bb      	str	r3, [r7, #8]
 80033be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033c0:	2301      	movs	r3, #1
 80033c2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033c4:	4b3b      	ldr	r3, [pc, #236]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a3a      	ldr	r2, [pc, #232]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033d0:	f7fe fdd4 	bl	8001f7c <HAL_GetTick>
 80033d4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033d6:	e009      	b.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033d8:	f7fe fdd0 	bl	8001f7c <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d902      	bls.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	74fb      	strb	r3, [r7, #19]
        break;
 80033ea:	e005      	b.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033ec:	4b31      	ldr	r3, [pc, #196]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d0ef      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80033f8:	7cfb      	ldrb	r3, [r7, #19]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d15c      	bne.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033fe:	4b2c      	ldr	r3, [pc, #176]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003404:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003408:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d01f      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	429a      	cmp	r2, r3
 800341a:	d019      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800341c:	4b24      	ldr	r3, [pc, #144]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800341e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003422:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003426:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003428:	4b21      	ldr	r3, [pc, #132]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800342a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800342e:	4a20      	ldr	r2, [pc, #128]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003434:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003438:	4b1d      	ldr	r3, [pc, #116]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800343a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800343e:	4a1c      	ldr	r2, [pc, #112]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003440:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003444:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003448:	4a19      	ldr	r2, [pc, #100]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	2b00      	cmp	r3, #0
 8003458:	d016      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345a:	f7fe fd8f 	bl	8001f7c <HAL_GetTick>
 800345e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003460:	e00b      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003462:	f7fe fd8b 	bl	8001f7c <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003470:	4293      	cmp	r3, r2
 8003472:	d902      	bls.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	74fb      	strb	r3, [r7, #19]
            break;
 8003478:	e006      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800347a:	4b0d      	ldr	r3, [pc, #52]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800347c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d0ec      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003488:	7cfb      	ldrb	r3, [r7, #19]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10c      	bne.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800348e:	4b08      	ldr	r3, [pc, #32]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003494:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800349e:	4904      	ldr	r1, [pc, #16]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80034a6:	e009      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034a8:	7cfb      	ldrb	r3, [r7, #19]
 80034aa:	74bb      	strb	r3, [r7, #18]
 80034ac:	e006      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80034ae:	bf00      	nop
 80034b0:	40021000 	.word	0x40021000
 80034b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034b8:	7cfb      	ldrb	r3, [r7, #19]
 80034ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034bc:	7c7b      	ldrb	r3, [r7, #17]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d105      	bne.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034c2:	4b9e      	ldr	r3, [pc, #632]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c6:	4a9d      	ldr	r2, [pc, #628]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034cc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00a      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034da:	4b98      	ldr	r3, [pc, #608]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e0:	f023 0203 	bic.w	r2, r3, #3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e8:	4994      	ldr	r1, [pc, #592]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d00a      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034fc:	4b8f      	ldr	r3, [pc, #572]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003502:	f023 020c 	bic.w	r2, r3, #12
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800350a:	498c      	ldr	r1, [pc, #560]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800350c:	4313      	orrs	r3, r2
 800350e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0304 	and.w	r3, r3, #4
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00a      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800351e:	4b87      	ldr	r3, [pc, #540]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003524:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352c:	4983      	ldr	r1, [pc, #524]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800352e:	4313      	orrs	r3, r2
 8003530:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0308 	and.w	r3, r3, #8
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00a      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003540:	4b7e      	ldr	r3, [pc, #504]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003546:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354e:	497b      	ldr	r1, [pc, #492]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003550:	4313      	orrs	r3, r2
 8003552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0310 	and.w	r3, r3, #16
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00a      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003562:	4b76      	ldr	r3, [pc, #472]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003568:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003570:	4972      	ldr	r1, [pc, #456]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003572:	4313      	orrs	r3, r2
 8003574:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0320 	and.w	r3, r3, #32
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00a      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003584:	4b6d      	ldr	r3, [pc, #436]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800358a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003592:	496a      	ldr	r1, [pc, #424]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003594:	4313      	orrs	r3, r2
 8003596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00a      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035a6:	4b65      	ldr	r3, [pc, #404]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b4:	4961      	ldr	r1, [pc, #388]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00a      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80035c8:	4b5c      	ldr	r3, [pc, #368]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035d6:	4959      	ldr	r1, [pc, #356]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00a      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035ea:	4b54      	ldr	r3, [pc, #336]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035f8:	4950      	ldr	r1, [pc, #320]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00a      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800360c:	4b4b      	ldr	r3, [pc, #300]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800360e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003612:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800361a:	4948      	ldr	r1, [pc, #288]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800361c:	4313      	orrs	r3, r2
 800361e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00a      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800362e:	4b43      	ldr	r3, [pc, #268]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003634:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800363c:	493f      	ldr	r1, [pc, #252]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800363e:	4313      	orrs	r3, r2
 8003640:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d028      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003650:	4b3a      	ldr	r3, [pc, #232]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003656:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800365e:	4937      	ldr	r1, [pc, #220]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003660:	4313      	orrs	r3, r2
 8003662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800366a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800366e:	d106      	bne.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003670:	4b32      	ldr	r3, [pc, #200]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	4a31      	ldr	r2, [pc, #196]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003676:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800367a:	60d3      	str	r3, [r2, #12]
 800367c:	e011      	b.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003682:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003686:	d10c      	bne.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	3304      	adds	r3, #4
 800368c:	2101      	movs	r1, #1
 800368e:	4618      	mov	r0, r3
 8003690:	f000 f8c8 	bl	8003824 <RCCEx_PLLSAI1_Config>
 8003694:	4603      	mov	r3, r0
 8003696:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003698:	7cfb      	ldrb	r3, [r7, #19]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800369e:	7cfb      	ldrb	r3, [r7, #19]
 80036a0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d028      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80036ae:	4b23      	ldr	r3, [pc, #140]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036bc:	491f      	ldr	r1, [pc, #124]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036cc:	d106      	bne.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036ce:	4b1b      	ldr	r3, [pc, #108]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	4a1a      	ldr	r2, [pc, #104]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036d8:	60d3      	str	r3, [r2, #12]
 80036da:	e011      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036e4:	d10c      	bne.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	3304      	adds	r3, #4
 80036ea:	2101      	movs	r1, #1
 80036ec:	4618      	mov	r0, r3
 80036ee:	f000 f899 	bl	8003824 <RCCEx_PLLSAI1_Config>
 80036f2:	4603      	mov	r3, r0
 80036f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036f6:	7cfb      	ldrb	r3, [r7, #19]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80036fc:	7cfb      	ldrb	r3, [r7, #19]
 80036fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d02b      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800370c:	4b0b      	ldr	r3, [pc, #44]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800370e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003712:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800371a:	4908      	ldr	r1, [pc, #32]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800371c:	4313      	orrs	r3, r2
 800371e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003726:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800372a:	d109      	bne.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800372c:	4b03      	ldr	r3, [pc, #12]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	4a02      	ldr	r2, [pc, #8]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003732:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003736:	60d3      	str	r3, [r2, #12]
 8003738:	e014      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800373a:	bf00      	nop
 800373c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003744:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003748:	d10c      	bne.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	3304      	adds	r3, #4
 800374e:	2101      	movs	r1, #1
 8003750:	4618      	mov	r0, r3
 8003752:	f000 f867 	bl	8003824 <RCCEx_PLLSAI1_Config>
 8003756:	4603      	mov	r3, r0
 8003758:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800375a:	7cfb      	ldrb	r3, [r7, #19]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003760:	7cfb      	ldrb	r3, [r7, #19]
 8003762:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d02f      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003770:	4b2b      	ldr	r3, [pc, #172]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003776:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800377e:	4928      	ldr	r1, [pc, #160]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003780:	4313      	orrs	r3, r2
 8003782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800378a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800378e:	d10d      	bne.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	3304      	adds	r3, #4
 8003794:	2102      	movs	r1, #2
 8003796:	4618      	mov	r0, r3
 8003798:	f000 f844 	bl	8003824 <RCCEx_PLLSAI1_Config>
 800379c:	4603      	mov	r3, r0
 800379e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037a0:	7cfb      	ldrb	r3, [r7, #19]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d014      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80037a6:	7cfb      	ldrb	r3, [r7, #19]
 80037a8:	74bb      	strb	r3, [r7, #18]
 80037aa:	e011      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037b4:	d10c      	bne.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	3320      	adds	r3, #32
 80037ba:	2102      	movs	r1, #2
 80037bc:	4618      	mov	r0, r3
 80037be:	f000 f925 	bl	8003a0c <RCCEx_PLLSAI2_Config>
 80037c2:	4603      	mov	r3, r0
 80037c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037c6:	7cfb      	ldrb	r3, [r7, #19]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d001      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80037cc:	7cfb      	ldrb	r3, [r7, #19]
 80037ce:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00a      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80037dc:	4b10      	ldr	r3, [pc, #64]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037ea:	490d      	ldr	r1, [pc, #52]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00b      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037fe:	4b08      	ldr	r3, [pc, #32]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003804:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800380e:	4904      	ldr	r1, [pc, #16]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003810:	4313      	orrs	r3, r2
 8003812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003816:	7cbb      	ldrb	r3, [r7, #18]
}
 8003818:	4618      	mov	r0, r3
 800381a:	3718      	adds	r7, #24
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	40021000 	.word	0x40021000

08003824 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800382e:	2300      	movs	r3, #0
 8003830:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003832:	4b75      	ldr	r3, [pc, #468]	; (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	f003 0303 	and.w	r3, r3, #3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d018      	beq.n	8003870 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800383e:	4b72      	ldr	r3, [pc, #456]	; (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	f003 0203 	and.w	r2, r3, #3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	429a      	cmp	r2, r3
 800384c:	d10d      	bne.n	800386a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
       ||
 8003852:	2b00      	cmp	r3, #0
 8003854:	d009      	beq.n	800386a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003856:	4b6c      	ldr	r3, [pc, #432]	; (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	091b      	lsrs	r3, r3, #4
 800385c:	f003 0307 	and.w	r3, r3, #7
 8003860:	1c5a      	adds	r2, r3, #1
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
       ||
 8003866:	429a      	cmp	r2, r3
 8003868:	d047      	beq.n	80038fa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	73fb      	strb	r3, [r7, #15]
 800386e:	e044      	b.n	80038fa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2b03      	cmp	r3, #3
 8003876:	d018      	beq.n	80038aa <RCCEx_PLLSAI1_Config+0x86>
 8003878:	2b03      	cmp	r3, #3
 800387a:	d825      	bhi.n	80038c8 <RCCEx_PLLSAI1_Config+0xa4>
 800387c:	2b01      	cmp	r3, #1
 800387e:	d002      	beq.n	8003886 <RCCEx_PLLSAI1_Config+0x62>
 8003880:	2b02      	cmp	r3, #2
 8003882:	d009      	beq.n	8003898 <RCCEx_PLLSAI1_Config+0x74>
 8003884:	e020      	b.n	80038c8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003886:	4b60      	ldr	r3, [pc, #384]	; (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d11d      	bne.n	80038ce <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003896:	e01a      	b.n	80038ce <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003898:	4b5b      	ldr	r3, [pc, #364]	; (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d116      	bne.n	80038d2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038a8:	e013      	b.n	80038d2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038aa:	4b57      	ldr	r3, [pc, #348]	; (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10f      	bne.n	80038d6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038b6:	4b54      	ldr	r3, [pc, #336]	; (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d109      	bne.n	80038d6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038c6:	e006      	b.n	80038d6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	73fb      	strb	r3, [r7, #15]
      break;
 80038cc:	e004      	b.n	80038d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038ce:	bf00      	nop
 80038d0:	e002      	b.n	80038d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038d2:	bf00      	nop
 80038d4:	e000      	b.n	80038d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80038d8:	7bfb      	ldrb	r3, [r7, #15]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10d      	bne.n	80038fa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80038de:	4b4a      	ldr	r3, [pc, #296]	; (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6819      	ldr	r1, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	3b01      	subs	r3, #1
 80038f0:	011b      	lsls	r3, r3, #4
 80038f2:	430b      	orrs	r3, r1
 80038f4:	4944      	ldr	r1, [pc, #272]	; (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80038fa:	7bfb      	ldrb	r3, [r7, #15]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d17d      	bne.n	80039fc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003900:	4b41      	ldr	r3, [pc, #260]	; (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a40      	ldr	r2, [pc, #256]	; (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003906:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800390a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800390c:	f7fe fb36 	bl	8001f7c <HAL_GetTick>
 8003910:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003912:	e009      	b.n	8003928 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003914:	f7fe fb32 	bl	8001f7c <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d902      	bls.n	8003928 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	73fb      	strb	r3, [r7, #15]
        break;
 8003926:	e005      	b.n	8003934 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003928:	4b37      	ldr	r3, [pc, #220]	; (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d1ef      	bne.n	8003914 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003934:	7bfb      	ldrb	r3, [r7, #15]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d160      	bne.n	80039fc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d111      	bne.n	8003964 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003940:	4b31      	ldr	r3, [pc, #196]	; (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003948:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	6892      	ldr	r2, [r2, #8]
 8003950:	0211      	lsls	r1, r2, #8
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	68d2      	ldr	r2, [r2, #12]
 8003956:	0912      	lsrs	r2, r2, #4
 8003958:	0452      	lsls	r2, r2, #17
 800395a:	430a      	orrs	r2, r1
 800395c:	492a      	ldr	r1, [pc, #168]	; (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 800395e:	4313      	orrs	r3, r2
 8003960:	610b      	str	r3, [r1, #16]
 8003962:	e027      	b.n	80039b4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d112      	bne.n	8003990 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800396a:	4b27      	ldr	r3, [pc, #156]	; (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003972:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	6892      	ldr	r2, [r2, #8]
 800397a:	0211      	lsls	r1, r2, #8
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	6912      	ldr	r2, [r2, #16]
 8003980:	0852      	lsrs	r2, r2, #1
 8003982:	3a01      	subs	r2, #1
 8003984:	0552      	lsls	r2, r2, #21
 8003986:	430a      	orrs	r2, r1
 8003988:	491f      	ldr	r1, [pc, #124]	; (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 800398a:	4313      	orrs	r3, r2
 800398c:	610b      	str	r3, [r1, #16]
 800398e:	e011      	b.n	80039b4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003990:	4b1d      	ldr	r3, [pc, #116]	; (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003998:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	6892      	ldr	r2, [r2, #8]
 80039a0:	0211      	lsls	r1, r2, #8
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	6952      	ldr	r2, [r2, #20]
 80039a6:	0852      	lsrs	r2, r2, #1
 80039a8:	3a01      	subs	r2, #1
 80039aa:	0652      	lsls	r2, r2, #25
 80039ac:	430a      	orrs	r2, r1
 80039ae:	4916      	ldr	r1, [pc, #88]	; (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80039b4:	4b14      	ldr	r3, [pc, #80]	; (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a13      	ldr	r2, [pc, #76]	; (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80039be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039c0:	f7fe fadc 	bl	8001f7c <HAL_GetTick>
 80039c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039c6:	e009      	b.n	80039dc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039c8:	f7fe fad8 	bl	8001f7c <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d902      	bls.n	80039dc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	73fb      	strb	r3, [r7, #15]
          break;
 80039da:	e005      	b.n	80039e8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039dc:	4b0a      	ldr	r3, [pc, #40]	; (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d0ef      	beq.n	80039c8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80039e8:	7bfb      	ldrb	r3, [r7, #15]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d106      	bne.n	80039fc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80039ee:	4b06      	ldr	r3, [pc, #24]	; (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039f0:	691a      	ldr	r2, [r3, #16]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	4904      	ldr	r1, [pc, #16]	; (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80039fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	40021000 	.word	0x40021000

08003a0c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a16:	2300      	movs	r3, #0
 8003a18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a1a:	4b6a      	ldr	r3, [pc, #424]	; (8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	f003 0303 	and.w	r3, r3, #3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d018      	beq.n	8003a58 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003a26:	4b67      	ldr	r3, [pc, #412]	; (8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	f003 0203 	and.w	r2, r3, #3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d10d      	bne.n	8003a52 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
       ||
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d009      	beq.n	8003a52 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003a3e:	4b61      	ldr	r3, [pc, #388]	; (8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	091b      	lsrs	r3, r3, #4
 8003a44:	f003 0307 	and.w	r3, r3, #7
 8003a48:	1c5a      	adds	r2, r3, #1
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
       ||
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d047      	beq.n	8003ae2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	73fb      	strb	r3, [r7, #15]
 8003a56:	e044      	b.n	8003ae2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2b03      	cmp	r3, #3
 8003a5e:	d018      	beq.n	8003a92 <RCCEx_PLLSAI2_Config+0x86>
 8003a60:	2b03      	cmp	r3, #3
 8003a62:	d825      	bhi.n	8003ab0 <RCCEx_PLLSAI2_Config+0xa4>
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d002      	beq.n	8003a6e <RCCEx_PLLSAI2_Config+0x62>
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d009      	beq.n	8003a80 <RCCEx_PLLSAI2_Config+0x74>
 8003a6c:	e020      	b.n	8003ab0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a6e:	4b55      	ldr	r3, [pc, #340]	; (8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d11d      	bne.n	8003ab6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a7e:	e01a      	b.n	8003ab6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a80:	4b50      	ldr	r3, [pc, #320]	; (8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d116      	bne.n	8003aba <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a90:	e013      	b.n	8003aba <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a92:	4b4c      	ldr	r3, [pc, #304]	; (8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10f      	bne.n	8003abe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a9e:	4b49      	ldr	r3, [pc, #292]	; (8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d109      	bne.n	8003abe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003aae:	e006      	b.n	8003abe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ab4:	e004      	b.n	8003ac0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ab6:	bf00      	nop
 8003ab8:	e002      	b.n	8003ac0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003aba:	bf00      	nop
 8003abc:	e000      	b.n	8003ac0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003abe:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ac0:	7bfb      	ldrb	r3, [r7, #15]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d10d      	bne.n	8003ae2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ac6:	4b3f      	ldr	r3, [pc, #252]	; (8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6819      	ldr	r1, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	011b      	lsls	r3, r3, #4
 8003ada:	430b      	orrs	r3, r1
 8003adc:	4939      	ldr	r1, [pc, #228]	; (8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003ae2:	7bfb      	ldrb	r3, [r7, #15]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d167      	bne.n	8003bb8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003ae8:	4b36      	ldr	r3, [pc, #216]	; (8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a35      	ldr	r2, [pc, #212]	; (8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003af2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003af4:	f7fe fa42 	bl	8001f7c <HAL_GetTick>
 8003af8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003afa:	e009      	b.n	8003b10 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003afc:	f7fe fa3e 	bl	8001f7c <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d902      	bls.n	8003b10 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	73fb      	strb	r3, [r7, #15]
        break;
 8003b0e:	e005      	b.n	8003b1c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b10:	4b2c      	ldr	r3, [pc, #176]	; (8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1ef      	bne.n	8003afc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b1c:	7bfb      	ldrb	r3, [r7, #15]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d14a      	bne.n	8003bb8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d111      	bne.n	8003b4c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b28:	4b26      	ldr	r3, [pc, #152]	; (8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b2a:	695b      	ldr	r3, [r3, #20]
 8003b2c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003b30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	6892      	ldr	r2, [r2, #8]
 8003b38:	0211      	lsls	r1, r2, #8
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	68d2      	ldr	r2, [r2, #12]
 8003b3e:	0912      	lsrs	r2, r2, #4
 8003b40:	0452      	lsls	r2, r2, #17
 8003b42:	430a      	orrs	r2, r1
 8003b44:	491f      	ldr	r1, [pc, #124]	; (8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	614b      	str	r3, [r1, #20]
 8003b4a:	e011      	b.n	8003b70 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b4c:	4b1d      	ldr	r3, [pc, #116]	; (8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b4e:	695b      	ldr	r3, [r3, #20]
 8003b50:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003b54:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	6892      	ldr	r2, [r2, #8]
 8003b5c:	0211      	lsls	r1, r2, #8
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	6912      	ldr	r2, [r2, #16]
 8003b62:	0852      	lsrs	r2, r2, #1
 8003b64:	3a01      	subs	r2, #1
 8003b66:	0652      	lsls	r2, r2, #25
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	4916      	ldr	r1, [pc, #88]	; (8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003b70:	4b14      	ldr	r3, [pc, #80]	; (8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a13      	ldr	r2, [pc, #76]	; (8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b7a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b7c:	f7fe f9fe 	bl	8001f7c <HAL_GetTick>
 8003b80:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b82:	e009      	b.n	8003b98 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b84:	f7fe f9fa 	bl	8001f7c <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d902      	bls.n	8003b98 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	73fb      	strb	r3, [r7, #15]
          break;
 8003b96:	e005      	b.n	8003ba4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b98:	4b0a      	ldr	r3, [pc, #40]	; (8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d0ef      	beq.n	8003b84 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003ba4:	7bfb      	ldrb	r3, [r7, #15]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d106      	bne.n	8003bb8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003baa:	4b06      	ldr	r3, [pc, #24]	; (8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bac:	695a      	ldr	r2, [r3, #20]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	4904      	ldr	r1, [pc, #16]	; (8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	40021000 	.word	0x40021000

08003bc8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d101      	bne.n	8003bda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e095      	b.n	8003d06 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d108      	bne.n	8003bf4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bea:	d009      	beq.n	8003c00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	61da      	str	r2, [r3, #28]
 8003bf2:	e005      	b.n	8003c00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d106      	bne.n	8003c20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f7fe f806 	bl	8001c2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2202      	movs	r2, #2
 8003c24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c36:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c40:	d902      	bls.n	8003c48 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003c42:	2300      	movs	r3, #0
 8003c44:	60fb      	str	r3, [r7, #12]
 8003c46:	e002      	b.n	8003c4e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c4c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003c56:	d007      	beq.n	8003c68 <HAL_SPI_Init+0xa0>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c60:	d002      	beq.n	8003c68 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c78:	431a      	orrs	r2, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	f003 0302 	and.w	r3, r3, #2
 8003c82:	431a      	orrs	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	695b      	ldr	r3, [r3, #20]
 8003c88:	f003 0301 	and.w	r3, r3, #1
 8003c8c:	431a      	orrs	r2, r3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c96:	431a      	orrs	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	69db      	ldr	r3, [r3, #28]
 8003c9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ca0:	431a      	orrs	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003caa:	ea42 0103 	orr.w	r1, r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	0c1b      	lsrs	r3, r3, #16
 8003cc4:	f003 0204 	and.w	r2, r3, #4
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ccc:	f003 0310 	and.w	r3, r3, #16
 8003cd0:	431a      	orrs	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd6:	f003 0308 	and.w	r3, r3, #8
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003ce4:	ea42 0103 	orr.w	r1, r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b088      	sub	sp, #32
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	60f8      	str	r0, [r7, #12]
 8003d16:	60b9      	str	r1, [r7, #8]
 8003d18:	603b      	str	r3, [r7, #0]
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d101      	bne.n	8003d30 <HAL_SPI_Transmit+0x22>
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	e158      	b.n	8003fe2 <HAL_SPI_Transmit+0x2d4>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d38:	f7fe f920 	bl	8001f7c <HAL_GetTick>
 8003d3c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003d3e:	88fb      	ldrh	r3, [r7, #6]
 8003d40:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d002      	beq.n	8003d54 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003d4e:	2302      	movs	r3, #2
 8003d50:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d52:	e13d      	b.n	8003fd0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d002      	beq.n	8003d60 <HAL_SPI_Transmit+0x52>
 8003d5a:	88fb      	ldrh	r3, [r7, #6]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d102      	bne.n	8003d66 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d64:	e134      	b.n	8003fd0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2203      	movs	r2, #3
 8003d6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	68ba      	ldr	r2, [r7, #8]
 8003d78:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	88fa      	ldrh	r2, [r7, #6]
 8003d7e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	88fa      	ldrh	r2, [r7, #6]
 8003d84:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2200      	movs	r2, #0
 8003da6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003db0:	d10f      	bne.n	8003dd2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dc0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003dd0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ddc:	2b40      	cmp	r3, #64	; 0x40
 8003dde:	d007      	beq.n	8003df0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003df8:	d94b      	bls.n	8003e92 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d002      	beq.n	8003e08 <HAL_SPI_Transmit+0xfa>
 8003e02:	8afb      	ldrh	r3, [r7, #22]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d13e      	bne.n	8003e86 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0c:	881a      	ldrh	r2, [r3, #0]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e18:	1c9a      	adds	r2, r3, #2
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	3b01      	subs	r3, #1
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003e2c:	e02b      	b.n	8003e86 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f003 0302 	and.w	r3, r3, #2
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d112      	bne.n	8003e62 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e40:	881a      	ldrh	r2, [r3, #0]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e4c:	1c9a      	adds	r2, r3, #2
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	b29a      	uxth	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e60:	e011      	b.n	8003e86 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e62:	f7fe f88b 	bl	8001f7c <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	683a      	ldr	r2, [r7, #0]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d803      	bhi.n	8003e7a <HAL_SPI_Transmit+0x16c>
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e78:	d102      	bne.n	8003e80 <HAL_SPI_Transmit+0x172>
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d102      	bne.n	8003e86 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003e84:	e0a4      	b.n	8003fd0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d1ce      	bne.n	8003e2e <HAL_SPI_Transmit+0x120>
 8003e90:	e07c      	b.n	8003f8c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d002      	beq.n	8003ea0 <HAL_SPI_Transmit+0x192>
 8003e9a:	8afb      	ldrh	r3, [r7, #22]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d170      	bne.n	8003f82 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d912      	bls.n	8003ed0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eae:	881a      	ldrh	r2, [r3, #0]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eba:	1c9a      	adds	r2, r3, #2
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	3b02      	subs	r3, #2
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ece:	e058      	b.n	8003f82 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	330c      	adds	r3, #12
 8003eda:	7812      	ldrb	r2, [r2, #0]
 8003edc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee2:	1c5a      	adds	r2, r3, #1
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	b29a      	uxth	r2, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003ef6:	e044      	b.n	8003f82 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d12b      	bne.n	8003f5e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d912      	bls.n	8003f36 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f14:	881a      	ldrh	r2, [r3, #0]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f20:	1c9a      	adds	r2, r3, #2
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	3b02      	subs	r3, #2
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f34:	e025      	b.n	8003f82 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	330c      	adds	r3, #12
 8003f40:	7812      	ldrb	r2, [r2, #0]
 8003f42:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f48:	1c5a      	adds	r2, r3, #1
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	3b01      	subs	r3, #1
 8003f56:	b29a      	uxth	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f5c:	e011      	b.n	8003f82 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f5e:	f7fe f80d 	bl	8001f7c <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	683a      	ldr	r2, [r7, #0]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d803      	bhi.n	8003f76 <HAL_SPI_Transmit+0x268>
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f74:	d102      	bne.n	8003f7c <HAL_SPI_Transmit+0x26e>
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d102      	bne.n	8003f82 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003f80:	e026      	b.n	8003fd0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1b5      	bne.n	8003ef8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	6839      	ldr	r1, [r7, #0]
 8003f90:	68f8      	ldr	r0, [r7, #12]
 8003f92:	f000 f949 	bl	8004228 <SPI_EndRxTxTransaction>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d002      	beq.n	8003fa2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d10a      	bne.n	8003fc0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003faa:	2300      	movs	r3, #0
 8003fac:	613b      	str	r3, [r7, #16]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	613b      	str	r3, [r7, #16]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	613b      	str	r3, [r7, #16]
 8003fbe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d002      	beq.n	8003fce <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	77fb      	strb	r3, [r7, #31]
 8003fcc:	e000      	b.n	8003fd0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003fce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003fe0:	7ffb      	ldrb	r3, [r7, #31]
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3720      	adds	r7, #32
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
	...

08003fec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b088      	sub	sp, #32
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	603b      	str	r3, [r7, #0]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ffc:	f7fd ffbe 	bl	8001f7c <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004004:	1a9b      	subs	r3, r3, r2
 8004006:	683a      	ldr	r2, [r7, #0]
 8004008:	4413      	add	r3, r2
 800400a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800400c:	f7fd ffb6 	bl	8001f7c <HAL_GetTick>
 8004010:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004012:	4b39      	ldr	r3, [pc, #228]	; (80040f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	015b      	lsls	r3, r3, #5
 8004018:	0d1b      	lsrs	r3, r3, #20
 800401a:	69fa      	ldr	r2, [r7, #28]
 800401c:	fb02 f303 	mul.w	r3, r2, r3
 8004020:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004022:	e054      	b.n	80040ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800402a:	d050      	beq.n	80040ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800402c:	f7fd ffa6 	bl	8001f7c <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	69fa      	ldr	r2, [r7, #28]
 8004038:	429a      	cmp	r2, r3
 800403a:	d902      	bls.n	8004042 <SPI_WaitFlagStateUntilTimeout+0x56>
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d13d      	bne.n	80040be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	685a      	ldr	r2, [r3, #4]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004050:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800405a:	d111      	bne.n	8004080 <SPI_WaitFlagStateUntilTimeout+0x94>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004064:	d004      	beq.n	8004070 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800406e:	d107      	bne.n	8004080 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800407e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004084:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004088:	d10f      	bne.n	80040aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004098:	601a      	str	r2, [r3, #0]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e017      	b.n	80040ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80040c4:	2300      	movs	r3, #0
 80040c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	3b01      	subs	r3, #1
 80040cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	689a      	ldr	r2, [r3, #8]
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	4013      	ands	r3, r2
 80040d8:	68ba      	ldr	r2, [r7, #8]
 80040da:	429a      	cmp	r2, r3
 80040dc:	bf0c      	ite	eq
 80040de:	2301      	moveq	r3, #1
 80040e0:	2300      	movne	r3, #0
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	461a      	mov	r2, r3
 80040e6:	79fb      	ldrb	r3, [r7, #7]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d19b      	bne.n	8004024 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3720      	adds	r7, #32
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	20000000 	.word	0x20000000

080040fc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b08a      	sub	sp, #40	; 0x28
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	607a      	str	r2, [r7, #4]
 8004108:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800410a:	2300      	movs	r3, #0
 800410c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800410e:	f7fd ff35 	bl	8001f7c <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004116:	1a9b      	subs	r3, r3, r2
 8004118:	683a      	ldr	r2, [r7, #0]
 800411a:	4413      	add	r3, r2
 800411c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800411e:	f7fd ff2d 	bl	8001f7c <HAL_GetTick>
 8004122:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	330c      	adds	r3, #12
 800412a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800412c:	4b3d      	ldr	r3, [pc, #244]	; (8004224 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	4613      	mov	r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	4413      	add	r3, r2
 8004136:	00da      	lsls	r2, r3, #3
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	0d1b      	lsrs	r3, r3, #20
 800413c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800413e:	fb02 f303 	mul.w	r3, r2, r3
 8004142:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004144:	e060      	b.n	8004208 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800414c:	d107      	bne.n	800415e <SPI_WaitFifoStateUntilTimeout+0x62>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d104      	bne.n	800415e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	b2db      	uxtb	r3, r3
 800415a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800415c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004164:	d050      	beq.n	8004208 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004166:	f7fd ff09 	bl	8001f7c <HAL_GetTick>
 800416a:	4602      	mov	r2, r0
 800416c:	6a3b      	ldr	r3, [r7, #32]
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004172:	429a      	cmp	r2, r3
 8004174:	d902      	bls.n	800417c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004178:	2b00      	cmp	r3, #0
 800417a:	d13d      	bne.n	80041f8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800418a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004194:	d111      	bne.n	80041ba <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800419e:	d004      	beq.n	80041aa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041a8:	d107      	bne.n	80041ba <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041b8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041c2:	d10f      	bne.n	80041e4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041d2:	601a      	str	r2, [r3, #0]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041e2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e010      	b.n	800421a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d101      	bne.n	8004202 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80041fe:	2300      	movs	r3, #0
 8004200:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	3b01      	subs	r3, #1
 8004206:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	689a      	ldr	r2, [r3, #8]
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	4013      	ands	r3, r2
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	429a      	cmp	r2, r3
 8004216:	d196      	bne.n	8004146 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3728      	adds	r7, #40	; 0x28
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	20000000 	.word	0x20000000

08004228 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af02      	add	r7, sp, #8
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	9300      	str	r3, [sp, #0]
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	2200      	movs	r2, #0
 800423c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004240:	68f8      	ldr	r0, [r7, #12]
 8004242:	f7ff ff5b 	bl	80040fc <SPI_WaitFifoStateUntilTimeout>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d007      	beq.n	800425c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004250:	f043 0220 	orr.w	r2, r3, #32
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e027      	b.n	80042ac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	9300      	str	r3, [sp, #0]
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	2200      	movs	r2, #0
 8004264:	2180      	movs	r1, #128	; 0x80
 8004266:	68f8      	ldr	r0, [r7, #12]
 8004268:	f7ff fec0 	bl	8003fec <SPI_WaitFlagStateUntilTimeout>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d007      	beq.n	8004282 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004276:	f043 0220 	orr.w	r2, r3, #32
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e014      	b.n	80042ac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	9300      	str	r3, [sp, #0]
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	2200      	movs	r2, #0
 800428a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f7ff ff34 	bl	80040fc <SPI_WaitFifoStateUntilTimeout>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d007      	beq.n	80042aa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800429e:	f043 0220 	orr.w	r2, r3, #32
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e000      	b.n	80042ac <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e049      	b.n	800435a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d106      	bne.n	80042e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 f841 	bl	8004362 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2202      	movs	r2, #2
 80042e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	3304      	adds	r3, #4
 80042f0:	4619      	mov	r1, r3
 80042f2:	4610      	mov	r0, r2
 80042f4:	f000 f9f8 	bl	80046e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3708      	adds	r7, #8
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}

08004362 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004362:	b480      	push	{r7}
 8004364:	b083      	sub	sp, #12
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800436a:	bf00      	nop
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
	...

08004378 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004386:	b2db      	uxtb	r3, r3
 8004388:	2b01      	cmp	r3, #1
 800438a:	d001      	beq.n	8004390 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e04f      	b.n	8004430 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2202      	movs	r2, #2
 8004394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68da      	ldr	r2, [r3, #12]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f042 0201 	orr.w	r2, r2, #1
 80043a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a23      	ldr	r2, [pc, #140]	; (800443c <HAL_TIM_Base_Start_IT+0xc4>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d01d      	beq.n	80043ee <HAL_TIM_Base_Start_IT+0x76>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ba:	d018      	beq.n	80043ee <HAL_TIM_Base_Start_IT+0x76>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a1f      	ldr	r2, [pc, #124]	; (8004440 <HAL_TIM_Base_Start_IT+0xc8>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d013      	beq.n	80043ee <HAL_TIM_Base_Start_IT+0x76>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a1e      	ldr	r2, [pc, #120]	; (8004444 <HAL_TIM_Base_Start_IT+0xcc>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d00e      	beq.n	80043ee <HAL_TIM_Base_Start_IT+0x76>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a1c      	ldr	r2, [pc, #112]	; (8004448 <HAL_TIM_Base_Start_IT+0xd0>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d009      	beq.n	80043ee <HAL_TIM_Base_Start_IT+0x76>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a1b      	ldr	r2, [pc, #108]	; (800444c <HAL_TIM_Base_Start_IT+0xd4>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d004      	beq.n	80043ee <HAL_TIM_Base_Start_IT+0x76>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a19      	ldr	r2, [pc, #100]	; (8004450 <HAL_TIM_Base_Start_IT+0xd8>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d115      	bne.n	800441a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	689a      	ldr	r2, [r3, #8]
 80043f4:	4b17      	ldr	r3, [pc, #92]	; (8004454 <HAL_TIM_Base_Start_IT+0xdc>)
 80043f6:	4013      	ands	r3, r2
 80043f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2b06      	cmp	r3, #6
 80043fe:	d015      	beq.n	800442c <HAL_TIM_Base_Start_IT+0xb4>
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004406:	d011      	beq.n	800442c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f042 0201 	orr.w	r2, r2, #1
 8004416:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004418:	e008      	b.n	800442c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f042 0201 	orr.w	r2, r2, #1
 8004428:	601a      	str	r2, [r3, #0]
 800442a:	e000      	b.n	800442e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800442c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3714      	adds	r7, #20
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr
 800443c:	40012c00 	.word	0x40012c00
 8004440:	40000400 	.word	0x40000400
 8004444:	40000800 	.word	0x40000800
 8004448:	40000c00 	.word	0x40000c00
 800444c:	40013400 	.word	0x40013400
 8004450:	40014000 	.word	0x40014000
 8004454:	00010007 	.word	0x00010007

08004458 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b02      	cmp	r3, #2
 800446c:	d122      	bne.n	80044b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b02      	cmp	r3, #2
 800447a:	d11b      	bne.n	80044b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f06f 0202 	mvn.w	r2, #2
 8004484:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2201      	movs	r2, #1
 800448a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	f003 0303 	and.w	r3, r3, #3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d003      	beq.n	80044a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f905 	bl	80046aa <HAL_TIM_IC_CaptureCallback>
 80044a0:	e005      	b.n	80044ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 f8f7 	bl	8004696 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 f908 	bl	80046be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	f003 0304 	and.w	r3, r3, #4
 80044be:	2b04      	cmp	r3, #4
 80044c0:	d122      	bne.n	8004508 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	f003 0304 	and.w	r3, r3, #4
 80044cc:	2b04      	cmp	r3, #4
 80044ce:	d11b      	bne.n	8004508 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f06f 0204 	mvn.w	r2, #4
 80044d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2202      	movs	r2, #2
 80044de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d003      	beq.n	80044f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 f8db 	bl	80046aa <HAL_TIM_IC_CaptureCallback>
 80044f4:	e005      	b.n	8004502 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 f8cd 	bl	8004696 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f000 f8de 	bl	80046be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	f003 0308 	and.w	r3, r3, #8
 8004512:	2b08      	cmp	r3, #8
 8004514:	d122      	bne.n	800455c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	f003 0308 	and.w	r3, r3, #8
 8004520:	2b08      	cmp	r3, #8
 8004522:	d11b      	bne.n	800455c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f06f 0208 	mvn.w	r2, #8
 800452c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2204      	movs	r2, #4
 8004532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	69db      	ldr	r3, [r3, #28]
 800453a:	f003 0303 	and.w	r3, r3, #3
 800453e:	2b00      	cmp	r3, #0
 8004540:	d003      	beq.n	800454a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 f8b1 	bl	80046aa <HAL_TIM_IC_CaptureCallback>
 8004548:	e005      	b.n	8004556 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 f8a3 	bl	8004696 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f000 f8b4 	bl	80046be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	f003 0310 	and.w	r3, r3, #16
 8004566:	2b10      	cmp	r3, #16
 8004568:	d122      	bne.n	80045b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	f003 0310 	and.w	r3, r3, #16
 8004574:	2b10      	cmp	r3, #16
 8004576:	d11b      	bne.n	80045b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f06f 0210 	mvn.w	r2, #16
 8004580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2208      	movs	r2, #8
 8004586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	69db      	ldr	r3, [r3, #28]
 800458e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004592:	2b00      	cmp	r3, #0
 8004594:	d003      	beq.n	800459e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f887 	bl	80046aa <HAL_TIM_IC_CaptureCallback>
 800459c:	e005      	b.n	80045aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 f879 	bl	8004696 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 f88a 	bl	80046be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d10e      	bne.n	80045dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d107      	bne.n	80045dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f06f 0201 	mvn.w	r2, #1
 80045d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f7fd f980 	bl	80018dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045e6:	2b80      	cmp	r3, #128	; 0x80
 80045e8:	d10e      	bne.n	8004608 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045f4:	2b80      	cmp	r3, #128	; 0x80
 80045f6:	d107      	bne.n	8004608 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f914 	bl	8004830 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004612:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004616:	d10e      	bne.n	8004636 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004622:	2b80      	cmp	r3, #128	; 0x80
 8004624:	d107      	bne.n	8004636 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800462e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 f907 	bl	8004844 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004640:	2b40      	cmp	r3, #64	; 0x40
 8004642:	d10e      	bne.n	8004662 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800464e:	2b40      	cmp	r3, #64	; 0x40
 8004650:	d107      	bne.n	8004662 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800465a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 f838 	bl	80046d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	f003 0320 	and.w	r3, r3, #32
 800466c:	2b20      	cmp	r3, #32
 800466e:	d10e      	bne.n	800468e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	f003 0320 	and.w	r3, r3, #32
 800467a:	2b20      	cmp	r3, #32
 800467c:	d107      	bne.n	800468e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f06f 0220 	mvn.w	r2, #32
 8004686:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f000 f8c7 	bl	800481c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800468e:	bf00      	nop
 8004690:	3708      	adds	r7, #8
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004696:	b480      	push	{r7}
 8004698:	b083      	sub	sp, #12
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800469e:	bf00      	nop
 80046a0:	370c      	adds	r7, #12
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr

080046aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046aa:	b480      	push	{r7}
 80046ac:	b083      	sub	sp, #12
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046b2:	bf00      	nop
 80046b4:	370c      	adds	r7, #12
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr

080046be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046be:	b480      	push	{r7}
 80046c0:	b083      	sub	sp, #12
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046c6:	bf00      	nop
 80046c8:	370c      	adds	r7, #12
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr

080046d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046d2:	b480      	push	{r7}
 80046d4:	b083      	sub	sp, #12
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046da:	bf00      	nop
 80046dc:	370c      	adds	r7, #12
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
	...

080046e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b085      	sub	sp, #20
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a40      	ldr	r2, [pc, #256]	; (80047fc <TIM_Base_SetConfig+0x114>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d013      	beq.n	8004728 <TIM_Base_SetConfig+0x40>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004706:	d00f      	beq.n	8004728 <TIM_Base_SetConfig+0x40>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a3d      	ldr	r2, [pc, #244]	; (8004800 <TIM_Base_SetConfig+0x118>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d00b      	beq.n	8004728 <TIM_Base_SetConfig+0x40>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a3c      	ldr	r2, [pc, #240]	; (8004804 <TIM_Base_SetConfig+0x11c>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d007      	beq.n	8004728 <TIM_Base_SetConfig+0x40>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a3b      	ldr	r2, [pc, #236]	; (8004808 <TIM_Base_SetConfig+0x120>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d003      	beq.n	8004728 <TIM_Base_SetConfig+0x40>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a3a      	ldr	r2, [pc, #232]	; (800480c <TIM_Base_SetConfig+0x124>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d108      	bne.n	800473a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800472e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	68fa      	ldr	r2, [r7, #12]
 8004736:	4313      	orrs	r3, r2
 8004738:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a2f      	ldr	r2, [pc, #188]	; (80047fc <TIM_Base_SetConfig+0x114>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d01f      	beq.n	8004782 <TIM_Base_SetConfig+0x9a>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004748:	d01b      	beq.n	8004782 <TIM_Base_SetConfig+0x9a>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a2c      	ldr	r2, [pc, #176]	; (8004800 <TIM_Base_SetConfig+0x118>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d017      	beq.n	8004782 <TIM_Base_SetConfig+0x9a>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a2b      	ldr	r2, [pc, #172]	; (8004804 <TIM_Base_SetConfig+0x11c>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d013      	beq.n	8004782 <TIM_Base_SetConfig+0x9a>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a2a      	ldr	r2, [pc, #168]	; (8004808 <TIM_Base_SetConfig+0x120>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d00f      	beq.n	8004782 <TIM_Base_SetConfig+0x9a>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a29      	ldr	r2, [pc, #164]	; (800480c <TIM_Base_SetConfig+0x124>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d00b      	beq.n	8004782 <TIM_Base_SetConfig+0x9a>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a28      	ldr	r2, [pc, #160]	; (8004810 <TIM_Base_SetConfig+0x128>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d007      	beq.n	8004782 <TIM_Base_SetConfig+0x9a>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a27      	ldr	r2, [pc, #156]	; (8004814 <TIM_Base_SetConfig+0x12c>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d003      	beq.n	8004782 <TIM_Base_SetConfig+0x9a>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a26      	ldr	r2, [pc, #152]	; (8004818 <TIM_Base_SetConfig+0x130>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d108      	bne.n	8004794 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004788:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	68fa      	ldr	r2, [r7, #12]
 8004790:	4313      	orrs	r3, r2
 8004792:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	4313      	orrs	r3, r2
 80047a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	689a      	ldr	r2, [r3, #8]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4a10      	ldr	r2, [pc, #64]	; (80047fc <TIM_Base_SetConfig+0x114>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d00f      	beq.n	80047e0 <TIM_Base_SetConfig+0xf8>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4a12      	ldr	r2, [pc, #72]	; (800480c <TIM_Base_SetConfig+0x124>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d00b      	beq.n	80047e0 <TIM_Base_SetConfig+0xf8>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4a11      	ldr	r2, [pc, #68]	; (8004810 <TIM_Base_SetConfig+0x128>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d007      	beq.n	80047e0 <TIM_Base_SetConfig+0xf8>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4a10      	ldr	r2, [pc, #64]	; (8004814 <TIM_Base_SetConfig+0x12c>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d003      	beq.n	80047e0 <TIM_Base_SetConfig+0xf8>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a0f      	ldr	r2, [pc, #60]	; (8004818 <TIM_Base_SetConfig+0x130>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d103      	bne.n	80047e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	691a      	ldr	r2, [r3, #16]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	615a      	str	r2, [r3, #20]
}
 80047ee:	bf00      	nop
 80047f0:	3714      	adds	r7, #20
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	40012c00 	.word	0x40012c00
 8004800:	40000400 	.word	0x40000400
 8004804:	40000800 	.word	0x40000800
 8004808:	40000c00 	.word	0x40000c00
 800480c:	40013400 	.word	0x40013400
 8004810:	40014000 	.word	0x40014000
 8004814:	40014400 	.word	0x40014400
 8004818:	40014800 	.word	0x40014800

0800481c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004824:	bf00      	nop
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800484c:	bf00      	nop
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d101      	bne.n	800486a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e040      	b.n	80048ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800486e:	2b00      	cmp	r3, #0
 8004870:	d106      	bne.n	8004880 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f7fd fa18 	bl	8001cb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2224      	movs	r2, #36	; 0x24
 8004884:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f022 0201 	bic.w	r2, r2, #1
 8004894:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 f8c0 	bl	8004a1c <UART_SetConfig>
 800489c:	4603      	mov	r3, r0
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d101      	bne.n	80048a6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e022      	b.n	80048ec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d002      	beq.n	80048b4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 fb6c 	bl	8004f8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	685a      	ldr	r2, [r3, #4]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	689a      	ldr	r2, [r3, #8]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f042 0201 	orr.w	r2, r2, #1
 80048e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 fbf3 	bl	80050d0 <UART_CheckIdleState>
 80048ea:	4603      	mov	r3, r0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3708      	adds	r7, #8
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b08a      	sub	sp, #40	; 0x28
 80048f8:	af02      	add	r7, sp, #8
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	603b      	str	r3, [r7, #0]
 8004900:	4613      	mov	r3, r2
 8004902:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004908:	2b20      	cmp	r3, #32
 800490a:	f040 8082 	bne.w	8004a12 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d002      	beq.n	800491a <HAL_UART_Transmit+0x26>
 8004914:	88fb      	ldrh	r3, [r7, #6]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d101      	bne.n	800491e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e07a      	b.n	8004a14 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004924:	2b01      	cmp	r3, #1
 8004926:	d101      	bne.n	800492c <HAL_UART_Transmit+0x38>
 8004928:	2302      	movs	r3, #2
 800492a:	e073      	b.n	8004a14 <HAL_UART_Transmit+0x120>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2200      	movs	r2, #0
 8004938:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2221      	movs	r2, #33	; 0x21
 8004940:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004942:	f7fd fb1b 	bl	8001f7c <HAL_GetTick>
 8004946:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	88fa      	ldrh	r2, [r7, #6]
 800494c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	88fa      	ldrh	r2, [r7, #6]
 8004954:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004960:	d108      	bne.n	8004974 <HAL_UART_Transmit+0x80>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d104      	bne.n	8004974 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800496a:	2300      	movs	r3, #0
 800496c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	61bb      	str	r3, [r7, #24]
 8004972:	e003      	b.n	800497c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004978:	2300      	movs	r3, #0
 800497a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004984:	e02d      	b.n	80049e2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	9300      	str	r3, [sp, #0]
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	2200      	movs	r2, #0
 800498e:	2180      	movs	r1, #128	; 0x80
 8004990:	68f8      	ldr	r0, [r7, #12]
 8004992:	f000 fbe6 	bl	8005162 <UART_WaitOnFlagUntilTimeout>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d001      	beq.n	80049a0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	e039      	b.n	8004a14 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d10b      	bne.n	80049be <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	881a      	ldrh	r2, [r3, #0]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049b2:	b292      	uxth	r2, r2
 80049b4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	3302      	adds	r3, #2
 80049ba:	61bb      	str	r3, [r7, #24]
 80049bc:	e008      	b.n	80049d0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	781a      	ldrb	r2, [r3, #0]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	b292      	uxth	r2, r2
 80049c8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	3301      	adds	r3, #1
 80049ce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	3b01      	subs	r3, #1
 80049da:	b29a      	uxth	r2, r3
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1cb      	bne.n	8004986 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	9300      	str	r3, [sp, #0]
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	2200      	movs	r2, #0
 80049f6:	2140      	movs	r1, #64	; 0x40
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	f000 fbb2 	bl	8005162 <UART_WaitOnFlagUntilTimeout>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d001      	beq.n	8004a08 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e005      	b.n	8004a14 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2220      	movs	r2, #32
 8004a0c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	e000      	b.n	8004a14 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004a12:	2302      	movs	r3, #2
  }
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3720      	adds	r7, #32
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a20:	b08a      	sub	sp, #40	; 0x28
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a26:	2300      	movs	r3, #0
 8004a28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	689a      	ldr	r2, [r3, #8]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	431a      	orrs	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	695b      	ldr	r3, [r3, #20]
 8004a3a:	431a      	orrs	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	69db      	ldr	r3, [r3, #28]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	4ba4      	ldr	r3, [pc, #656]	; (8004cdc <UART_SetConfig+0x2c0>)
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	6812      	ldr	r2, [r2, #0]
 8004a52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a54:	430b      	orrs	r3, r1
 8004a56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	68da      	ldr	r2, [r3, #12]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a99      	ldr	r2, [pc, #612]	; (8004ce0 <UART_SetConfig+0x2c4>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d004      	beq.n	8004a88 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a84:	4313      	orrs	r3, r2
 8004a86:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a98:	430a      	orrs	r2, r1
 8004a9a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a90      	ldr	r2, [pc, #576]	; (8004ce4 <UART_SetConfig+0x2c8>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d126      	bne.n	8004af4 <UART_SetConfig+0xd8>
 8004aa6:	4b90      	ldr	r3, [pc, #576]	; (8004ce8 <UART_SetConfig+0x2cc>)
 8004aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aac:	f003 0303 	and.w	r3, r3, #3
 8004ab0:	2b03      	cmp	r3, #3
 8004ab2:	d81b      	bhi.n	8004aec <UART_SetConfig+0xd0>
 8004ab4:	a201      	add	r2, pc, #4	; (adr r2, 8004abc <UART_SetConfig+0xa0>)
 8004ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aba:	bf00      	nop
 8004abc:	08004acd 	.word	0x08004acd
 8004ac0:	08004add 	.word	0x08004add
 8004ac4:	08004ad5 	.word	0x08004ad5
 8004ac8:	08004ae5 	.word	0x08004ae5
 8004acc:	2301      	movs	r3, #1
 8004ace:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ad2:	e116      	b.n	8004d02 <UART_SetConfig+0x2e6>
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ada:	e112      	b.n	8004d02 <UART_SetConfig+0x2e6>
 8004adc:	2304      	movs	r3, #4
 8004ade:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ae2:	e10e      	b.n	8004d02 <UART_SetConfig+0x2e6>
 8004ae4:	2308      	movs	r3, #8
 8004ae6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aea:	e10a      	b.n	8004d02 <UART_SetConfig+0x2e6>
 8004aec:	2310      	movs	r3, #16
 8004aee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004af2:	e106      	b.n	8004d02 <UART_SetConfig+0x2e6>
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a7c      	ldr	r2, [pc, #496]	; (8004cec <UART_SetConfig+0x2d0>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d138      	bne.n	8004b70 <UART_SetConfig+0x154>
 8004afe:	4b7a      	ldr	r3, [pc, #488]	; (8004ce8 <UART_SetConfig+0x2cc>)
 8004b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b04:	f003 030c 	and.w	r3, r3, #12
 8004b08:	2b0c      	cmp	r3, #12
 8004b0a:	d82d      	bhi.n	8004b68 <UART_SetConfig+0x14c>
 8004b0c:	a201      	add	r2, pc, #4	; (adr r2, 8004b14 <UART_SetConfig+0xf8>)
 8004b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b12:	bf00      	nop
 8004b14:	08004b49 	.word	0x08004b49
 8004b18:	08004b69 	.word	0x08004b69
 8004b1c:	08004b69 	.word	0x08004b69
 8004b20:	08004b69 	.word	0x08004b69
 8004b24:	08004b59 	.word	0x08004b59
 8004b28:	08004b69 	.word	0x08004b69
 8004b2c:	08004b69 	.word	0x08004b69
 8004b30:	08004b69 	.word	0x08004b69
 8004b34:	08004b51 	.word	0x08004b51
 8004b38:	08004b69 	.word	0x08004b69
 8004b3c:	08004b69 	.word	0x08004b69
 8004b40:	08004b69 	.word	0x08004b69
 8004b44:	08004b61 	.word	0x08004b61
 8004b48:	2300      	movs	r3, #0
 8004b4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b4e:	e0d8      	b.n	8004d02 <UART_SetConfig+0x2e6>
 8004b50:	2302      	movs	r3, #2
 8004b52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b56:	e0d4      	b.n	8004d02 <UART_SetConfig+0x2e6>
 8004b58:	2304      	movs	r3, #4
 8004b5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b5e:	e0d0      	b.n	8004d02 <UART_SetConfig+0x2e6>
 8004b60:	2308      	movs	r3, #8
 8004b62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b66:	e0cc      	b.n	8004d02 <UART_SetConfig+0x2e6>
 8004b68:	2310      	movs	r3, #16
 8004b6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b6e:	e0c8      	b.n	8004d02 <UART_SetConfig+0x2e6>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a5e      	ldr	r2, [pc, #376]	; (8004cf0 <UART_SetConfig+0x2d4>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d125      	bne.n	8004bc6 <UART_SetConfig+0x1aa>
 8004b7a:	4b5b      	ldr	r3, [pc, #364]	; (8004ce8 <UART_SetConfig+0x2cc>)
 8004b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b80:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004b84:	2b30      	cmp	r3, #48	; 0x30
 8004b86:	d016      	beq.n	8004bb6 <UART_SetConfig+0x19a>
 8004b88:	2b30      	cmp	r3, #48	; 0x30
 8004b8a:	d818      	bhi.n	8004bbe <UART_SetConfig+0x1a2>
 8004b8c:	2b20      	cmp	r3, #32
 8004b8e:	d00a      	beq.n	8004ba6 <UART_SetConfig+0x18a>
 8004b90:	2b20      	cmp	r3, #32
 8004b92:	d814      	bhi.n	8004bbe <UART_SetConfig+0x1a2>
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d002      	beq.n	8004b9e <UART_SetConfig+0x182>
 8004b98:	2b10      	cmp	r3, #16
 8004b9a:	d008      	beq.n	8004bae <UART_SetConfig+0x192>
 8004b9c:	e00f      	b.n	8004bbe <UART_SetConfig+0x1a2>
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ba4:	e0ad      	b.n	8004d02 <UART_SetConfig+0x2e6>
 8004ba6:	2302      	movs	r3, #2
 8004ba8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bac:	e0a9      	b.n	8004d02 <UART_SetConfig+0x2e6>
 8004bae:	2304      	movs	r3, #4
 8004bb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bb4:	e0a5      	b.n	8004d02 <UART_SetConfig+0x2e6>
 8004bb6:	2308      	movs	r3, #8
 8004bb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bbc:	e0a1      	b.n	8004d02 <UART_SetConfig+0x2e6>
 8004bbe:	2310      	movs	r3, #16
 8004bc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bc4:	e09d      	b.n	8004d02 <UART_SetConfig+0x2e6>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a4a      	ldr	r2, [pc, #296]	; (8004cf4 <UART_SetConfig+0x2d8>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d125      	bne.n	8004c1c <UART_SetConfig+0x200>
 8004bd0:	4b45      	ldr	r3, [pc, #276]	; (8004ce8 <UART_SetConfig+0x2cc>)
 8004bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bd6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004bda:	2bc0      	cmp	r3, #192	; 0xc0
 8004bdc:	d016      	beq.n	8004c0c <UART_SetConfig+0x1f0>
 8004bde:	2bc0      	cmp	r3, #192	; 0xc0
 8004be0:	d818      	bhi.n	8004c14 <UART_SetConfig+0x1f8>
 8004be2:	2b80      	cmp	r3, #128	; 0x80
 8004be4:	d00a      	beq.n	8004bfc <UART_SetConfig+0x1e0>
 8004be6:	2b80      	cmp	r3, #128	; 0x80
 8004be8:	d814      	bhi.n	8004c14 <UART_SetConfig+0x1f8>
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d002      	beq.n	8004bf4 <UART_SetConfig+0x1d8>
 8004bee:	2b40      	cmp	r3, #64	; 0x40
 8004bf0:	d008      	beq.n	8004c04 <UART_SetConfig+0x1e8>
 8004bf2:	e00f      	b.n	8004c14 <UART_SetConfig+0x1f8>
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bfa:	e082      	b.n	8004d02 <UART_SetConfig+0x2e6>
 8004bfc:	2302      	movs	r3, #2
 8004bfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c02:	e07e      	b.n	8004d02 <UART_SetConfig+0x2e6>
 8004c04:	2304      	movs	r3, #4
 8004c06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c0a:	e07a      	b.n	8004d02 <UART_SetConfig+0x2e6>
 8004c0c:	2308      	movs	r3, #8
 8004c0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c12:	e076      	b.n	8004d02 <UART_SetConfig+0x2e6>
 8004c14:	2310      	movs	r3, #16
 8004c16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c1a:	e072      	b.n	8004d02 <UART_SetConfig+0x2e6>
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a35      	ldr	r2, [pc, #212]	; (8004cf8 <UART_SetConfig+0x2dc>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d12a      	bne.n	8004c7c <UART_SetConfig+0x260>
 8004c26:	4b30      	ldr	r3, [pc, #192]	; (8004ce8 <UART_SetConfig+0x2cc>)
 8004c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c34:	d01a      	beq.n	8004c6c <UART_SetConfig+0x250>
 8004c36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c3a:	d81b      	bhi.n	8004c74 <UART_SetConfig+0x258>
 8004c3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c40:	d00c      	beq.n	8004c5c <UART_SetConfig+0x240>
 8004c42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c46:	d815      	bhi.n	8004c74 <UART_SetConfig+0x258>
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d003      	beq.n	8004c54 <UART_SetConfig+0x238>
 8004c4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c50:	d008      	beq.n	8004c64 <UART_SetConfig+0x248>
 8004c52:	e00f      	b.n	8004c74 <UART_SetConfig+0x258>
 8004c54:	2300      	movs	r3, #0
 8004c56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c5a:	e052      	b.n	8004d02 <UART_SetConfig+0x2e6>
 8004c5c:	2302      	movs	r3, #2
 8004c5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c62:	e04e      	b.n	8004d02 <UART_SetConfig+0x2e6>
 8004c64:	2304      	movs	r3, #4
 8004c66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c6a:	e04a      	b.n	8004d02 <UART_SetConfig+0x2e6>
 8004c6c:	2308      	movs	r3, #8
 8004c6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c72:	e046      	b.n	8004d02 <UART_SetConfig+0x2e6>
 8004c74:	2310      	movs	r3, #16
 8004c76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c7a:	e042      	b.n	8004d02 <UART_SetConfig+0x2e6>
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a17      	ldr	r2, [pc, #92]	; (8004ce0 <UART_SetConfig+0x2c4>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d13a      	bne.n	8004cfc <UART_SetConfig+0x2e0>
 8004c86:	4b18      	ldr	r3, [pc, #96]	; (8004ce8 <UART_SetConfig+0x2cc>)
 8004c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c8c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c94:	d01a      	beq.n	8004ccc <UART_SetConfig+0x2b0>
 8004c96:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c9a:	d81b      	bhi.n	8004cd4 <UART_SetConfig+0x2b8>
 8004c9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ca0:	d00c      	beq.n	8004cbc <UART_SetConfig+0x2a0>
 8004ca2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ca6:	d815      	bhi.n	8004cd4 <UART_SetConfig+0x2b8>
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d003      	beq.n	8004cb4 <UART_SetConfig+0x298>
 8004cac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cb0:	d008      	beq.n	8004cc4 <UART_SetConfig+0x2a8>
 8004cb2:	e00f      	b.n	8004cd4 <UART_SetConfig+0x2b8>
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cba:	e022      	b.n	8004d02 <UART_SetConfig+0x2e6>
 8004cbc:	2302      	movs	r3, #2
 8004cbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cc2:	e01e      	b.n	8004d02 <UART_SetConfig+0x2e6>
 8004cc4:	2304      	movs	r3, #4
 8004cc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cca:	e01a      	b.n	8004d02 <UART_SetConfig+0x2e6>
 8004ccc:	2308      	movs	r3, #8
 8004cce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cd2:	e016      	b.n	8004d02 <UART_SetConfig+0x2e6>
 8004cd4:	2310      	movs	r3, #16
 8004cd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cda:	e012      	b.n	8004d02 <UART_SetConfig+0x2e6>
 8004cdc:	efff69f3 	.word	0xefff69f3
 8004ce0:	40008000 	.word	0x40008000
 8004ce4:	40013800 	.word	0x40013800
 8004ce8:	40021000 	.word	0x40021000
 8004cec:	40004400 	.word	0x40004400
 8004cf0:	40004800 	.word	0x40004800
 8004cf4:	40004c00 	.word	0x40004c00
 8004cf8:	40005000 	.word	0x40005000
 8004cfc:	2310      	movs	r3, #16
 8004cfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a9f      	ldr	r2, [pc, #636]	; (8004f84 <UART_SetConfig+0x568>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d17a      	bne.n	8004e02 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d10:	2b08      	cmp	r3, #8
 8004d12:	d824      	bhi.n	8004d5e <UART_SetConfig+0x342>
 8004d14:	a201      	add	r2, pc, #4	; (adr r2, 8004d1c <UART_SetConfig+0x300>)
 8004d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d1a:	bf00      	nop
 8004d1c:	08004d41 	.word	0x08004d41
 8004d20:	08004d5f 	.word	0x08004d5f
 8004d24:	08004d49 	.word	0x08004d49
 8004d28:	08004d5f 	.word	0x08004d5f
 8004d2c:	08004d4f 	.word	0x08004d4f
 8004d30:	08004d5f 	.word	0x08004d5f
 8004d34:	08004d5f 	.word	0x08004d5f
 8004d38:	08004d5f 	.word	0x08004d5f
 8004d3c:	08004d57 	.word	0x08004d57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d40:	f7fe f9c8 	bl	80030d4 <HAL_RCC_GetPCLK1Freq>
 8004d44:	61f8      	str	r0, [r7, #28]
        break;
 8004d46:	e010      	b.n	8004d6a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d48:	4b8f      	ldr	r3, [pc, #572]	; (8004f88 <UART_SetConfig+0x56c>)
 8004d4a:	61fb      	str	r3, [r7, #28]
        break;
 8004d4c:	e00d      	b.n	8004d6a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d4e:	f7fe f929 	bl	8002fa4 <HAL_RCC_GetSysClockFreq>
 8004d52:	61f8      	str	r0, [r7, #28]
        break;
 8004d54:	e009      	b.n	8004d6a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d5a:	61fb      	str	r3, [r7, #28]
        break;
 8004d5c:	e005      	b.n	8004d6a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004d68:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f000 80fb 	beq.w	8004f68 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	685a      	ldr	r2, [r3, #4]
 8004d76:	4613      	mov	r3, r2
 8004d78:	005b      	lsls	r3, r3, #1
 8004d7a:	4413      	add	r3, r2
 8004d7c:	69fa      	ldr	r2, [r7, #28]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d305      	bcc.n	8004d8e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d88:	69fa      	ldr	r2, [r7, #28]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d903      	bls.n	8004d96 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004d94:	e0e8      	b.n	8004f68 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	461c      	mov	r4, r3
 8004d9c:	4615      	mov	r5, r2
 8004d9e:	f04f 0200 	mov.w	r2, #0
 8004da2:	f04f 0300 	mov.w	r3, #0
 8004da6:	022b      	lsls	r3, r5, #8
 8004da8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004dac:	0222      	lsls	r2, r4, #8
 8004dae:	68f9      	ldr	r1, [r7, #12]
 8004db0:	6849      	ldr	r1, [r1, #4]
 8004db2:	0849      	lsrs	r1, r1, #1
 8004db4:	2000      	movs	r0, #0
 8004db6:	4688      	mov	r8, r1
 8004db8:	4681      	mov	r9, r0
 8004dba:	eb12 0a08 	adds.w	sl, r2, r8
 8004dbe:	eb43 0b09 	adc.w	fp, r3, r9
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	603b      	str	r3, [r7, #0]
 8004dca:	607a      	str	r2, [r7, #4]
 8004dcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004dd0:	4650      	mov	r0, sl
 8004dd2:	4659      	mov	r1, fp
 8004dd4:	f7fb f9fc 	bl	80001d0 <__aeabi_uldivmod>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	460b      	mov	r3, r1
 8004ddc:	4613      	mov	r3, r2
 8004dde:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004de6:	d308      	bcc.n	8004dfa <UART_SetConfig+0x3de>
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dee:	d204      	bcs.n	8004dfa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	69ba      	ldr	r2, [r7, #24]
 8004df6:	60da      	str	r2, [r3, #12]
 8004df8:	e0b6      	b.n	8004f68 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004e00:	e0b2      	b.n	8004f68 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	69db      	ldr	r3, [r3, #28]
 8004e06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e0a:	d15e      	bne.n	8004eca <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004e0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e10:	2b08      	cmp	r3, #8
 8004e12:	d828      	bhi.n	8004e66 <UART_SetConfig+0x44a>
 8004e14:	a201      	add	r2, pc, #4	; (adr r2, 8004e1c <UART_SetConfig+0x400>)
 8004e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e1a:	bf00      	nop
 8004e1c:	08004e41 	.word	0x08004e41
 8004e20:	08004e49 	.word	0x08004e49
 8004e24:	08004e51 	.word	0x08004e51
 8004e28:	08004e67 	.word	0x08004e67
 8004e2c:	08004e57 	.word	0x08004e57
 8004e30:	08004e67 	.word	0x08004e67
 8004e34:	08004e67 	.word	0x08004e67
 8004e38:	08004e67 	.word	0x08004e67
 8004e3c:	08004e5f 	.word	0x08004e5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e40:	f7fe f948 	bl	80030d4 <HAL_RCC_GetPCLK1Freq>
 8004e44:	61f8      	str	r0, [r7, #28]
        break;
 8004e46:	e014      	b.n	8004e72 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e48:	f7fe f95a 	bl	8003100 <HAL_RCC_GetPCLK2Freq>
 8004e4c:	61f8      	str	r0, [r7, #28]
        break;
 8004e4e:	e010      	b.n	8004e72 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e50:	4b4d      	ldr	r3, [pc, #308]	; (8004f88 <UART_SetConfig+0x56c>)
 8004e52:	61fb      	str	r3, [r7, #28]
        break;
 8004e54:	e00d      	b.n	8004e72 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e56:	f7fe f8a5 	bl	8002fa4 <HAL_RCC_GetSysClockFreq>
 8004e5a:	61f8      	str	r0, [r7, #28]
        break;
 8004e5c:	e009      	b.n	8004e72 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e62:	61fb      	str	r3, [r7, #28]
        break;
 8004e64:	e005      	b.n	8004e72 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004e66:	2300      	movs	r3, #0
 8004e68:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004e70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d077      	beq.n	8004f68 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	005a      	lsls	r2, r3, #1
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	085b      	lsrs	r3, r3, #1
 8004e82:	441a      	add	r2, r3
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e8c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	2b0f      	cmp	r3, #15
 8004e92:	d916      	bls.n	8004ec2 <UART_SetConfig+0x4a6>
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e9a:	d212      	bcs.n	8004ec2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	f023 030f 	bic.w	r3, r3, #15
 8004ea4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	085b      	lsrs	r3, r3, #1
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	f003 0307 	and.w	r3, r3, #7
 8004eb0:	b29a      	uxth	r2, r3
 8004eb2:	8afb      	ldrh	r3, [r7, #22]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	8afa      	ldrh	r2, [r7, #22]
 8004ebe:	60da      	str	r2, [r3, #12]
 8004ec0:	e052      	b.n	8004f68 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004ec8:	e04e      	b.n	8004f68 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004eca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ece:	2b08      	cmp	r3, #8
 8004ed0:	d827      	bhi.n	8004f22 <UART_SetConfig+0x506>
 8004ed2:	a201      	add	r2, pc, #4	; (adr r2, 8004ed8 <UART_SetConfig+0x4bc>)
 8004ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed8:	08004efd 	.word	0x08004efd
 8004edc:	08004f05 	.word	0x08004f05
 8004ee0:	08004f0d 	.word	0x08004f0d
 8004ee4:	08004f23 	.word	0x08004f23
 8004ee8:	08004f13 	.word	0x08004f13
 8004eec:	08004f23 	.word	0x08004f23
 8004ef0:	08004f23 	.word	0x08004f23
 8004ef4:	08004f23 	.word	0x08004f23
 8004ef8:	08004f1b 	.word	0x08004f1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004efc:	f7fe f8ea 	bl	80030d4 <HAL_RCC_GetPCLK1Freq>
 8004f00:	61f8      	str	r0, [r7, #28]
        break;
 8004f02:	e014      	b.n	8004f2e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f04:	f7fe f8fc 	bl	8003100 <HAL_RCC_GetPCLK2Freq>
 8004f08:	61f8      	str	r0, [r7, #28]
        break;
 8004f0a:	e010      	b.n	8004f2e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f0c:	4b1e      	ldr	r3, [pc, #120]	; (8004f88 <UART_SetConfig+0x56c>)
 8004f0e:	61fb      	str	r3, [r7, #28]
        break;
 8004f10:	e00d      	b.n	8004f2e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f12:	f7fe f847 	bl	8002fa4 <HAL_RCC_GetSysClockFreq>
 8004f16:	61f8      	str	r0, [r7, #28]
        break;
 8004f18:	e009      	b.n	8004f2e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f1e:	61fb      	str	r3, [r7, #28]
        break;
 8004f20:	e005      	b.n	8004f2e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004f22:	2300      	movs	r3, #0
 8004f24:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004f2c:	bf00      	nop
    }

    if (pclk != 0U)
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d019      	beq.n	8004f68 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	085a      	lsrs	r2, r3, #1
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	441a      	add	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f46:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	2b0f      	cmp	r3, #15
 8004f4c:	d909      	bls.n	8004f62 <UART_SetConfig+0x546>
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f54:	d205      	bcs.n	8004f62 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	b29a      	uxth	r2, r3
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	60da      	str	r2, [r3, #12]
 8004f60:	e002      	b.n	8004f68 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004f74:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3728      	adds	r7, #40	; 0x28
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f82:	bf00      	nop
 8004f84:	40008000 	.word	0x40008000
 8004f88:	00f42400 	.word	0x00f42400

08004f8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f98:	f003 0301 	and.w	r3, r3, #1
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00a      	beq.n	8004fb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	430a      	orrs	r2, r1
 8004fb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fba:	f003 0302 	and.w	r3, r3, #2
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00a      	beq.n	8004fd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	430a      	orrs	r2, r1
 8004fd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fdc:	f003 0304 	and.w	r3, r3, #4
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00a      	beq.n	8004ffa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffe:	f003 0308 	and.w	r3, r3, #8
 8005002:	2b00      	cmp	r3, #0
 8005004:	d00a      	beq.n	800501c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	430a      	orrs	r2, r1
 800501a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005020:	f003 0310 	and.w	r3, r3, #16
 8005024:	2b00      	cmp	r3, #0
 8005026:	d00a      	beq.n	800503e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	430a      	orrs	r2, r1
 800503c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005042:	f003 0320 	and.w	r3, r3, #32
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00a      	beq.n	8005060 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	430a      	orrs	r2, r1
 800505e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005068:	2b00      	cmp	r3, #0
 800506a:	d01a      	beq.n	80050a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	430a      	orrs	r2, r1
 8005080:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005086:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800508a:	d10a      	bne.n	80050a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	430a      	orrs	r2, r1
 80050a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00a      	beq.n	80050c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	430a      	orrs	r2, r1
 80050c2:	605a      	str	r2, [r3, #4]
  }
}
 80050c4:	bf00      	nop
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b086      	sub	sp, #24
 80050d4:	af02      	add	r7, sp, #8
 80050d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050e0:	f7fc ff4c 	bl	8001f7c <HAL_GetTick>
 80050e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0308 	and.w	r3, r3, #8
 80050f0:	2b08      	cmp	r3, #8
 80050f2:	d10e      	bne.n	8005112 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050f8:	9300      	str	r3, [sp, #0]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f82d 	bl	8005162 <UART_WaitOnFlagUntilTimeout>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d001      	beq.n	8005112 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e023      	b.n	800515a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0304 	and.w	r3, r3, #4
 800511c:	2b04      	cmp	r3, #4
 800511e:	d10e      	bne.n	800513e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005120:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005124:	9300      	str	r3, [sp, #0]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2200      	movs	r2, #0
 800512a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 f817 	bl	8005162 <UART_WaitOnFlagUntilTimeout>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d001      	beq.n	800513e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	e00d      	b.n	800515a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2220      	movs	r2, #32
 8005142:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2220      	movs	r2, #32
 8005148:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3710      	adds	r7, #16
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005162:	b580      	push	{r7, lr}
 8005164:	b09c      	sub	sp, #112	; 0x70
 8005166:	af00      	add	r7, sp, #0
 8005168:	60f8      	str	r0, [r7, #12]
 800516a:	60b9      	str	r1, [r7, #8]
 800516c:	603b      	str	r3, [r7, #0]
 800516e:	4613      	mov	r3, r2
 8005170:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005172:	e0a5      	b.n	80052c0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005174:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800517a:	f000 80a1 	beq.w	80052c0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800517e:	f7fc fefd 	bl	8001f7c <HAL_GetTick>
 8005182:	4602      	mov	r2, r0
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800518a:	429a      	cmp	r2, r3
 800518c:	d302      	bcc.n	8005194 <UART_WaitOnFlagUntilTimeout+0x32>
 800518e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005190:	2b00      	cmp	r3, #0
 8005192:	d13e      	bne.n	8005212 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800519a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800519c:	e853 3f00 	ldrex	r3, [r3]
 80051a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80051a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80051a8:	667b      	str	r3, [r7, #100]	; 0x64
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	461a      	mov	r2, r3
 80051b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051b4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80051b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80051ba:	e841 2300 	strex	r3, r2, [r1]
 80051be:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80051c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1e6      	bne.n	8005194 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	3308      	adds	r3, #8
 80051cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051d0:	e853 3f00 	ldrex	r3, [r3]
 80051d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051d8:	f023 0301 	bic.w	r3, r3, #1
 80051dc:	663b      	str	r3, [r7, #96]	; 0x60
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	3308      	adds	r3, #8
 80051e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80051e6:	64ba      	str	r2, [r7, #72]	; 0x48
 80051e8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80051ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051ee:	e841 2300 	strex	r3, r2, [r1]
 80051f2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80051f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1e5      	bne.n	80051c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2220      	movs	r2, #32
 80051fe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2220      	movs	r2, #32
 8005204:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e067      	b.n	80052e2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0304 	and.w	r3, r3, #4
 800521c:	2b00      	cmp	r3, #0
 800521e:	d04f      	beq.n	80052c0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	69db      	ldr	r3, [r3, #28]
 8005226:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800522a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800522e:	d147      	bne.n	80052c0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005238:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005242:	e853 3f00 	ldrex	r3, [r3]
 8005246:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800524e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	461a      	mov	r2, r3
 8005256:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005258:	637b      	str	r3, [r7, #52]	; 0x34
 800525a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800525e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005260:	e841 2300 	strex	r3, r2, [r1]
 8005264:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005268:	2b00      	cmp	r3, #0
 800526a:	d1e6      	bne.n	800523a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	3308      	adds	r3, #8
 8005272:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	e853 3f00 	ldrex	r3, [r3]
 800527a:	613b      	str	r3, [r7, #16]
   return(result);
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	f023 0301 	bic.w	r3, r3, #1
 8005282:	66bb      	str	r3, [r7, #104]	; 0x68
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	3308      	adds	r3, #8
 800528a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800528c:	623a      	str	r2, [r7, #32]
 800528e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005290:	69f9      	ldr	r1, [r7, #28]
 8005292:	6a3a      	ldr	r2, [r7, #32]
 8005294:	e841 2300 	strex	r3, r2, [r1]
 8005298:	61bb      	str	r3, [r7, #24]
   return(result);
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d1e5      	bne.n	800526c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2220      	movs	r2, #32
 80052a4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2220      	movs	r2, #32
 80052aa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2220      	movs	r2, #32
 80052b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2200      	movs	r2, #0
 80052b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	e010      	b.n	80052e2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	69da      	ldr	r2, [r3, #28]
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	4013      	ands	r3, r2
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	bf0c      	ite	eq
 80052d0:	2301      	moveq	r3, #1
 80052d2:	2300      	movne	r3, #0
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	461a      	mov	r2, r3
 80052d8:	79fb      	ldrb	r3, [r7, #7]
 80052da:	429a      	cmp	r2, r3
 80052dc:	f43f af4a 	beq.w	8005174 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3770      	adds	r7, #112	; 0x70
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
	...

080052ec <__NVIC_SetPriority>:
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	4603      	mov	r3, r0
 80052f4:	6039      	str	r1, [r7, #0]
 80052f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	db0a      	blt.n	8005316 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	b2da      	uxtb	r2, r3
 8005304:	490c      	ldr	r1, [pc, #48]	; (8005338 <__NVIC_SetPriority+0x4c>)
 8005306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800530a:	0112      	lsls	r2, r2, #4
 800530c:	b2d2      	uxtb	r2, r2
 800530e:	440b      	add	r3, r1
 8005310:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005314:	e00a      	b.n	800532c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	b2da      	uxtb	r2, r3
 800531a:	4908      	ldr	r1, [pc, #32]	; (800533c <__NVIC_SetPriority+0x50>)
 800531c:	79fb      	ldrb	r3, [r7, #7]
 800531e:	f003 030f 	and.w	r3, r3, #15
 8005322:	3b04      	subs	r3, #4
 8005324:	0112      	lsls	r2, r2, #4
 8005326:	b2d2      	uxtb	r2, r2
 8005328:	440b      	add	r3, r1
 800532a:	761a      	strb	r2, [r3, #24]
}
 800532c:	bf00      	nop
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr
 8005338:	e000e100 	.word	0xe000e100
 800533c:	e000ed00 	.word	0xe000ed00

08005340 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005340:	b580      	push	{r7, lr}
 8005342:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005344:	4b05      	ldr	r3, [pc, #20]	; (800535c <SysTick_Handler+0x1c>)
 8005346:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005348:	f001 fee8 	bl	800711c <xTaskGetSchedulerState>
 800534c:	4603      	mov	r3, r0
 800534e:	2b01      	cmp	r3, #1
 8005350:	d001      	beq.n	8005356 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005352:	f002 fdd1 	bl	8007ef8 <xPortSysTickHandler>
  }
}
 8005356:	bf00      	nop
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	e000e010 	.word	0xe000e010

08005360 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005360:	b580      	push	{r7, lr}
 8005362:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005364:	2100      	movs	r1, #0
 8005366:	f06f 0004 	mvn.w	r0, #4
 800536a:	f7ff ffbf 	bl	80052ec <__NVIC_SetPriority>
#endif
}
 800536e:	bf00      	nop
 8005370:	bd80      	pop	{r7, pc}
	...

08005374 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800537a:	f3ef 8305 	mrs	r3, IPSR
 800537e:	603b      	str	r3, [r7, #0]
  return(result);
 8005380:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005382:	2b00      	cmp	r3, #0
 8005384:	d003      	beq.n	800538e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005386:	f06f 0305 	mvn.w	r3, #5
 800538a:	607b      	str	r3, [r7, #4]
 800538c:	e00c      	b.n	80053a8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800538e:	4b0a      	ldr	r3, [pc, #40]	; (80053b8 <osKernelInitialize+0x44>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d105      	bne.n	80053a2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005396:	4b08      	ldr	r3, [pc, #32]	; (80053b8 <osKernelInitialize+0x44>)
 8005398:	2201      	movs	r2, #1
 800539a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800539c:	2300      	movs	r3, #0
 800539e:	607b      	str	r3, [r7, #4]
 80053a0:	e002      	b.n	80053a8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80053a2:	f04f 33ff 	mov.w	r3, #4294967295
 80053a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80053a8:	687b      	ldr	r3, [r7, #4]
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	370c      	adds	r7, #12
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	200001a8 	.word	0x200001a8

080053bc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80053bc:	b580      	push	{r7, lr}
 80053be:	b082      	sub	sp, #8
 80053c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053c2:	f3ef 8305 	mrs	r3, IPSR
 80053c6:	603b      	str	r3, [r7, #0]
  return(result);
 80053c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d003      	beq.n	80053d6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80053ce:	f06f 0305 	mvn.w	r3, #5
 80053d2:	607b      	str	r3, [r7, #4]
 80053d4:	e010      	b.n	80053f8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80053d6:	4b0b      	ldr	r3, [pc, #44]	; (8005404 <osKernelStart+0x48>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d109      	bne.n	80053f2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80053de:	f7ff ffbf 	bl	8005360 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80053e2:	4b08      	ldr	r3, [pc, #32]	; (8005404 <osKernelStart+0x48>)
 80053e4:	2202      	movs	r2, #2
 80053e6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80053e8:	f001 fa50 	bl	800688c <vTaskStartScheduler>
      stat = osOK;
 80053ec:	2300      	movs	r3, #0
 80053ee:	607b      	str	r3, [r7, #4]
 80053f0:	e002      	b.n	80053f8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80053f2:	f04f 33ff 	mov.w	r3, #4294967295
 80053f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80053f8:	687b      	ldr	r3, [r7, #4]
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3708      	adds	r7, #8
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	200001a8 	.word	0x200001a8

08005408 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005408:	b580      	push	{r7, lr}
 800540a:	b08e      	sub	sp, #56	; 0x38
 800540c:	af04      	add	r7, sp, #16
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005414:	2300      	movs	r3, #0
 8005416:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005418:	f3ef 8305 	mrs	r3, IPSR
 800541c:	617b      	str	r3, [r7, #20]
  return(result);
 800541e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005420:	2b00      	cmp	r3, #0
 8005422:	d17e      	bne.n	8005522 <osThreadNew+0x11a>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d07b      	beq.n	8005522 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800542a:	2380      	movs	r3, #128	; 0x80
 800542c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800542e:	2318      	movs	r3, #24
 8005430:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005432:	2300      	movs	r3, #0
 8005434:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005436:	f04f 33ff 	mov.w	r3, #4294967295
 800543a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d045      	beq.n	80054ce <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d002      	beq.n	8005450 <osThreadNew+0x48>
        name = attr->name;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	699b      	ldr	r3, [r3, #24]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d002      	beq.n	800545e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	699b      	ldr	r3, [r3, #24]
 800545c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d008      	beq.n	8005476 <osThreadNew+0x6e>
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	2b38      	cmp	r3, #56	; 0x38
 8005468:	d805      	bhi.n	8005476 <osThreadNew+0x6e>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	f003 0301 	and.w	r3, r3, #1
 8005472:	2b00      	cmp	r3, #0
 8005474:	d001      	beq.n	800547a <osThreadNew+0x72>
        return (NULL);
 8005476:	2300      	movs	r3, #0
 8005478:	e054      	b.n	8005524 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	695b      	ldr	r3, [r3, #20]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d003      	beq.n	800548a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	089b      	lsrs	r3, r3, #2
 8005488:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00e      	beq.n	80054b0 <osThreadNew+0xa8>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	2b5b      	cmp	r3, #91	; 0x5b
 8005498:	d90a      	bls.n	80054b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d006      	beq.n	80054b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d002      	beq.n	80054b0 <osThreadNew+0xa8>
        mem = 1;
 80054aa:	2301      	movs	r3, #1
 80054ac:	61bb      	str	r3, [r7, #24]
 80054ae:	e010      	b.n	80054d2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d10c      	bne.n	80054d2 <osThreadNew+0xca>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d108      	bne.n	80054d2 <osThreadNew+0xca>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	691b      	ldr	r3, [r3, #16]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d104      	bne.n	80054d2 <osThreadNew+0xca>
          mem = 0;
 80054c8:	2300      	movs	r3, #0
 80054ca:	61bb      	str	r3, [r7, #24]
 80054cc:	e001      	b.n	80054d2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80054ce:	2300      	movs	r3, #0
 80054d0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d110      	bne.n	80054fa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80054e0:	9202      	str	r2, [sp, #8]
 80054e2:	9301      	str	r3, [sp, #4]
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	9300      	str	r3, [sp, #0]
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	6a3a      	ldr	r2, [r7, #32]
 80054ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80054ee:	68f8      	ldr	r0, [r7, #12]
 80054f0:	f000 fff6 	bl	80064e0 <xTaskCreateStatic>
 80054f4:	4603      	mov	r3, r0
 80054f6:	613b      	str	r3, [r7, #16]
 80054f8:	e013      	b.n	8005522 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d110      	bne.n	8005522 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005500:	6a3b      	ldr	r3, [r7, #32]
 8005502:	b29a      	uxth	r2, r3
 8005504:	f107 0310 	add.w	r3, r7, #16
 8005508:	9301      	str	r3, [sp, #4]
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	9300      	str	r3, [sp, #0]
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005512:	68f8      	ldr	r0, [r7, #12]
 8005514:	f001 f841 	bl	800659a <xTaskCreate>
 8005518:	4603      	mov	r3, r0
 800551a:	2b01      	cmp	r3, #1
 800551c:	d001      	beq.n	8005522 <osThreadNew+0x11a>
            hTask = NULL;
 800551e:	2300      	movs	r3, #0
 8005520:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005522:	693b      	ldr	r3, [r7, #16]
}
 8005524:	4618      	mov	r0, r3
 8005526:	3728      	adds	r7, #40	; 0x28
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005534:	f3ef 8305 	mrs	r3, IPSR
 8005538:	60bb      	str	r3, [r7, #8]
  return(result);
 800553a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800553c:	2b00      	cmp	r3, #0
 800553e:	d003      	beq.n	8005548 <osDelay+0x1c>
    stat = osErrorISR;
 8005540:	f06f 0305 	mvn.w	r3, #5
 8005544:	60fb      	str	r3, [r7, #12]
 8005546:	e007      	b.n	8005558 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005548:	2300      	movs	r3, #0
 800554a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d002      	beq.n	8005558 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f001 f966 	bl	8006824 <vTaskDelay>
    }
  }

  return (stat);
 8005558:	68fb      	ldr	r3, [r7, #12]
}
 800555a:	4618      	mov	r0, r3
 800555c:	3710      	adds	r7, #16
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
	...

08005564 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005564:	b480      	push	{r7}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	4a07      	ldr	r2, [pc, #28]	; (8005590 <vApplicationGetIdleTaskMemory+0x2c>)
 8005574:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	4a06      	ldr	r2, [pc, #24]	; (8005594 <vApplicationGetIdleTaskMemory+0x30>)
 800557a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2280      	movs	r2, #128	; 0x80
 8005580:	601a      	str	r2, [r3, #0]
}
 8005582:	bf00      	nop
 8005584:	3714      	adds	r7, #20
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop
 8005590:	200001ac 	.word	0x200001ac
 8005594:	20000208 	.word	0x20000208

08005598 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	4a07      	ldr	r2, [pc, #28]	; (80055c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80055a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	4a06      	ldr	r2, [pc, #24]	; (80055c8 <vApplicationGetTimerTaskMemory+0x30>)
 80055ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055b6:	601a      	str	r2, [r3, #0]
}
 80055b8:	bf00      	nop
 80055ba:	3714      	adds	r7, #20
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr
 80055c4:	20000408 	.word	0x20000408
 80055c8:	20000464 	.word	0x20000464

080055cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f103 0208 	add.w	r2, r3, #8
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f04f 32ff 	mov.w	r2, #4294967295
 80055e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f103 0208 	add.w	r2, r3, #8
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f103 0208 	add.w	r2, r3, #8
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800561a:	bf00      	nop
 800561c:	370c      	adds	r7, #12
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr

08005626 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005626:	b480      	push	{r7}
 8005628:	b085      	sub	sp, #20
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
 800562e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	689a      	ldr	r2, [r3, #8]
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	683a      	ldr	r2, [r7, #0]
 800564a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	683a      	ldr	r2, [r7, #0]
 8005650:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	1c5a      	adds	r2, r3, #1
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	601a      	str	r2, [r3, #0]
}
 8005662:	bf00      	nop
 8005664:	3714      	adds	r7, #20
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr

0800566e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800566e:	b480      	push	{r7}
 8005670:	b085      	sub	sp, #20
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
 8005676:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005684:	d103      	bne.n	800568e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	60fb      	str	r3, [r7, #12]
 800568c:	e00c      	b.n	80056a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	3308      	adds	r3, #8
 8005692:	60fb      	str	r3, [r7, #12]
 8005694:	e002      	b.n	800569c <vListInsert+0x2e>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	60fb      	str	r3, [r7, #12]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68ba      	ldr	r2, [r7, #8]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d2f6      	bcs.n	8005696 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	685a      	ldr	r2, [r3, #4]
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	683a      	ldr	r2, [r7, #0]
 80056b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	683a      	ldr	r2, [r7, #0]
 80056c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	1c5a      	adds	r2, r3, #1
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	601a      	str	r2, [r3, #0]
}
 80056d4:	bf00      	nop
 80056d6:	3714      	adds	r7, #20
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80056e0:	b480      	push	{r7}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	6892      	ldr	r2, [r2, #8]
 80056f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	6852      	ldr	r2, [r2, #4]
 8005700:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	429a      	cmp	r2, r3
 800570a:	d103      	bne.n	8005714 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	689a      	ldr	r2, [r3, #8]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	1e5a      	subs	r2, r3, #1
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
}
 8005728:	4618      	mov	r0, r3
 800572a:	3714      	adds	r7, #20
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d10a      	bne.n	800575e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574c:	f383 8811 	msr	BASEPRI, r3
 8005750:	f3bf 8f6f 	isb	sy
 8005754:	f3bf 8f4f 	dsb	sy
 8005758:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800575a:	bf00      	nop
 800575c:	e7fe      	b.n	800575c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800575e:	f002 fb39 	bl	8007dd4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800576a:	68f9      	ldr	r1, [r7, #12]
 800576c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800576e:	fb01 f303 	mul.w	r3, r1, r3
 8005772:	441a      	add	r2, r3
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2200      	movs	r2, #0
 800577c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800578e:	3b01      	subs	r3, #1
 8005790:	68f9      	ldr	r1, [r7, #12]
 8005792:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005794:	fb01 f303 	mul.w	r3, r1, r3
 8005798:	441a      	add	r2, r3
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	22ff      	movs	r2, #255	; 0xff
 80057a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	22ff      	movs	r2, #255	; 0xff
 80057aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d114      	bne.n	80057de <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d01a      	beq.n	80057f2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	3310      	adds	r3, #16
 80057c0:	4618      	mov	r0, r3
 80057c2:	f001 faed 	bl	8006da0 <xTaskRemoveFromEventList>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d012      	beq.n	80057f2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80057cc:	4b0c      	ldr	r3, [pc, #48]	; (8005800 <xQueueGenericReset+0xcc>)
 80057ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057d2:	601a      	str	r2, [r3, #0]
 80057d4:	f3bf 8f4f 	dsb	sy
 80057d8:	f3bf 8f6f 	isb	sy
 80057dc:	e009      	b.n	80057f2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	3310      	adds	r3, #16
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7ff fef2 	bl	80055cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	3324      	adds	r3, #36	; 0x24
 80057ec:	4618      	mov	r0, r3
 80057ee:	f7ff feed 	bl	80055cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80057f2:	f002 fb1f 	bl	8007e34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80057f6:	2301      	movs	r3, #1
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3710      	adds	r7, #16
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	e000ed04 	.word	0xe000ed04

08005804 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005804:	b580      	push	{r7, lr}
 8005806:	b08e      	sub	sp, #56	; 0x38
 8005808:	af02      	add	r7, sp, #8
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	60b9      	str	r1, [r7, #8]
 800580e:	607a      	str	r2, [r7, #4]
 8005810:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d10a      	bne.n	800582e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800581c:	f383 8811 	msr	BASEPRI, r3
 8005820:	f3bf 8f6f 	isb	sy
 8005824:	f3bf 8f4f 	dsb	sy
 8005828:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800582a:	bf00      	nop
 800582c:	e7fe      	b.n	800582c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d10a      	bne.n	800584a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005838:	f383 8811 	msr	BASEPRI, r3
 800583c:	f3bf 8f6f 	isb	sy
 8005840:	f3bf 8f4f 	dsb	sy
 8005844:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005846:	bf00      	nop
 8005848:	e7fe      	b.n	8005848 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d002      	beq.n	8005856 <xQueueGenericCreateStatic+0x52>
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d001      	beq.n	800585a <xQueueGenericCreateStatic+0x56>
 8005856:	2301      	movs	r3, #1
 8005858:	e000      	b.n	800585c <xQueueGenericCreateStatic+0x58>
 800585a:	2300      	movs	r3, #0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d10a      	bne.n	8005876 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005864:	f383 8811 	msr	BASEPRI, r3
 8005868:	f3bf 8f6f 	isb	sy
 800586c:	f3bf 8f4f 	dsb	sy
 8005870:	623b      	str	r3, [r7, #32]
}
 8005872:	bf00      	nop
 8005874:	e7fe      	b.n	8005874 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d102      	bne.n	8005882 <xQueueGenericCreateStatic+0x7e>
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d101      	bne.n	8005886 <xQueueGenericCreateStatic+0x82>
 8005882:	2301      	movs	r3, #1
 8005884:	e000      	b.n	8005888 <xQueueGenericCreateStatic+0x84>
 8005886:	2300      	movs	r3, #0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d10a      	bne.n	80058a2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800588c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005890:	f383 8811 	msr	BASEPRI, r3
 8005894:	f3bf 8f6f 	isb	sy
 8005898:	f3bf 8f4f 	dsb	sy
 800589c:	61fb      	str	r3, [r7, #28]
}
 800589e:	bf00      	nop
 80058a0:	e7fe      	b.n	80058a0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80058a2:	2350      	movs	r3, #80	; 0x50
 80058a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	2b50      	cmp	r3, #80	; 0x50
 80058aa:	d00a      	beq.n	80058c2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80058ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b0:	f383 8811 	msr	BASEPRI, r3
 80058b4:	f3bf 8f6f 	isb	sy
 80058b8:	f3bf 8f4f 	dsb	sy
 80058bc:	61bb      	str	r3, [r7, #24]
}
 80058be:	bf00      	nop
 80058c0:	e7fe      	b.n	80058c0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80058c2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80058c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00d      	beq.n	80058ea <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80058ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d0:	2201      	movs	r2, #1
 80058d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80058d6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80058da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058dc:	9300      	str	r3, [sp, #0]
 80058de:	4613      	mov	r3, r2
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	68b9      	ldr	r1, [r7, #8]
 80058e4:	68f8      	ldr	r0, [r7, #12]
 80058e6:	f000 f83f 	bl	8005968 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80058ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3730      	adds	r7, #48	; 0x30
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b08a      	sub	sp, #40	; 0x28
 80058f8:	af02      	add	r7, sp, #8
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	4613      	mov	r3, r2
 8005900:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d10a      	bne.n	800591e <xQueueGenericCreate+0x2a>
	__asm volatile
 8005908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800590c:	f383 8811 	msr	BASEPRI, r3
 8005910:	f3bf 8f6f 	isb	sy
 8005914:	f3bf 8f4f 	dsb	sy
 8005918:	613b      	str	r3, [r7, #16]
}
 800591a:	bf00      	nop
 800591c:	e7fe      	b.n	800591c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	68ba      	ldr	r2, [r7, #8]
 8005922:	fb02 f303 	mul.w	r3, r2, r3
 8005926:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	3350      	adds	r3, #80	; 0x50
 800592c:	4618      	mov	r0, r3
 800592e:	f002 fb73 	bl	8008018 <pvPortMalloc>
 8005932:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d011      	beq.n	800595e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	3350      	adds	r3, #80	; 0x50
 8005942:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	2200      	movs	r2, #0
 8005948:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800594c:	79fa      	ldrb	r2, [r7, #7]
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	9300      	str	r3, [sp, #0]
 8005952:	4613      	mov	r3, r2
 8005954:	697a      	ldr	r2, [r7, #20]
 8005956:	68b9      	ldr	r1, [r7, #8]
 8005958:	68f8      	ldr	r0, [r7, #12]
 800595a:	f000 f805 	bl	8005968 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800595e:	69bb      	ldr	r3, [r7, #24]
	}
 8005960:	4618      	mov	r0, r3
 8005962:	3720      	adds	r7, #32
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	607a      	str	r2, [r7, #4]
 8005974:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d103      	bne.n	8005984 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	69ba      	ldr	r2, [r7, #24]
 8005980:	601a      	str	r2, [r3, #0]
 8005982:	e002      	b.n	800598a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005984:	69bb      	ldr	r3, [r7, #24]
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	68ba      	ldr	r2, [r7, #8]
 8005994:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005996:	2101      	movs	r1, #1
 8005998:	69b8      	ldr	r0, [r7, #24]
 800599a:	f7ff fecb 	bl	8005734 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	78fa      	ldrb	r2, [r7, #3]
 80059a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80059a6:	bf00      	nop
 80059a8:	3710      	adds	r7, #16
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
	...

080059b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b08e      	sub	sp, #56	; 0x38
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	607a      	str	r2, [r7, #4]
 80059bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80059be:	2300      	movs	r3, #0
 80059c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80059c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d10a      	bne.n	80059e2 <xQueueGenericSend+0x32>
	__asm volatile
 80059cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d0:	f383 8811 	msr	BASEPRI, r3
 80059d4:	f3bf 8f6f 	isb	sy
 80059d8:	f3bf 8f4f 	dsb	sy
 80059dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80059de:	bf00      	nop
 80059e0:	e7fe      	b.n	80059e0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d103      	bne.n	80059f0 <xQueueGenericSend+0x40>
 80059e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d101      	bne.n	80059f4 <xQueueGenericSend+0x44>
 80059f0:	2301      	movs	r3, #1
 80059f2:	e000      	b.n	80059f6 <xQueueGenericSend+0x46>
 80059f4:	2300      	movs	r3, #0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d10a      	bne.n	8005a10 <xQueueGenericSend+0x60>
	__asm volatile
 80059fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fe:	f383 8811 	msr	BASEPRI, r3
 8005a02:	f3bf 8f6f 	isb	sy
 8005a06:	f3bf 8f4f 	dsb	sy
 8005a0a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005a0c:	bf00      	nop
 8005a0e:	e7fe      	b.n	8005a0e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d103      	bne.n	8005a1e <xQueueGenericSend+0x6e>
 8005a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d101      	bne.n	8005a22 <xQueueGenericSend+0x72>
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e000      	b.n	8005a24 <xQueueGenericSend+0x74>
 8005a22:	2300      	movs	r3, #0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d10a      	bne.n	8005a3e <xQueueGenericSend+0x8e>
	__asm volatile
 8005a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2c:	f383 8811 	msr	BASEPRI, r3
 8005a30:	f3bf 8f6f 	isb	sy
 8005a34:	f3bf 8f4f 	dsb	sy
 8005a38:	623b      	str	r3, [r7, #32]
}
 8005a3a:	bf00      	nop
 8005a3c:	e7fe      	b.n	8005a3c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a3e:	f001 fb6d 	bl	800711c <xTaskGetSchedulerState>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d102      	bne.n	8005a4e <xQueueGenericSend+0x9e>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d101      	bne.n	8005a52 <xQueueGenericSend+0xa2>
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e000      	b.n	8005a54 <xQueueGenericSend+0xa4>
 8005a52:	2300      	movs	r3, #0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d10a      	bne.n	8005a6e <xQueueGenericSend+0xbe>
	__asm volatile
 8005a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a5c:	f383 8811 	msr	BASEPRI, r3
 8005a60:	f3bf 8f6f 	isb	sy
 8005a64:	f3bf 8f4f 	dsb	sy
 8005a68:	61fb      	str	r3, [r7, #28]
}
 8005a6a:	bf00      	nop
 8005a6c:	e7fe      	b.n	8005a6c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a6e:	f002 f9b1 	bl	8007dd4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d302      	bcc.n	8005a84 <xQueueGenericSend+0xd4>
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d129      	bne.n	8005ad8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a84:	683a      	ldr	r2, [r7, #0]
 8005a86:	68b9      	ldr	r1, [r7, #8]
 8005a88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a8a:	f000 fbbb 	bl	8006204 <prvCopyDataToQueue>
 8005a8e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d010      	beq.n	8005aba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9a:	3324      	adds	r3, #36	; 0x24
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f001 f97f 	bl	8006da0 <xTaskRemoveFromEventList>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d013      	beq.n	8005ad0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005aa8:	4b3f      	ldr	r3, [pc, #252]	; (8005ba8 <xQueueGenericSend+0x1f8>)
 8005aaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aae:	601a      	str	r2, [r3, #0]
 8005ab0:	f3bf 8f4f 	dsb	sy
 8005ab4:	f3bf 8f6f 	isb	sy
 8005ab8:	e00a      	b.n	8005ad0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d007      	beq.n	8005ad0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005ac0:	4b39      	ldr	r3, [pc, #228]	; (8005ba8 <xQueueGenericSend+0x1f8>)
 8005ac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ac6:	601a      	str	r2, [r3, #0]
 8005ac8:	f3bf 8f4f 	dsb	sy
 8005acc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005ad0:	f002 f9b0 	bl	8007e34 <vPortExitCritical>
				return pdPASS;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e063      	b.n	8005ba0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d103      	bne.n	8005ae6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005ade:	f002 f9a9 	bl	8007e34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	e05c      	b.n	8005ba0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d106      	bne.n	8005afa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005aec:	f107 0314 	add.w	r3, r7, #20
 8005af0:	4618      	mov	r0, r3
 8005af2:	f001 f9b9 	bl	8006e68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005af6:	2301      	movs	r3, #1
 8005af8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005afa:	f002 f99b 	bl	8007e34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005afe:	f000 ff2b 	bl	8006958 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b02:	f002 f967 	bl	8007dd4 <vPortEnterCritical>
 8005b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b0c:	b25b      	sxtb	r3, r3
 8005b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b12:	d103      	bne.n	8005b1c <xQueueGenericSend+0x16c>
 8005b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b22:	b25b      	sxtb	r3, r3
 8005b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b28:	d103      	bne.n	8005b32 <xQueueGenericSend+0x182>
 8005b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b32:	f002 f97f 	bl	8007e34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b36:	1d3a      	adds	r2, r7, #4
 8005b38:	f107 0314 	add.w	r3, r7, #20
 8005b3c:	4611      	mov	r1, r2
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f001 f9a8 	bl	8006e94 <xTaskCheckForTimeOut>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d124      	bne.n	8005b94 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005b4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b4c:	f000 fc52 	bl	80063f4 <prvIsQueueFull>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d018      	beq.n	8005b88 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b58:	3310      	adds	r3, #16
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	4611      	mov	r1, r2
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f001 f8ce 	bl	8006d00 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005b64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b66:	f000 fbdd 	bl	8006324 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005b6a:	f000 ff03 	bl	8006974 <xTaskResumeAll>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f47f af7c 	bne.w	8005a6e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005b76:	4b0c      	ldr	r3, [pc, #48]	; (8005ba8 <xQueueGenericSend+0x1f8>)
 8005b78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b7c:	601a      	str	r2, [r3, #0]
 8005b7e:	f3bf 8f4f 	dsb	sy
 8005b82:	f3bf 8f6f 	isb	sy
 8005b86:	e772      	b.n	8005a6e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005b88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b8a:	f000 fbcb 	bl	8006324 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b8e:	f000 fef1 	bl	8006974 <xTaskResumeAll>
 8005b92:	e76c      	b.n	8005a6e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005b94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b96:	f000 fbc5 	bl	8006324 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b9a:	f000 feeb 	bl	8006974 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005b9e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3738      	adds	r7, #56	; 0x38
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	e000ed04 	.word	0xe000ed04

08005bac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b090      	sub	sp, #64	; 0x40
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	607a      	str	r2, [r7, #4]
 8005bb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d10a      	bne.n	8005bda <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc8:	f383 8811 	msr	BASEPRI, r3
 8005bcc:	f3bf 8f6f 	isb	sy
 8005bd0:	f3bf 8f4f 	dsb	sy
 8005bd4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005bd6:	bf00      	nop
 8005bd8:	e7fe      	b.n	8005bd8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d103      	bne.n	8005be8 <xQueueGenericSendFromISR+0x3c>
 8005be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d101      	bne.n	8005bec <xQueueGenericSendFromISR+0x40>
 8005be8:	2301      	movs	r3, #1
 8005bea:	e000      	b.n	8005bee <xQueueGenericSendFromISR+0x42>
 8005bec:	2300      	movs	r3, #0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d10a      	bne.n	8005c08 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf6:	f383 8811 	msr	BASEPRI, r3
 8005bfa:	f3bf 8f6f 	isb	sy
 8005bfe:	f3bf 8f4f 	dsb	sy
 8005c02:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005c04:	bf00      	nop
 8005c06:	e7fe      	b.n	8005c06 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d103      	bne.n	8005c16 <xQueueGenericSendFromISR+0x6a>
 8005c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d101      	bne.n	8005c1a <xQueueGenericSendFromISR+0x6e>
 8005c16:	2301      	movs	r3, #1
 8005c18:	e000      	b.n	8005c1c <xQueueGenericSendFromISR+0x70>
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d10a      	bne.n	8005c36 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c24:	f383 8811 	msr	BASEPRI, r3
 8005c28:	f3bf 8f6f 	isb	sy
 8005c2c:	f3bf 8f4f 	dsb	sy
 8005c30:	623b      	str	r3, [r7, #32]
}
 8005c32:	bf00      	nop
 8005c34:	e7fe      	b.n	8005c34 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005c36:	f002 f9af 	bl	8007f98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005c3a:	f3ef 8211 	mrs	r2, BASEPRI
 8005c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c42:	f383 8811 	msr	BASEPRI, r3
 8005c46:	f3bf 8f6f 	isb	sy
 8005c4a:	f3bf 8f4f 	dsb	sy
 8005c4e:	61fa      	str	r2, [r7, #28]
 8005c50:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005c52:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005c54:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d302      	bcc.n	8005c68 <xQueueGenericSendFromISR+0xbc>
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	2b02      	cmp	r3, #2
 8005c66:	d12f      	bne.n	8005cc8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c76:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c78:	683a      	ldr	r2, [r7, #0]
 8005c7a:	68b9      	ldr	r1, [r7, #8]
 8005c7c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005c7e:	f000 fac1 	bl	8006204 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005c82:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c8a:	d112      	bne.n	8005cb2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d016      	beq.n	8005cc2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c96:	3324      	adds	r3, #36	; 0x24
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f001 f881 	bl	8006da0 <xTaskRemoveFromEventList>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d00e      	beq.n	8005cc2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00b      	beq.n	8005cc2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2201      	movs	r2, #1
 8005cae:	601a      	str	r2, [r3, #0]
 8005cb0:	e007      	b.n	8005cc2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005cb2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	b25a      	sxtb	r2, r3
 8005cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005cc6:	e001      	b.n	8005ccc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cce:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005cd6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3740      	adds	r7, #64	; 0x40
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}

08005ce2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005ce2:	b580      	push	{r7, lr}
 8005ce4:	b08e      	sub	sp, #56	; 0x38
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
 8005cea:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d10a      	bne.n	8005d0c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8005cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cfa:	f383 8811 	msr	BASEPRI, r3
 8005cfe:	f3bf 8f6f 	isb	sy
 8005d02:	f3bf 8f4f 	dsb	sy
 8005d06:	623b      	str	r3, [r7, #32]
}
 8005d08:	bf00      	nop
 8005d0a:	e7fe      	b.n	8005d0a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d00a      	beq.n	8005d2a <xQueueGiveFromISR+0x48>
	__asm volatile
 8005d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d18:	f383 8811 	msr	BASEPRI, r3
 8005d1c:	f3bf 8f6f 	isb	sy
 8005d20:	f3bf 8f4f 	dsb	sy
 8005d24:	61fb      	str	r3, [r7, #28]
}
 8005d26:	bf00      	nop
 8005d28:	e7fe      	b.n	8005d28 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d103      	bne.n	8005d3a <xQueueGiveFromISR+0x58>
 8005d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d101      	bne.n	8005d3e <xQueueGiveFromISR+0x5c>
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e000      	b.n	8005d40 <xQueueGiveFromISR+0x5e>
 8005d3e:	2300      	movs	r3, #0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d10a      	bne.n	8005d5a <xQueueGiveFromISR+0x78>
	__asm volatile
 8005d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d48:	f383 8811 	msr	BASEPRI, r3
 8005d4c:	f3bf 8f6f 	isb	sy
 8005d50:	f3bf 8f4f 	dsb	sy
 8005d54:	61bb      	str	r3, [r7, #24]
}
 8005d56:	bf00      	nop
 8005d58:	e7fe      	b.n	8005d58 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d5a:	f002 f91d 	bl	8007f98 <vPortValidateInterruptPriority>
	__asm volatile
 8005d5e:	f3ef 8211 	mrs	r2, BASEPRI
 8005d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d66:	f383 8811 	msr	BASEPRI, r3
 8005d6a:	f3bf 8f6f 	isb	sy
 8005d6e:	f3bf 8f4f 	dsb	sy
 8005d72:	617a      	str	r2, [r7, #20]
 8005d74:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005d76:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d78:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d7e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d22b      	bcs.n	8005de2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d96:	1c5a      	adds	r2, r3, #1
 8005d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d9a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005d9c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da4:	d112      	bne.n	8005dcc <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d016      	beq.n	8005ddc <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db0:	3324      	adds	r3, #36	; 0x24
 8005db2:	4618      	mov	r0, r3
 8005db4:	f000 fff4 	bl	8006da0 <xTaskRemoveFromEventList>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00e      	beq.n	8005ddc <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00b      	beq.n	8005ddc <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	601a      	str	r2, [r3, #0]
 8005dca:	e007      	b.n	8005ddc <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005dcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	b25a      	sxtb	r2, r3
 8005dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	637b      	str	r3, [r7, #52]	; 0x34
 8005de0:	e001      	b.n	8005de6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005de2:	2300      	movs	r3, #0
 8005de4:	637b      	str	r3, [r7, #52]	; 0x34
 8005de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f383 8811 	msr	BASEPRI, r3
}
 8005df0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3738      	adds	r7, #56	; 0x38
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b08c      	sub	sp, #48	; 0x30
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d10a      	bne.n	8005e2c <xQueueReceive+0x30>
	__asm volatile
 8005e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e1a:	f383 8811 	msr	BASEPRI, r3
 8005e1e:	f3bf 8f6f 	isb	sy
 8005e22:	f3bf 8f4f 	dsb	sy
 8005e26:	623b      	str	r3, [r7, #32]
}
 8005e28:	bf00      	nop
 8005e2a:	e7fe      	b.n	8005e2a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d103      	bne.n	8005e3a <xQueueReceive+0x3e>
 8005e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d101      	bne.n	8005e3e <xQueueReceive+0x42>
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e000      	b.n	8005e40 <xQueueReceive+0x44>
 8005e3e:	2300      	movs	r3, #0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d10a      	bne.n	8005e5a <xQueueReceive+0x5e>
	__asm volatile
 8005e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e48:	f383 8811 	msr	BASEPRI, r3
 8005e4c:	f3bf 8f6f 	isb	sy
 8005e50:	f3bf 8f4f 	dsb	sy
 8005e54:	61fb      	str	r3, [r7, #28]
}
 8005e56:	bf00      	nop
 8005e58:	e7fe      	b.n	8005e58 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e5a:	f001 f95f 	bl	800711c <xTaskGetSchedulerState>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d102      	bne.n	8005e6a <xQueueReceive+0x6e>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d101      	bne.n	8005e6e <xQueueReceive+0x72>
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e000      	b.n	8005e70 <xQueueReceive+0x74>
 8005e6e:	2300      	movs	r3, #0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d10a      	bne.n	8005e8a <xQueueReceive+0x8e>
	__asm volatile
 8005e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e78:	f383 8811 	msr	BASEPRI, r3
 8005e7c:	f3bf 8f6f 	isb	sy
 8005e80:	f3bf 8f4f 	dsb	sy
 8005e84:	61bb      	str	r3, [r7, #24]
}
 8005e86:	bf00      	nop
 8005e88:	e7fe      	b.n	8005e88 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e8a:	f001 ffa3 	bl	8007dd4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e92:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d01f      	beq.n	8005eda <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005e9a:	68b9      	ldr	r1, [r7, #8]
 8005e9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e9e:	f000 fa1b 	bl	80062d8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea4:	1e5a      	subs	r2, r3, #1
 8005ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00f      	beq.n	8005ed2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb4:	3310      	adds	r3, #16
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f000 ff72 	bl	8006da0 <xTaskRemoveFromEventList>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d007      	beq.n	8005ed2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005ec2:	4b3d      	ldr	r3, [pc, #244]	; (8005fb8 <xQueueReceive+0x1bc>)
 8005ec4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ec8:	601a      	str	r2, [r3, #0]
 8005eca:	f3bf 8f4f 	dsb	sy
 8005ece:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005ed2:	f001 ffaf 	bl	8007e34 <vPortExitCritical>
				return pdPASS;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e069      	b.n	8005fae <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d103      	bne.n	8005ee8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005ee0:	f001 ffa8 	bl	8007e34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	e062      	b.n	8005fae <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d106      	bne.n	8005efc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005eee:	f107 0310 	add.w	r3, r7, #16
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f000 ffb8 	bl	8006e68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005efc:	f001 ff9a 	bl	8007e34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f00:	f000 fd2a 	bl	8006958 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f04:	f001 ff66 	bl	8007dd4 <vPortEnterCritical>
 8005f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f0e:	b25b      	sxtb	r3, r3
 8005f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f14:	d103      	bne.n	8005f1e <xQueueReceive+0x122>
 8005f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f24:	b25b      	sxtb	r3, r3
 8005f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f2a:	d103      	bne.n	8005f34 <xQueueReceive+0x138>
 8005f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f34:	f001 ff7e 	bl	8007e34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f38:	1d3a      	adds	r2, r7, #4
 8005f3a:	f107 0310 	add.w	r3, r7, #16
 8005f3e:	4611      	mov	r1, r2
 8005f40:	4618      	mov	r0, r3
 8005f42:	f000 ffa7 	bl	8006e94 <xTaskCheckForTimeOut>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d123      	bne.n	8005f94 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f4e:	f000 fa3b 	bl	80063c8 <prvIsQueueEmpty>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d017      	beq.n	8005f88 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f5a:	3324      	adds	r3, #36	; 0x24
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	4611      	mov	r1, r2
 8005f60:	4618      	mov	r0, r3
 8005f62:	f000 fecd 	bl	8006d00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005f66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f68:	f000 f9dc 	bl	8006324 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005f6c:	f000 fd02 	bl	8006974 <xTaskResumeAll>
 8005f70:	4603      	mov	r3, r0
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d189      	bne.n	8005e8a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005f76:	4b10      	ldr	r3, [pc, #64]	; (8005fb8 <xQueueReceive+0x1bc>)
 8005f78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f7c:	601a      	str	r2, [r3, #0]
 8005f7e:	f3bf 8f4f 	dsb	sy
 8005f82:	f3bf 8f6f 	isb	sy
 8005f86:	e780      	b.n	8005e8a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005f88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f8a:	f000 f9cb 	bl	8006324 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f8e:	f000 fcf1 	bl	8006974 <xTaskResumeAll>
 8005f92:	e77a      	b.n	8005e8a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005f94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f96:	f000 f9c5 	bl	8006324 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f9a:	f000 fceb 	bl	8006974 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fa0:	f000 fa12 	bl	80063c8 <prvIsQueueEmpty>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	f43f af6f 	beq.w	8005e8a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005fac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3730      	adds	r7, #48	; 0x30
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	bf00      	nop
 8005fb8:	e000ed04 	.word	0xe000ed04

08005fbc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b08e      	sub	sp, #56	; 0x38
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d10a      	bne.n	8005fee <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fdc:	f383 8811 	msr	BASEPRI, r3
 8005fe0:	f3bf 8f6f 	isb	sy
 8005fe4:	f3bf 8f4f 	dsb	sy
 8005fe8:	623b      	str	r3, [r7, #32]
}
 8005fea:	bf00      	nop
 8005fec:	e7fe      	b.n	8005fec <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00a      	beq.n	800600c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ffa:	f383 8811 	msr	BASEPRI, r3
 8005ffe:	f3bf 8f6f 	isb	sy
 8006002:	f3bf 8f4f 	dsb	sy
 8006006:	61fb      	str	r3, [r7, #28]
}
 8006008:	bf00      	nop
 800600a:	e7fe      	b.n	800600a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800600c:	f001 f886 	bl	800711c <xTaskGetSchedulerState>
 8006010:	4603      	mov	r3, r0
 8006012:	2b00      	cmp	r3, #0
 8006014:	d102      	bne.n	800601c <xQueueSemaphoreTake+0x60>
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d101      	bne.n	8006020 <xQueueSemaphoreTake+0x64>
 800601c:	2301      	movs	r3, #1
 800601e:	e000      	b.n	8006022 <xQueueSemaphoreTake+0x66>
 8006020:	2300      	movs	r3, #0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d10a      	bne.n	800603c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602a:	f383 8811 	msr	BASEPRI, r3
 800602e:	f3bf 8f6f 	isb	sy
 8006032:	f3bf 8f4f 	dsb	sy
 8006036:	61bb      	str	r3, [r7, #24]
}
 8006038:	bf00      	nop
 800603a:	e7fe      	b.n	800603a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800603c:	f001 feca 	bl	8007dd4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006044:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006048:	2b00      	cmp	r3, #0
 800604a:	d024      	beq.n	8006096 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800604c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604e:	1e5a      	subs	r2, r3, #1
 8006050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006052:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d104      	bne.n	8006066 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800605c:	f001 f9d4 	bl	8007408 <pvTaskIncrementMutexHeldCount>
 8006060:	4602      	mov	r2, r0
 8006062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006064:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00f      	beq.n	800608e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800606e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006070:	3310      	adds	r3, #16
 8006072:	4618      	mov	r0, r3
 8006074:	f000 fe94 	bl	8006da0 <xTaskRemoveFromEventList>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d007      	beq.n	800608e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800607e:	4b54      	ldr	r3, [pc, #336]	; (80061d0 <xQueueSemaphoreTake+0x214>)
 8006080:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006084:	601a      	str	r2, [r3, #0]
 8006086:	f3bf 8f4f 	dsb	sy
 800608a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800608e:	f001 fed1 	bl	8007e34 <vPortExitCritical>
				return pdPASS;
 8006092:	2301      	movs	r3, #1
 8006094:	e097      	b.n	80061c6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d111      	bne.n	80060c0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800609c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d00a      	beq.n	80060b8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80060a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a6:	f383 8811 	msr	BASEPRI, r3
 80060aa:	f3bf 8f6f 	isb	sy
 80060ae:	f3bf 8f4f 	dsb	sy
 80060b2:	617b      	str	r3, [r7, #20]
}
 80060b4:	bf00      	nop
 80060b6:	e7fe      	b.n	80060b6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80060b8:	f001 febc 	bl	8007e34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80060bc:	2300      	movs	r3, #0
 80060be:	e082      	b.n	80061c6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80060c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d106      	bne.n	80060d4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80060c6:	f107 030c 	add.w	r3, r7, #12
 80060ca:	4618      	mov	r0, r3
 80060cc:	f000 fecc 	bl	8006e68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80060d0:	2301      	movs	r3, #1
 80060d2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80060d4:	f001 feae 	bl	8007e34 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80060d8:	f000 fc3e 	bl	8006958 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80060dc:	f001 fe7a 	bl	8007dd4 <vPortEnterCritical>
 80060e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060e6:	b25b      	sxtb	r3, r3
 80060e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ec:	d103      	bne.n	80060f6 <xQueueSemaphoreTake+0x13a>
 80060ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f0:	2200      	movs	r2, #0
 80060f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060fc:	b25b      	sxtb	r3, r3
 80060fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006102:	d103      	bne.n	800610c <xQueueSemaphoreTake+0x150>
 8006104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006106:	2200      	movs	r2, #0
 8006108:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800610c:	f001 fe92 	bl	8007e34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006110:	463a      	mov	r2, r7
 8006112:	f107 030c 	add.w	r3, r7, #12
 8006116:	4611      	mov	r1, r2
 8006118:	4618      	mov	r0, r3
 800611a:	f000 febb 	bl	8006e94 <xTaskCheckForTimeOut>
 800611e:	4603      	mov	r3, r0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d132      	bne.n	800618a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006124:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006126:	f000 f94f 	bl	80063c8 <prvIsQueueEmpty>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d026      	beq.n	800617e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d109      	bne.n	800614c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006138:	f001 fe4c 	bl	8007dd4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800613c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	4618      	mov	r0, r3
 8006142:	f001 f809 	bl	8007158 <xTaskPriorityInherit>
 8006146:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006148:	f001 fe74 	bl	8007e34 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800614c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800614e:	3324      	adds	r3, #36	; 0x24
 8006150:	683a      	ldr	r2, [r7, #0]
 8006152:	4611      	mov	r1, r2
 8006154:	4618      	mov	r0, r3
 8006156:	f000 fdd3 	bl	8006d00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800615a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800615c:	f000 f8e2 	bl	8006324 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006160:	f000 fc08 	bl	8006974 <xTaskResumeAll>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	f47f af68 	bne.w	800603c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800616c:	4b18      	ldr	r3, [pc, #96]	; (80061d0 <xQueueSemaphoreTake+0x214>)
 800616e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006172:	601a      	str	r2, [r3, #0]
 8006174:	f3bf 8f4f 	dsb	sy
 8006178:	f3bf 8f6f 	isb	sy
 800617c:	e75e      	b.n	800603c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800617e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006180:	f000 f8d0 	bl	8006324 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006184:	f000 fbf6 	bl	8006974 <xTaskResumeAll>
 8006188:	e758      	b.n	800603c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800618a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800618c:	f000 f8ca 	bl	8006324 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006190:	f000 fbf0 	bl	8006974 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006194:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006196:	f000 f917 	bl	80063c8 <prvIsQueueEmpty>
 800619a:	4603      	mov	r3, r0
 800619c:	2b00      	cmp	r3, #0
 800619e:	f43f af4d 	beq.w	800603c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80061a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d00d      	beq.n	80061c4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80061a8:	f001 fe14 	bl	8007dd4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80061ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80061ae:	f000 f811 	bl	80061d4 <prvGetDisinheritPriorityAfterTimeout>
 80061b2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80061b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80061ba:	4618      	mov	r0, r3
 80061bc:	f001 f8a2 	bl	8007304 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80061c0:	f001 fe38 	bl	8007e34 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80061c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3738      	adds	r7, #56	; 0x38
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	e000ed04 	.word	0xe000ed04

080061d4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80061d4:	b480      	push	{r7}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d006      	beq.n	80061f2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80061ee:	60fb      	str	r3, [r7, #12]
 80061f0:	e001      	b.n	80061f6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80061f2:	2300      	movs	r3, #0
 80061f4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80061f6:	68fb      	ldr	r3, [r7, #12]
	}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3714      	adds	r7, #20
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b086      	sub	sp, #24
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006210:	2300      	movs	r3, #0
 8006212:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006218:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621e:	2b00      	cmp	r3, #0
 8006220:	d10d      	bne.n	800623e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d14d      	bne.n	80062c6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	4618      	mov	r0, r3
 8006230:	f000 fffa 	bl	8007228 <xTaskPriorityDisinherit>
 8006234:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2200      	movs	r2, #0
 800623a:	609a      	str	r2, [r3, #8]
 800623c:	e043      	b.n	80062c6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d119      	bne.n	8006278 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6858      	ldr	r0, [r3, #4]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800624c:	461a      	mov	r2, r3
 800624e:	68b9      	ldr	r1, [r7, #8]
 8006250:	f002 f8f0 	bl	8008434 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	685a      	ldr	r2, [r3, #4]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625c:	441a      	add	r2, r3
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	685a      	ldr	r2, [r3, #4]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	429a      	cmp	r2, r3
 800626c:	d32b      	bcc.n	80062c6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	605a      	str	r2, [r3, #4]
 8006276:	e026      	b.n	80062c6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	68d8      	ldr	r0, [r3, #12]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006280:	461a      	mov	r2, r3
 8006282:	68b9      	ldr	r1, [r7, #8]
 8006284:	f002 f8d6 	bl	8008434 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	68da      	ldr	r2, [r3, #12]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006290:	425b      	negs	r3, r3
 8006292:	441a      	add	r2, r3
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	68da      	ldr	r2, [r3, #12]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d207      	bcs.n	80062b4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	689a      	ldr	r2, [r3, #8]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ac:	425b      	negs	r3, r3
 80062ae:	441a      	add	r2, r3
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d105      	bne.n	80062c6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d002      	beq.n	80062c6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	3b01      	subs	r3, #1
 80062c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	1c5a      	adds	r2, r3, #1
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80062ce:	697b      	ldr	r3, [r7, #20]
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3718      	adds	r7, #24
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d018      	beq.n	800631c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	68da      	ldr	r2, [r3, #12]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f2:	441a      	add	r2, r3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	68da      	ldr	r2, [r3, #12]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	429a      	cmp	r2, r3
 8006302:	d303      	bcc.n	800630c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	68d9      	ldr	r1, [r3, #12]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006314:	461a      	mov	r2, r3
 8006316:	6838      	ldr	r0, [r7, #0]
 8006318:	f002 f88c 	bl	8008434 <memcpy>
	}
}
 800631c:	bf00      	nop
 800631e:	3708      	adds	r7, #8
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800632c:	f001 fd52 	bl	8007dd4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006336:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006338:	e011      	b.n	800635e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633e:	2b00      	cmp	r3, #0
 8006340:	d012      	beq.n	8006368 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	3324      	adds	r3, #36	; 0x24
 8006346:	4618      	mov	r0, r3
 8006348:	f000 fd2a 	bl	8006da0 <xTaskRemoveFromEventList>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d001      	beq.n	8006356 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006352:	f000 fe01 	bl	8006f58 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006356:	7bfb      	ldrb	r3, [r7, #15]
 8006358:	3b01      	subs	r3, #1
 800635a:	b2db      	uxtb	r3, r3
 800635c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800635e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006362:	2b00      	cmp	r3, #0
 8006364:	dce9      	bgt.n	800633a <prvUnlockQueue+0x16>
 8006366:	e000      	b.n	800636a <prvUnlockQueue+0x46>
					break;
 8006368:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	22ff      	movs	r2, #255	; 0xff
 800636e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006372:	f001 fd5f 	bl	8007e34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006376:	f001 fd2d 	bl	8007dd4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006380:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006382:	e011      	b.n	80063a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	691b      	ldr	r3, [r3, #16]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d012      	beq.n	80063b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	3310      	adds	r3, #16
 8006390:	4618      	mov	r0, r3
 8006392:	f000 fd05 	bl	8006da0 <xTaskRemoveFromEventList>
 8006396:	4603      	mov	r3, r0
 8006398:	2b00      	cmp	r3, #0
 800639a:	d001      	beq.n	80063a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800639c:	f000 fddc 	bl	8006f58 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80063a0:	7bbb      	ldrb	r3, [r7, #14]
 80063a2:	3b01      	subs	r3, #1
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80063a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	dce9      	bgt.n	8006384 <prvUnlockQueue+0x60>
 80063b0:	e000      	b.n	80063b4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80063b2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	22ff      	movs	r2, #255	; 0xff
 80063b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80063bc:	f001 fd3a 	bl	8007e34 <vPortExitCritical>
}
 80063c0:	bf00      	nop
 80063c2:	3710      	adds	r7, #16
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80063d0:	f001 fd00 	bl	8007dd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d102      	bne.n	80063e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80063dc:	2301      	movs	r3, #1
 80063de:	60fb      	str	r3, [r7, #12]
 80063e0:	e001      	b.n	80063e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80063e2:	2300      	movs	r3, #0
 80063e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80063e6:	f001 fd25 	bl	8007e34 <vPortExitCritical>

	return xReturn;
 80063ea:	68fb      	ldr	r3, [r7, #12]
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3710      	adds	r7, #16
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80063fc:	f001 fcea 	bl	8007dd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006408:	429a      	cmp	r2, r3
 800640a:	d102      	bne.n	8006412 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800640c:	2301      	movs	r3, #1
 800640e:	60fb      	str	r3, [r7, #12]
 8006410:	e001      	b.n	8006416 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006412:	2300      	movs	r3, #0
 8006414:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006416:	f001 fd0d 	bl	8007e34 <vPortExitCritical>

	return xReturn;
 800641a:	68fb      	ldr	r3, [r7, #12]
}
 800641c:	4618      	mov	r0, r3
 800641e:	3710      	adds	r7, #16
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006424:	b480      	push	{r7}
 8006426:	b085      	sub	sp, #20
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800642e:	2300      	movs	r3, #0
 8006430:	60fb      	str	r3, [r7, #12]
 8006432:	e014      	b.n	800645e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006434:	4a0f      	ldr	r2, [pc, #60]	; (8006474 <vQueueAddToRegistry+0x50>)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d10b      	bne.n	8006458 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006440:	490c      	ldr	r1, [pc, #48]	; (8006474 <vQueueAddToRegistry+0x50>)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	683a      	ldr	r2, [r7, #0]
 8006446:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800644a:	4a0a      	ldr	r2, [pc, #40]	; (8006474 <vQueueAddToRegistry+0x50>)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	00db      	lsls	r3, r3, #3
 8006450:	4413      	add	r3, r2
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006456:	e006      	b.n	8006466 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	3301      	adds	r3, #1
 800645c:	60fb      	str	r3, [r7, #12]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2b07      	cmp	r3, #7
 8006462:	d9e7      	bls.n	8006434 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006464:	bf00      	nop
 8006466:	bf00      	nop
 8006468:	3714      	adds	r7, #20
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop
 8006474:	20000864 	.word	0x20000864

08006478 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006478:	b580      	push	{r7, lr}
 800647a:	b086      	sub	sp, #24
 800647c:	af00      	add	r7, sp, #0
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006488:	f001 fca4 	bl	8007dd4 <vPortEnterCritical>
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006492:	b25b      	sxtb	r3, r3
 8006494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006498:	d103      	bne.n	80064a2 <vQueueWaitForMessageRestricted+0x2a>
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	2200      	movs	r2, #0
 800649e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064a8:	b25b      	sxtb	r3, r3
 80064aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ae:	d103      	bne.n	80064b8 <vQueueWaitForMessageRestricted+0x40>
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	2200      	movs	r2, #0
 80064b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064b8:	f001 fcbc 	bl	8007e34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d106      	bne.n	80064d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	3324      	adds	r3, #36	; 0x24
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	68b9      	ldr	r1, [r7, #8]
 80064cc:	4618      	mov	r0, r3
 80064ce:	f000 fc3b 	bl	8006d48 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80064d2:	6978      	ldr	r0, [r7, #20]
 80064d4:	f7ff ff26 	bl	8006324 <prvUnlockQueue>
	}
 80064d8:	bf00      	nop
 80064da:	3718      	adds	r7, #24
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b08e      	sub	sp, #56	; 0x38
 80064e4:	af04      	add	r7, sp, #16
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	607a      	str	r2, [r7, #4]
 80064ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80064ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d10a      	bne.n	800650a <xTaskCreateStatic+0x2a>
	__asm volatile
 80064f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f8:	f383 8811 	msr	BASEPRI, r3
 80064fc:	f3bf 8f6f 	isb	sy
 8006500:	f3bf 8f4f 	dsb	sy
 8006504:	623b      	str	r3, [r7, #32]
}
 8006506:	bf00      	nop
 8006508:	e7fe      	b.n	8006508 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800650a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800650c:	2b00      	cmp	r3, #0
 800650e:	d10a      	bne.n	8006526 <xTaskCreateStatic+0x46>
	__asm volatile
 8006510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006514:	f383 8811 	msr	BASEPRI, r3
 8006518:	f3bf 8f6f 	isb	sy
 800651c:	f3bf 8f4f 	dsb	sy
 8006520:	61fb      	str	r3, [r7, #28]
}
 8006522:	bf00      	nop
 8006524:	e7fe      	b.n	8006524 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006526:	235c      	movs	r3, #92	; 0x5c
 8006528:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	2b5c      	cmp	r3, #92	; 0x5c
 800652e:	d00a      	beq.n	8006546 <xTaskCreateStatic+0x66>
	__asm volatile
 8006530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006534:	f383 8811 	msr	BASEPRI, r3
 8006538:	f3bf 8f6f 	isb	sy
 800653c:	f3bf 8f4f 	dsb	sy
 8006540:	61bb      	str	r3, [r7, #24]
}
 8006542:	bf00      	nop
 8006544:	e7fe      	b.n	8006544 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006546:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800654a:	2b00      	cmp	r3, #0
 800654c:	d01e      	beq.n	800658c <xTaskCreateStatic+0xac>
 800654e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006550:	2b00      	cmp	r3, #0
 8006552:	d01b      	beq.n	800658c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006556:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800655c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800655e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006560:	2202      	movs	r2, #2
 8006562:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006566:	2300      	movs	r3, #0
 8006568:	9303      	str	r3, [sp, #12]
 800656a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656c:	9302      	str	r3, [sp, #8]
 800656e:	f107 0314 	add.w	r3, r7, #20
 8006572:	9301      	str	r3, [sp, #4]
 8006574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006576:	9300      	str	r3, [sp, #0]
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	68b9      	ldr	r1, [r7, #8]
 800657e:	68f8      	ldr	r0, [r7, #12]
 8006580:	f000 f850 	bl	8006624 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006584:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006586:	f000 f8dd 	bl	8006744 <prvAddNewTaskToReadyList>
 800658a:	e001      	b.n	8006590 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800658c:	2300      	movs	r3, #0
 800658e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006590:	697b      	ldr	r3, [r7, #20]
	}
 8006592:	4618      	mov	r0, r3
 8006594:	3728      	adds	r7, #40	; 0x28
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}

0800659a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800659a:	b580      	push	{r7, lr}
 800659c:	b08c      	sub	sp, #48	; 0x30
 800659e:	af04      	add	r7, sp, #16
 80065a0:	60f8      	str	r0, [r7, #12]
 80065a2:	60b9      	str	r1, [r7, #8]
 80065a4:	603b      	str	r3, [r7, #0]
 80065a6:	4613      	mov	r3, r2
 80065a8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80065aa:	88fb      	ldrh	r3, [r7, #6]
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	4618      	mov	r0, r3
 80065b0:	f001 fd32 	bl	8008018 <pvPortMalloc>
 80065b4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d00e      	beq.n	80065da <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80065bc:	205c      	movs	r0, #92	; 0x5c
 80065be:	f001 fd2b 	bl	8008018 <pvPortMalloc>
 80065c2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d003      	beq.n	80065d2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80065ca:	69fb      	ldr	r3, [r7, #28]
 80065cc:	697a      	ldr	r2, [r7, #20]
 80065ce:	631a      	str	r2, [r3, #48]	; 0x30
 80065d0:	e005      	b.n	80065de <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80065d2:	6978      	ldr	r0, [r7, #20]
 80065d4:	f001 fdec 	bl	80081b0 <vPortFree>
 80065d8:	e001      	b.n	80065de <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80065da:	2300      	movs	r3, #0
 80065dc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d017      	beq.n	8006614 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80065ec:	88fa      	ldrh	r2, [r7, #6]
 80065ee:	2300      	movs	r3, #0
 80065f0:	9303      	str	r3, [sp, #12]
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	9302      	str	r3, [sp, #8]
 80065f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f8:	9301      	str	r3, [sp, #4]
 80065fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065fc:	9300      	str	r3, [sp, #0]
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	68b9      	ldr	r1, [r7, #8]
 8006602:	68f8      	ldr	r0, [r7, #12]
 8006604:	f000 f80e 	bl	8006624 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006608:	69f8      	ldr	r0, [r7, #28]
 800660a:	f000 f89b 	bl	8006744 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800660e:	2301      	movs	r3, #1
 8006610:	61bb      	str	r3, [r7, #24]
 8006612:	e002      	b.n	800661a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006614:	f04f 33ff 	mov.w	r3, #4294967295
 8006618:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800661a:	69bb      	ldr	r3, [r7, #24]
	}
 800661c:	4618      	mov	r0, r3
 800661e:	3720      	adds	r7, #32
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b088      	sub	sp, #32
 8006628:	af00      	add	r7, sp, #0
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	60b9      	str	r1, [r7, #8]
 800662e:	607a      	str	r2, [r7, #4]
 8006630:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006634:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	461a      	mov	r2, r3
 800663c:	21a5      	movs	r1, #165	; 0xa5
 800663e:	f001 ff07 	bl	8008450 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006644:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800664c:	3b01      	subs	r3, #1
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	4413      	add	r3, r2
 8006652:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006654:	69bb      	ldr	r3, [r7, #24]
 8006656:	f023 0307 	bic.w	r3, r3, #7
 800665a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	f003 0307 	and.w	r3, r3, #7
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00a      	beq.n	800667c <prvInitialiseNewTask+0x58>
	__asm volatile
 8006666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800666a:	f383 8811 	msr	BASEPRI, r3
 800666e:	f3bf 8f6f 	isb	sy
 8006672:	f3bf 8f4f 	dsb	sy
 8006676:	617b      	str	r3, [r7, #20]
}
 8006678:	bf00      	nop
 800667a:	e7fe      	b.n	800667a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d01f      	beq.n	80066c2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006682:	2300      	movs	r3, #0
 8006684:	61fb      	str	r3, [r7, #28]
 8006686:	e012      	b.n	80066ae <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006688:	68ba      	ldr	r2, [r7, #8]
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	4413      	add	r3, r2
 800668e:	7819      	ldrb	r1, [r3, #0]
 8006690:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	4413      	add	r3, r2
 8006696:	3334      	adds	r3, #52	; 0x34
 8006698:	460a      	mov	r2, r1
 800669a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800669c:	68ba      	ldr	r2, [r7, #8]
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	4413      	add	r3, r2
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d006      	beq.n	80066b6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	3301      	adds	r3, #1
 80066ac:	61fb      	str	r3, [r7, #28]
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	2b0f      	cmp	r3, #15
 80066b2:	d9e9      	bls.n	8006688 <prvInitialiseNewTask+0x64>
 80066b4:	e000      	b.n	80066b8 <prvInitialiseNewTask+0x94>
			{
				break;
 80066b6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80066b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80066c0:	e003      	b.n	80066ca <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80066c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c4:	2200      	movs	r2, #0
 80066c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80066ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066cc:	2b37      	cmp	r3, #55	; 0x37
 80066ce:	d901      	bls.n	80066d4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80066d0:	2337      	movs	r3, #55	; 0x37
 80066d2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80066d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066d8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80066da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066de:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80066e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e2:	2200      	movs	r2, #0
 80066e4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80066e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e8:	3304      	adds	r3, #4
 80066ea:	4618      	mov	r0, r3
 80066ec:	f7fe ff8e 	bl	800560c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80066f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f2:	3318      	adds	r3, #24
 80066f4:	4618      	mov	r0, r3
 80066f6:	f7fe ff89 	bl	800560c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80066fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066fe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006702:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006708:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800670a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800670c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800670e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006712:	2200      	movs	r2, #0
 8006714:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006718:	2200      	movs	r2, #0
 800671a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800671e:	683a      	ldr	r2, [r7, #0]
 8006720:	68f9      	ldr	r1, [r7, #12]
 8006722:	69b8      	ldr	r0, [r7, #24]
 8006724:	f001 fa26 	bl	8007b74 <pxPortInitialiseStack>
 8006728:	4602      	mov	r2, r0
 800672a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800672c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800672e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006730:	2b00      	cmp	r3, #0
 8006732:	d002      	beq.n	800673a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006736:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006738:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800673a:	bf00      	nop
 800673c:	3720      	adds	r7, #32
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
	...

08006744 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800674c:	f001 fb42 	bl	8007dd4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006750:	4b2d      	ldr	r3, [pc, #180]	; (8006808 <prvAddNewTaskToReadyList+0xc4>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	3301      	adds	r3, #1
 8006756:	4a2c      	ldr	r2, [pc, #176]	; (8006808 <prvAddNewTaskToReadyList+0xc4>)
 8006758:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800675a:	4b2c      	ldr	r3, [pc, #176]	; (800680c <prvAddNewTaskToReadyList+0xc8>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d109      	bne.n	8006776 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006762:	4a2a      	ldr	r2, [pc, #168]	; (800680c <prvAddNewTaskToReadyList+0xc8>)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006768:	4b27      	ldr	r3, [pc, #156]	; (8006808 <prvAddNewTaskToReadyList+0xc4>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	2b01      	cmp	r3, #1
 800676e:	d110      	bne.n	8006792 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006770:	f000 fc16 	bl	8006fa0 <prvInitialiseTaskLists>
 8006774:	e00d      	b.n	8006792 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006776:	4b26      	ldr	r3, [pc, #152]	; (8006810 <prvAddNewTaskToReadyList+0xcc>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d109      	bne.n	8006792 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800677e:	4b23      	ldr	r3, [pc, #140]	; (800680c <prvAddNewTaskToReadyList+0xc8>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006788:	429a      	cmp	r2, r3
 800678a:	d802      	bhi.n	8006792 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800678c:	4a1f      	ldr	r2, [pc, #124]	; (800680c <prvAddNewTaskToReadyList+0xc8>)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006792:	4b20      	ldr	r3, [pc, #128]	; (8006814 <prvAddNewTaskToReadyList+0xd0>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	3301      	adds	r3, #1
 8006798:	4a1e      	ldr	r2, [pc, #120]	; (8006814 <prvAddNewTaskToReadyList+0xd0>)
 800679a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800679c:	4b1d      	ldr	r3, [pc, #116]	; (8006814 <prvAddNewTaskToReadyList+0xd0>)
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067a8:	4b1b      	ldr	r3, [pc, #108]	; (8006818 <prvAddNewTaskToReadyList+0xd4>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d903      	bls.n	80067b8 <prvAddNewTaskToReadyList+0x74>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b4:	4a18      	ldr	r2, [pc, #96]	; (8006818 <prvAddNewTaskToReadyList+0xd4>)
 80067b6:	6013      	str	r3, [r2, #0]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067bc:	4613      	mov	r3, r2
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	4413      	add	r3, r2
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	4a15      	ldr	r2, [pc, #84]	; (800681c <prvAddNewTaskToReadyList+0xd8>)
 80067c6:	441a      	add	r2, r3
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	3304      	adds	r3, #4
 80067cc:	4619      	mov	r1, r3
 80067ce:	4610      	mov	r0, r2
 80067d0:	f7fe ff29 	bl	8005626 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80067d4:	f001 fb2e 	bl	8007e34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80067d8:	4b0d      	ldr	r3, [pc, #52]	; (8006810 <prvAddNewTaskToReadyList+0xcc>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d00e      	beq.n	80067fe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80067e0:	4b0a      	ldr	r3, [pc, #40]	; (800680c <prvAddNewTaskToReadyList+0xc8>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d207      	bcs.n	80067fe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80067ee:	4b0c      	ldr	r3, [pc, #48]	; (8006820 <prvAddNewTaskToReadyList+0xdc>)
 80067f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067f4:	601a      	str	r2, [r3, #0]
 80067f6:	f3bf 8f4f 	dsb	sy
 80067fa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80067fe:	bf00      	nop
 8006800:	3708      	adds	r7, #8
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	20000d78 	.word	0x20000d78
 800680c:	200008a4 	.word	0x200008a4
 8006810:	20000d84 	.word	0x20000d84
 8006814:	20000d94 	.word	0x20000d94
 8006818:	20000d80 	.word	0x20000d80
 800681c:	200008a8 	.word	0x200008a8
 8006820:	e000ed04 	.word	0xe000ed04

08006824 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800682c:	2300      	movs	r3, #0
 800682e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d017      	beq.n	8006866 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006836:	4b13      	ldr	r3, [pc, #76]	; (8006884 <vTaskDelay+0x60>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d00a      	beq.n	8006854 <vTaskDelay+0x30>
	__asm volatile
 800683e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006842:	f383 8811 	msr	BASEPRI, r3
 8006846:	f3bf 8f6f 	isb	sy
 800684a:	f3bf 8f4f 	dsb	sy
 800684e:	60bb      	str	r3, [r7, #8]
}
 8006850:	bf00      	nop
 8006852:	e7fe      	b.n	8006852 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006854:	f000 f880 	bl	8006958 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006858:	2100      	movs	r1, #0
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 fde8 	bl	8007430 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006860:	f000 f888 	bl	8006974 <xTaskResumeAll>
 8006864:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d107      	bne.n	800687c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800686c:	4b06      	ldr	r3, [pc, #24]	; (8006888 <vTaskDelay+0x64>)
 800686e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006872:	601a      	str	r2, [r3, #0]
 8006874:	f3bf 8f4f 	dsb	sy
 8006878:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800687c:	bf00      	nop
 800687e:	3710      	adds	r7, #16
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}
 8006884:	20000da0 	.word	0x20000da0
 8006888:	e000ed04 	.word	0xe000ed04

0800688c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b08a      	sub	sp, #40	; 0x28
 8006890:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006892:	2300      	movs	r3, #0
 8006894:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006896:	2300      	movs	r3, #0
 8006898:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800689a:	463a      	mov	r2, r7
 800689c:	1d39      	adds	r1, r7, #4
 800689e:	f107 0308 	add.w	r3, r7, #8
 80068a2:	4618      	mov	r0, r3
 80068a4:	f7fe fe5e 	bl	8005564 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80068a8:	6839      	ldr	r1, [r7, #0]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	68ba      	ldr	r2, [r7, #8]
 80068ae:	9202      	str	r2, [sp, #8]
 80068b0:	9301      	str	r3, [sp, #4]
 80068b2:	2300      	movs	r3, #0
 80068b4:	9300      	str	r3, [sp, #0]
 80068b6:	2300      	movs	r3, #0
 80068b8:	460a      	mov	r2, r1
 80068ba:	4921      	ldr	r1, [pc, #132]	; (8006940 <vTaskStartScheduler+0xb4>)
 80068bc:	4821      	ldr	r0, [pc, #132]	; (8006944 <vTaskStartScheduler+0xb8>)
 80068be:	f7ff fe0f 	bl	80064e0 <xTaskCreateStatic>
 80068c2:	4603      	mov	r3, r0
 80068c4:	4a20      	ldr	r2, [pc, #128]	; (8006948 <vTaskStartScheduler+0xbc>)
 80068c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80068c8:	4b1f      	ldr	r3, [pc, #124]	; (8006948 <vTaskStartScheduler+0xbc>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d002      	beq.n	80068d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80068d0:	2301      	movs	r3, #1
 80068d2:	617b      	str	r3, [r7, #20]
 80068d4:	e001      	b.n	80068da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80068d6:	2300      	movs	r3, #0
 80068d8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d102      	bne.n	80068e6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80068e0:	f000 fdfa 	bl	80074d8 <xTimerCreateTimerTask>
 80068e4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d116      	bne.n	800691a <vTaskStartScheduler+0x8e>
	__asm volatile
 80068ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f0:	f383 8811 	msr	BASEPRI, r3
 80068f4:	f3bf 8f6f 	isb	sy
 80068f8:	f3bf 8f4f 	dsb	sy
 80068fc:	613b      	str	r3, [r7, #16]
}
 80068fe:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006900:	4b12      	ldr	r3, [pc, #72]	; (800694c <vTaskStartScheduler+0xc0>)
 8006902:	f04f 32ff 	mov.w	r2, #4294967295
 8006906:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006908:	4b11      	ldr	r3, [pc, #68]	; (8006950 <vTaskStartScheduler+0xc4>)
 800690a:	2201      	movs	r2, #1
 800690c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800690e:	4b11      	ldr	r3, [pc, #68]	; (8006954 <vTaskStartScheduler+0xc8>)
 8006910:	2200      	movs	r2, #0
 8006912:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006914:	f001 f9bc 	bl	8007c90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006918:	e00e      	b.n	8006938 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006920:	d10a      	bne.n	8006938 <vTaskStartScheduler+0xac>
	__asm volatile
 8006922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006926:	f383 8811 	msr	BASEPRI, r3
 800692a:	f3bf 8f6f 	isb	sy
 800692e:	f3bf 8f4f 	dsb	sy
 8006932:	60fb      	str	r3, [r7, #12]
}
 8006934:	bf00      	nop
 8006936:	e7fe      	b.n	8006936 <vTaskStartScheduler+0xaa>
}
 8006938:	bf00      	nop
 800693a:	3718      	adds	r7, #24
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}
 8006940:	08008548 	.word	0x08008548
 8006944:	08006f71 	.word	0x08006f71
 8006948:	20000d9c 	.word	0x20000d9c
 800694c:	20000d98 	.word	0x20000d98
 8006950:	20000d84 	.word	0x20000d84
 8006954:	20000d7c 	.word	0x20000d7c

08006958 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006958:	b480      	push	{r7}
 800695a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800695c:	4b04      	ldr	r3, [pc, #16]	; (8006970 <vTaskSuspendAll+0x18>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	3301      	adds	r3, #1
 8006962:	4a03      	ldr	r2, [pc, #12]	; (8006970 <vTaskSuspendAll+0x18>)
 8006964:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006966:	bf00      	nop
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr
 8006970:	20000da0 	.word	0x20000da0

08006974 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800697a:	2300      	movs	r3, #0
 800697c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800697e:	2300      	movs	r3, #0
 8006980:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006982:	4b42      	ldr	r3, [pc, #264]	; (8006a8c <xTaskResumeAll+0x118>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d10a      	bne.n	80069a0 <xTaskResumeAll+0x2c>
	__asm volatile
 800698a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698e:	f383 8811 	msr	BASEPRI, r3
 8006992:	f3bf 8f6f 	isb	sy
 8006996:	f3bf 8f4f 	dsb	sy
 800699a:	603b      	str	r3, [r7, #0]
}
 800699c:	bf00      	nop
 800699e:	e7fe      	b.n	800699e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80069a0:	f001 fa18 	bl	8007dd4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80069a4:	4b39      	ldr	r3, [pc, #228]	; (8006a8c <xTaskResumeAll+0x118>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	3b01      	subs	r3, #1
 80069aa:	4a38      	ldr	r2, [pc, #224]	; (8006a8c <xTaskResumeAll+0x118>)
 80069ac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069ae:	4b37      	ldr	r3, [pc, #220]	; (8006a8c <xTaskResumeAll+0x118>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d162      	bne.n	8006a7c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80069b6:	4b36      	ldr	r3, [pc, #216]	; (8006a90 <xTaskResumeAll+0x11c>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d05e      	beq.n	8006a7c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80069be:	e02f      	b.n	8006a20 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069c0:	4b34      	ldr	r3, [pc, #208]	; (8006a94 <xTaskResumeAll+0x120>)
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	3318      	adds	r3, #24
 80069cc:	4618      	mov	r0, r3
 80069ce:	f7fe fe87 	bl	80056e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	3304      	adds	r3, #4
 80069d6:	4618      	mov	r0, r3
 80069d8:	f7fe fe82 	bl	80056e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069e0:	4b2d      	ldr	r3, [pc, #180]	; (8006a98 <xTaskResumeAll+0x124>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d903      	bls.n	80069f0 <xTaskResumeAll+0x7c>
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ec:	4a2a      	ldr	r2, [pc, #168]	; (8006a98 <xTaskResumeAll+0x124>)
 80069ee:	6013      	str	r3, [r2, #0]
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069f4:	4613      	mov	r3, r2
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	4413      	add	r3, r2
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	4a27      	ldr	r2, [pc, #156]	; (8006a9c <xTaskResumeAll+0x128>)
 80069fe:	441a      	add	r2, r3
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	3304      	adds	r3, #4
 8006a04:	4619      	mov	r1, r3
 8006a06:	4610      	mov	r0, r2
 8006a08:	f7fe fe0d 	bl	8005626 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a10:	4b23      	ldr	r3, [pc, #140]	; (8006aa0 <xTaskResumeAll+0x12c>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d302      	bcc.n	8006a20 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006a1a:	4b22      	ldr	r3, [pc, #136]	; (8006aa4 <xTaskResumeAll+0x130>)
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a20:	4b1c      	ldr	r3, [pc, #112]	; (8006a94 <xTaskResumeAll+0x120>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d1cb      	bne.n	80069c0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d001      	beq.n	8006a32 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006a2e:	f000 fb55 	bl	80070dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006a32:	4b1d      	ldr	r3, [pc, #116]	; (8006aa8 <xTaskResumeAll+0x134>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d010      	beq.n	8006a60 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006a3e:	f000 f847 	bl	8006ad0 <xTaskIncrementTick>
 8006a42:	4603      	mov	r3, r0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d002      	beq.n	8006a4e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006a48:	4b16      	ldr	r3, [pc, #88]	; (8006aa4 <xTaskResumeAll+0x130>)
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	3b01      	subs	r3, #1
 8006a52:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d1f1      	bne.n	8006a3e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006a5a:	4b13      	ldr	r3, [pc, #76]	; (8006aa8 <xTaskResumeAll+0x134>)
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006a60:	4b10      	ldr	r3, [pc, #64]	; (8006aa4 <xTaskResumeAll+0x130>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d009      	beq.n	8006a7c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006a6c:	4b0f      	ldr	r3, [pc, #60]	; (8006aac <xTaskResumeAll+0x138>)
 8006a6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a72:	601a      	str	r2, [r3, #0]
 8006a74:	f3bf 8f4f 	dsb	sy
 8006a78:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006a7c:	f001 f9da 	bl	8007e34 <vPortExitCritical>

	return xAlreadyYielded;
 8006a80:	68bb      	ldr	r3, [r7, #8]
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3710      	adds	r7, #16
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
 8006a8a:	bf00      	nop
 8006a8c:	20000da0 	.word	0x20000da0
 8006a90:	20000d78 	.word	0x20000d78
 8006a94:	20000d38 	.word	0x20000d38
 8006a98:	20000d80 	.word	0x20000d80
 8006a9c:	200008a8 	.word	0x200008a8
 8006aa0:	200008a4 	.word	0x200008a4
 8006aa4:	20000d8c 	.word	0x20000d8c
 8006aa8:	20000d88 	.word	0x20000d88
 8006aac:	e000ed04 	.word	0xe000ed04

08006ab0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006ab6:	4b05      	ldr	r3, [pc, #20]	; (8006acc <xTaskGetTickCount+0x1c>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006abc:	687b      	ldr	r3, [r7, #4]
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	370c      	adds	r7, #12
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr
 8006aca:	bf00      	nop
 8006acc:	20000d7c 	.word	0x20000d7c

08006ad0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b086      	sub	sp, #24
 8006ad4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ada:	4b4f      	ldr	r3, [pc, #316]	; (8006c18 <xTaskIncrementTick+0x148>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	f040 808f 	bne.w	8006c02 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006ae4:	4b4d      	ldr	r3, [pc, #308]	; (8006c1c <xTaskIncrementTick+0x14c>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	3301      	adds	r3, #1
 8006aea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006aec:	4a4b      	ldr	r2, [pc, #300]	; (8006c1c <xTaskIncrementTick+0x14c>)
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d120      	bne.n	8006b3a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006af8:	4b49      	ldr	r3, [pc, #292]	; (8006c20 <xTaskIncrementTick+0x150>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d00a      	beq.n	8006b18 <xTaskIncrementTick+0x48>
	__asm volatile
 8006b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b06:	f383 8811 	msr	BASEPRI, r3
 8006b0a:	f3bf 8f6f 	isb	sy
 8006b0e:	f3bf 8f4f 	dsb	sy
 8006b12:	603b      	str	r3, [r7, #0]
}
 8006b14:	bf00      	nop
 8006b16:	e7fe      	b.n	8006b16 <xTaskIncrementTick+0x46>
 8006b18:	4b41      	ldr	r3, [pc, #260]	; (8006c20 <xTaskIncrementTick+0x150>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	60fb      	str	r3, [r7, #12]
 8006b1e:	4b41      	ldr	r3, [pc, #260]	; (8006c24 <xTaskIncrementTick+0x154>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a3f      	ldr	r2, [pc, #252]	; (8006c20 <xTaskIncrementTick+0x150>)
 8006b24:	6013      	str	r3, [r2, #0]
 8006b26:	4a3f      	ldr	r2, [pc, #252]	; (8006c24 <xTaskIncrementTick+0x154>)
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6013      	str	r3, [r2, #0]
 8006b2c:	4b3e      	ldr	r3, [pc, #248]	; (8006c28 <xTaskIncrementTick+0x158>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	3301      	adds	r3, #1
 8006b32:	4a3d      	ldr	r2, [pc, #244]	; (8006c28 <xTaskIncrementTick+0x158>)
 8006b34:	6013      	str	r3, [r2, #0]
 8006b36:	f000 fad1 	bl	80070dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006b3a:	4b3c      	ldr	r3, [pc, #240]	; (8006c2c <xTaskIncrementTick+0x15c>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	693a      	ldr	r2, [r7, #16]
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d349      	bcc.n	8006bd8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b44:	4b36      	ldr	r3, [pc, #216]	; (8006c20 <xTaskIncrementTick+0x150>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d104      	bne.n	8006b58 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b4e:	4b37      	ldr	r3, [pc, #220]	; (8006c2c <xTaskIncrementTick+0x15c>)
 8006b50:	f04f 32ff 	mov.w	r2, #4294967295
 8006b54:	601a      	str	r2, [r3, #0]
					break;
 8006b56:	e03f      	b.n	8006bd8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b58:	4b31      	ldr	r3, [pc, #196]	; (8006c20 <xTaskIncrementTick+0x150>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006b68:	693a      	ldr	r2, [r7, #16]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d203      	bcs.n	8006b78 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006b70:	4a2e      	ldr	r2, [pc, #184]	; (8006c2c <xTaskIncrementTick+0x15c>)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006b76:	e02f      	b.n	8006bd8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	3304      	adds	r3, #4
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f7fe fdaf 	bl	80056e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d004      	beq.n	8006b94 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	3318      	adds	r3, #24
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f7fe fda6 	bl	80056e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b98:	4b25      	ldr	r3, [pc, #148]	; (8006c30 <xTaskIncrementTick+0x160>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d903      	bls.n	8006ba8 <xTaskIncrementTick+0xd8>
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba4:	4a22      	ldr	r2, [pc, #136]	; (8006c30 <xTaskIncrementTick+0x160>)
 8006ba6:	6013      	str	r3, [r2, #0]
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bac:	4613      	mov	r3, r2
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	4413      	add	r3, r2
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	4a1f      	ldr	r2, [pc, #124]	; (8006c34 <xTaskIncrementTick+0x164>)
 8006bb6:	441a      	add	r2, r3
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	3304      	adds	r3, #4
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	4610      	mov	r0, r2
 8006bc0:	f7fe fd31 	bl	8005626 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bc8:	4b1b      	ldr	r3, [pc, #108]	; (8006c38 <xTaskIncrementTick+0x168>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d3b8      	bcc.n	8006b44 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bd6:	e7b5      	b.n	8006b44 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006bd8:	4b17      	ldr	r3, [pc, #92]	; (8006c38 <xTaskIncrementTick+0x168>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bde:	4915      	ldr	r1, [pc, #84]	; (8006c34 <xTaskIncrementTick+0x164>)
 8006be0:	4613      	mov	r3, r2
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	4413      	add	r3, r2
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	440b      	add	r3, r1
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d901      	bls.n	8006bf4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006bf4:	4b11      	ldr	r3, [pc, #68]	; (8006c3c <xTaskIncrementTick+0x16c>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d007      	beq.n	8006c0c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	617b      	str	r3, [r7, #20]
 8006c00:	e004      	b.n	8006c0c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006c02:	4b0f      	ldr	r3, [pc, #60]	; (8006c40 <xTaskIncrementTick+0x170>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	3301      	adds	r3, #1
 8006c08:	4a0d      	ldr	r2, [pc, #52]	; (8006c40 <xTaskIncrementTick+0x170>)
 8006c0a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006c0c:	697b      	ldr	r3, [r7, #20]
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3718      	adds	r7, #24
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop
 8006c18:	20000da0 	.word	0x20000da0
 8006c1c:	20000d7c 	.word	0x20000d7c
 8006c20:	20000d30 	.word	0x20000d30
 8006c24:	20000d34 	.word	0x20000d34
 8006c28:	20000d90 	.word	0x20000d90
 8006c2c:	20000d98 	.word	0x20000d98
 8006c30:	20000d80 	.word	0x20000d80
 8006c34:	200008a8 	.word	0x200008a8
 8006c38:	200008a4 	.word	0x200008a4
 8006c3c:	20000d8c 	.word	0x20000d8c
 8006c40:	20000d88 	.word	0x20000d88

08006c44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006c44:	b480      	push	{r7}
 8006c46:	b085      	sub	sp, #20
 8006c48:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006c4a:	4b28      	ldr	r3, [pc, #160]	; (8006cec <vTaskSwitchContext+0xa8>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d003      	beq.n	8006c5a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006c52:	4b27      	ldr	r3, [pc, #156]	; (8006cf0 <vTaskSwitchContext+0xac>)
 8006c54:	2201      	movs	r2, #1
 8006c56:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006c58:	e041      	b.n	8006cde <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006c5a:	4b25      	ldr	r3, [pc, #148]	; (8006cf0 <vTaskSwitchContext+0xac>)
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c60:	4b24      	ldr	r3, [pc, #144]	; (8006cf4 <vTaskSwitchContext+0xb0>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	60fb      	str	r3, [r7, #12]
 8006c66:	e010      	b.n	8006c8a <vTaskSwitchContext+0x46>
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d10a      	bne.n	8006c84 <vTaskSwitchContext+0x40>
	__asm volatile
 8006c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c72:	f383 8811 	msr	BASEPRI, r3
 8006c76:	f3bf 8f6f 	isb	sy
 8006c7a:	f3bf 8f4f 	dsb	sy
 8006c7e:	607b      	str	r3, [r7, #4]
}
 8006c80:	bf00      	nop
 8006c82:	e7fe      	b.n	8006c82 <vTaskSwitchContext+0x3e>
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	3b01      	subs	r3, #1
 8006c88:	60fb      	str	r3, [r7, #12]
 8006c8a:	491b      	ldr	r1, [pc, #108]	; (8006cf8 <vTaskSwitchContext+0xb4>)
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	4613      	mov	r3, r2
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	4413      	add	r3, r2
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	440b      	add	r3, r1
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d0e4      	beq.n	8006c68 <vTaskSwitchContext+0x24>
 8006c9e:	68fa      	ldr	r2, [r7, #12]
 8006ca0:	4613      	mov	r3, r2
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	4413      	add	r3, r2
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	4a13      	ldr	r2, [pc, #76]	; (8006cf8 <vTaskSwitchContext+0xb4>)
 8006caa:	4413      	add	r3, r2
 8006cac:	60bb      	str	r3, [r7, #8]
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	685a      	ldr	r2, [r3, #4]
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	605a      	str	r2, [r3, #4]
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	685a      	ldr	r2, [r3, #4]
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	3308      	adds	r3, #8
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d104      	bne.n	8006cce <vTaskSwitchContext+0x8a>
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	685a      	ldr	r2, [r3, #4]
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	605a      	str	r2, [r3, #4]
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	4a09      	ldr	r2, [pc, #36]	; (8006cfc <vTaskSwitchContext+0xb8>)
 8006cd6:	6013      	str	r3, [r2, #0]
 8006cd8:	4a06      	ldr	r2, [pc, #24]	; (8006cf4 <vTaskSwitchContext+0xb0>)
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	6013      	str	r3, [r2, #0]
}
 8006cde:	bf00      	nop
 8006ce0:	3714      	adds	r7, #20
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr
 8006cea:	bf00      	nop
 8006cec:	20000da0 	.word	0x20000da0
 8006cf0:	20000d8c 	.word	0x20000d8c
 8006cf4:	20000d80 	.word	0x20000d80
 8006cf8:	200008a8 	.word	0x200008a8
 8006cfc:	200008a4 	.word	0x200008a4

08006d00 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d10a      	bne.n	8006d26 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d14:	f383 8811 	msr	BASEPRI, r3
 8006d18:	f3bf 8f6f 	isb	sy
 8006d1c:	f3bf 8f4f 	dsb	sy
 8006d20:	60fb      	str	r3, [r7, #12]
}
 8006d22:	bf00      	nop
 8006d24:	e7fe      	b.n	8006d24 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d26:	4b07      	ldr	r3, [pc, #28]	; (8006d44 <vTaskPlaceOnEventList+0x44>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	3318      	adds	r3, #24
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f7fe fc9d 	bl	800566e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006d34:	2101      	movs	r1, #1
 8006d36:	6838      	ldr	r0, [r7, #0]
 8006d38:	f000 fb7a 	bl	8007430 <prvAddCurrentTaskToDelayedList>
}
 8006d3c:	bf00      	nop
 8006d3e:	3710      	adds	r7, #16
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}
 8006d44:	200008a4 	.word	0x200008a4

08006d48 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b086      	sub	sp, #24
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	60b9      	str	r1, [r7, #8]
 8006d52:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d10a      	bne.n	8006d70 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d5e:	f383 8811 	msr	BASEPRI, r3
 8006d62:	f3bf 8f6f 	isb	sy
 8006d66:	f3bf 8f4f 	dsb	sy
 8006d6a:	617b      	str	r3, [r7, #20]
}
 8006d6c:	bf00      	nop
 8006d6e:	e7fe      	b.n	8006d6e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d70:	4b0a      	ldr	r3, [pc, #40]	; (8006d9c <vTaskPlaceOnEventListRestricted+0x54>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	3318      	adds	r3, #24
 8006d76:	4619      	mov	r1, r3
 8006d78:	68f8      	ldr	r0, [r7, #12]
 8006d7a:	f7fe fc54 	bl	8005626 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d002      	beq.n	8006d8a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006d84:	f04f 33ff 	mov.w	r3, #4294967295
 8006d88:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006d8a:	6879      	ldr	r1, [r7, #4]
 8006d8c:	68b8      	ldr	r0, [r7, #8]
 8006d8e:	f000 fb4f 	bl	8007430 <prvAddCurrentTaskToDelayedList>
	}
 8006d92:	bf00      	nop
 8006d94:	3718      	adds	r7, #24
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
 8006d9a:	bf00      	nop
 8006d9c:	200008a4 	.word	0x200008a4

08006da0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b086      	sub	sp, #24
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d10a      	bne.n	8006dcc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dba:	f383 8811 	msr	BASEPRI, r3
 8006dbe:	f3bf 8f6f 	isb	sy
 8006dc2:	f3bf 8f4f 	dsb	sy
 8006dc6:	60fb      	str	r3, [r7, #12]
}
 8006dc8:	bf00      	nop
 8006dca:	e7fe      	b.n	8006dca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	3318      	adds	r3, #24
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f7fe fc85 	bl	80056e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006dd6:	4b1e      	ldr	r3, [pc, #120]	; (8006e50 <xTaskRemoveFromEventList+0xb0>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d11d      	bne.n	8006e1a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	3304      	adds	r3, #4
 8006de2:	4618      	mov	r0, r3
 8006de4:	f7fe fc7c 	bl	80056e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dec:	4b19      	ldr	r3, [pc, #100]	; (8006e54 <xTaskRemoveFromEventList+0xb4>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d903      	bls.n	8006dfc <xTaskRemoveFromEventList+0x5c>
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df8:	4a16      	ldr	r2, [pc, #88]	; (8006e54 <xTaskRemoveFromEventList+0xb4>)
 8006dfa:	6013      	str	r3, [r2, #0]
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e00:	4613      	mov	r3, r2
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	4413      	add	r3, r2
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	4a13      	ldr	r2, [pc, #76]	; (8006e58 <xTaskRemoveFromEventList+0xb8>)
 8006e0a:	441a      	add	r2, r3
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	3304      	adds	r3, #4
 8006e10:	4619      	mov	r1, r3
 8006e12:	4610      	mov	r0, r2
 8006e14:	f7fe fc07 	bl	8005626 <vListInsertEnd>
 8006e18:	e005      	b.n	8006e26 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	3318      	adds	r3, #24
 8006e1e:	4619      	mov	r1, r3
 8006e20:	480e      	ldr	r0, [pc, #56]	; (8006e5c <xTaskRemoveFromEventList+0xbc>)
 8006e22:	f7fe fc00 	bl	8005626 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e2a:	4b0d      	ldr	r3, [pc, #52]	; (8006e60 <xTaskRemoveFromEventList+0xc0>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d905      	bls.n	8006e40 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006e34:	2301      	movs	r3, #1
 8006e36:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006e38:	4b0a      	ldr	r3, [pc, #40]	; (8006e64 <xTaskRemoveFromEventList+0xc4>)
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	601a      	str	r2, [r3, #0]
 8006e3e:	e001      	b.n	8006e44 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006e40:	2300      	movs	r3, #0
 8006e42:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006e44:	697b      	ldr	r3, [r7, #20]
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3718      	adds	r7, #24
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop
 8006e50:	20000da0 	.word	0x20000da0
 8006e54:	20000d80 	.word	0x20000d80
 8006e58:	200008a8 	.word	0x200008a8
 8006e5c:	20000d38 	.word	0x20000d38
 8006e60:	200008a4 	.word	0x200008a4
 8006e64:	20000d8c 	.word	0x20000d8c

08006e68 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b083      	sub	sp, #12
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006e70:	4b06      	ldr	r3, [pc, #24]	; (8006e8c <vTaskInternalSetTimeOutState+0x24>)
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006e78:	4b05      	ldr	r3, [pc, #20]	; (8006e90 <vTaskInternalSetTimeOutState+0x28>)
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	605a      	str	r2, [r3, #4]
}
 8006e80:	bf00      	nop
 8006e82:	370c      	adds	r7, #12
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr
 8006e8c:	20000d90 	.word	0x20000d90
 8006e90:	20000d7c 	.word	0x20000d7c

08006e94 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b088      	sub	sp, #32
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d10a      	bne.n	8006eba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea8:	f383 8811 	msr	BASEPRI, r3
 8006eac:	f3bf 8f6f 	isb	sy
 8006eb0:	f3bf 8f4f 	dsb	sy
 8006eb4:	613b      	str	r3, [r7, #16]
}
 8006eb6:	bf00      	nop
 8006eb8:	e7fe      	b.n	8006eb8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d10a      	bne.n	8006ed6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec4:	f383 8811 	msr	BASEPRI, r3
 8006ec8:	f3bf 8f6f 	isb	sy
 8006ecc:	f3bf 8f4f 	dsb	sy
 8006ed0:	60fb      	str	r3, [r7, #12]
}
 8006ed2:	bf00      	nop
 8006ed4:	e7fe      	b.n	8006ed4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006ed6:	f000 ff7d 	bl	8007dd4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006eda:	4b1d      	ldr	r3, [pc, #116]	; (8006f50 <xTaskCheckForTimeOut+0xbc>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	69ba      	ldr	r2, [r7, #24]
 8006ee6:	1ad3      	subs	r3, r2, r3
 8006ee8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ef2:	d102      	bne.n	8006efa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	61fb      	str	r3, [r7, #28]
 8006ef8:	e023      	b.n	8006f42 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	4b15      	ldr	r3, [pc, #84]	; (8006f54 <xTaskCheckForTimeOut+0xc0>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d007      	beq.n	8006f16 <xTaskCheckForTimeOut+0x82>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	69ba      	ldr	r2, [r7, #24]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d302      	bcc.n	8006f16 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006f10:	2301      	movs	r3, #1
 8006f12:	61fb      	str	r3, [r7, #28]
 8006f14:	e015      	b.n	8006f42 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	697a      	ldr	r2, [r7, #20]
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d20b      	bcs.n	8006f38 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	1ad2      	subs	r2, r2, r3
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f7ff ff9b 	bl	8006e68 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006f32:	2300      	movs	r3, #0
 8006f34:	61fb      	str	r3, [r7, #28]
 8006f36:	e004      	b.n	8006f42 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006f42:	f000 ff77 	bl	8007e34 <vPortExitCritical>

	return xReturn;
 8006f46:	69fb      	ldr	r3, [r7, #28]
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3720      	adds	r7, #32
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}
 8006f50:	20000d7c 	.word	0x20000d7c
 8006f54:	20000d90 	.word	0x20000d90

08006f58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006f58:	b480      	push	{r7}
 8006f5a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006f5c:	4b03      	ldr	r3, [pc, #12]	; (8006f6c <vTaskMissedYield+0x14>)
 8006f5e:	2201      	movs	r2, #1
 8006f60:	601a      	str	r2, [r3, #0]
}
 8006f62:	bf00      	nop
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr
 8006f6c:	20000d8c 	.word	0x20000d8c

08006f70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b082      	sub	sp, #8
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006f78:	f000 f852 	bl	8007020 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006f7c:	4b06      	ldr	r3, [pc, #24]	; (8006f98 <prvIdleTask+0x28>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d9f9      	bls.n	8006f78 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006f84:	4b05      	ldr	r3, [pc, #20]	; (8006f9c <prvIdleTask+0x2c>)
 8006f86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f8a:	601a      	str	r2, [r3, #0]
 8006f8c:	f3bf 8f4f 	dsb	sy
 8006f90:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006f94:	e7f0      	b.n	8006f78 <prvIdleTask+0x8>
 8006f96:	bf00      	nop
 8006f98:	200008a8 	.word	0x200008a8
 8006f9c:	e000ed04 	.word	0xe000ed04

08006fa0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b082      	sub	sp, #8
 8006fa4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	607b      	str	r3, [r7, #4]
 8006faa:	e00c      	b.n	8006fc6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	4613      	mov	r3, r2
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	4413      	add	r3, r2
 8006fb4:	009b      	lsls	r3, r3, #2
 8006fb6:	4a12      	ldr	r2, [pc, #72]	; (8007000 <prvInitialiseTaskLists+0x60>)
 8006fb8:	4413      	add	r3, r2
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f7fe fb06 	bl	80055cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	607b      	str	r3, [r7, #4]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2b37      	cmp	r3, #55	; 0x37
 8006fca:	d9ef      	bls.n	8006fac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006fcc:	480d      	ldr	r0, [pc, #52]	; (8007004 <prvInitialiseTaskLists+0x64>)
 8006fce:	f7fe fafd 	bl	80055cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006fd2:	480d      	ldr	r0, [pc, #52]	; (8007008 <prvInitialiseTaskLists+0x68>)
 8006fd4:	f7fe fafa 	bl	80055cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006fd8:	480c      	ldr	r0, [pc, #48]	; (800700c <prvInitialiseTaskLists+0x6c>)
 8006fda:	f7fe faf7 	bl	80055cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006fde:	480c      	ldr	r0, [pc, #48]	; (8007010 <prvInitialiseTaskLists+0x70>)
 8006fe0:	f7fe faf4 	bl	80055cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006fe4:	480b      	ldr	r0, [pc, #44]	; (8007014 <prvInitialiseTaskLists+0x74>)
 8006fe6:	f7fe faf1 	bl	80055cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006fea:	4b0b      	ldr	r3, [pc, #44]	; (8007018 <prvInitialiseTaskLists+0x78>)
 8006fec:	4a05      	ldr	r2, [pc, #20]	; (8007004 <prvInitialiseTaskLists+0x64>)
 8006fee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006ff0:	4b0a      	ldr	r3, [pc, #40]	; (800701c <prvInitialiseTaskLists+0x7c>)
 8006ff2:	4a05      	ldr	r2, [pc, #20]	; (8007008 <prvInitialiseTaskLists+0x68>)
 8006ff4:	601a      	str	r2, [r3, #0]
}
 8006ff6:	bf00      	nop
 8006ff8:	3708      	adds	r7, #8
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
 8006ffe:	bf00      	nop
 8007000:	200008a8 	.word	0x200008a8
 8007004:	20000d08 	.word	0x20000d08
 8007008:	20000d1c 	.word	0x20000d1c
 800700c:	20000d38 	.word	0x20000d38
 8007010:	20000d4c 	.word	0x20000d4c
 8007014:	20000d64 	.word	0x20000d64
 8007018:	20000d30 	.word	0x20000d30
 800701c:	20000d34 	.word	0x20000d34

08007020 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b082      	sub	sp, #8
 8007024:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007026:	e019      	b.n	800705c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007028:	f000 fed4 	bl	8007dd4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800702c:	4b10      	ldr	r3, [pc, #64]	; (8007070 <prvCheckTasksWaitingTermination+0x50>)
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	3304      	adds	r3, #4
 8007038:	4618      	mov	r0, r3
 800703a:	f7fe fb51 	bl	80056e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800703e:	4b0d      	ldr	r3, [pc, #52]	; (8007074 <prvCheckTasksWaitingTermination+0x54>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	3b01      	subs	r3, #1
 8007044:	4a0b      	ldr	r2, [pc, #44]	; (8007074 <prvCheckTasksWaitingTermination+0x54>)
 8007046:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007048:	4b0b      	ldr	r3, [pc, #44]	; (8007078 <prvCheckTasksWaitingTermination+0x58>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	3b01      	subs	r3, #1
 800704e:	4a0a      	ldr	r2, [pc, #40]	; (8007078 <prvCheckTasksWaitingTermination+0x58>)
 8007050:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007052:	f000 feef 	bl	8007e34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 f810 	bl	800707c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800705c:	4b06      	ldr	r3, [pc, #24]	; (8007078 <prvCheckTasksWaitingTermination+0x58>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d1e1      	bne.n	8007028 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007064:	bf00      	nop
 8007066:	bf00      	nop
 8007068:	3708      	adds	r7, #8
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	20000d4c 	.word	0x20000d4c
 8007074:	20000d78 	.word	0x20000d78
 8007078:	20000d60 	.word	0x20000d60

0800707c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800708a:	2b00      	cmp	r3, #0
 800708c:	d108      	bne.n	80070a0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007092:	4618      	mov	r0, r3
 8007094:	f001 f88c 	bl	80081b0 <vPortFree>
				vPortFree( pxTCB );
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f001 f889 	bl	80081b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800709e:	e018      	b.n	80070d2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d103      	bne.n	80070b2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f001 f880 	bl	80081b0 <vPortFree>
	}
 80070b0:	e00f      	b.n	80070d2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80070b8:	2b02      	cmp	r3, #2
 80070ba:	d00a      	beq.n	80070d2 <prvDeleteTCB+0x56>
	__asm volatile
 80070bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c0:	f383 8811 	msr	BASEPRI, r3
 80070c4:	f3bf 8f6f 	isb	sy
 80070c8:	f3bf 8f4f 	dsb	sy
 80070cc:	60fb      	str	r3, [r7, #12]
}
 80070ce:	bf00      	nop
 80070d0:	e7fe      	b.n	80070d0 <prvDeleteTCB+0x54>
	}
 80070d2:	bf00      	nop
 80070d4:	3710      	adds	r7, #16
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
	...

080070dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80070dc:	b480      	push	{r7}
 80070de:	b083      	sub	sp, #12
 80070e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070e2:	4b0c      	ldr	r3, [pc, #48]	; (8007114 <prvResetNextTaskUnblockTime+0x38>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d104      	bne.n	80070f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80070ec:	4b0a      	ldr	r3, [pc, #40]	; (8007118 <prvResetNextTaskUnblockTime+0x3c>)
 80070ee:	f04f 32ff 	mov.w	r2, #4294967295
 80070f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80070f4:	e008      	b.n	8007108 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070f6:	4b07      	ldr	r3, [pc, #28]	; (8007114 <prvResetNextTaskUnblockTime+0x38>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	68db      	ldr	r3, [r3, #12]
 80070fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	4a04      	ldr	r2, [pc, #16]	; (8007118 <prvResetNextTaskUnblockTime+0x3c>)
 8007106:	6013      	str	r3, [r2, #0]
}
 8007108:	bf00      	nop
 800710a:	370c      	adds	r7, #12
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr
 8007114:	20000d30 	.word	0x20000d30
 8007118:	20000d98 	.word	0x20000d98

0800711c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800711c:	b480      	push	{r7}
 800711e:	b083      	sub	sp, #12
 8007120:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007122:	4b0b      	ldr	r3, [pc, #44]	; (8007150 <xTaskGetSchedulerState+0x34>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d102      	bne.n	8007130 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800712a:	2301      	movs	r3, #1
 800712c:	607b      	str	r3, [r7, #4]
 800712e:	e008      	b.n	8007142 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007130:	4b08      	ldr	r3, [pc, #32]	; (8007154 <xTaskGetSchedulerState+0x38>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d102      	bne.n	800713e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007138:	2302      	movs	r3, #2
 800713a:	607b      	str	r3, [r7, #4]
 800713c:	e001      	b.n	8007142 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800713e:	2300      	movs	r3, #0
 8007140:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007142:	687b      	ldr	r3, [r7, #4]
	}
 8007144:	4618      	mov	r0, r3
 8007146:	370c      	adds	r7, #12
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr
 8007150:	20000d84 	.word	0x20000d84
 8007154:	20000da0 	.word	0x20000da0

08007158 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007158:	b580      	push	{r7, lr}
 800715a:	b084      	sub	sp, #16
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007164:	2300      	movs	r3, #0
 8007166:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d051      	beq.n	8007212 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007172:	4b2a      	ldr	r3, [pc, #168]	; (800721c <xTaskPriorityInherit+0xc4>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007178:	429a      	cmp	r2, r3
 800717a:	d241      	bcs.n	8007200 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	699b      	ldr	r3, [r3, #24]
 8007180:	2b00      	cmp	r3, #0
 8007182:	db06      	blt.n	8007192 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007184:	4b25      	ldr	r3, [pc, #148]	; (800721c <xTaskPriorityInherit+0xc4>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800718a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	6959      	ldr	r1, [r3, #20]
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800719a:	4613      	mov	r3, r2
 800719c:	009b      	lsls	r3, r3, #2
 800719e:	4413      	add	r3, r2
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	4a1f      	ldr	r2, [pc, #124]	; (8007220 <xTaskPriorityInherit+0xc8>)
 80071a4:	4413      	add	r3, r2
 80071a6:	4299      	cmp	r1, r3
 80071a8:	d122      	bne.n	80071f0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	3304      	adds	r3, #4
 80071ae:	4618      	mov	r0, r3
 80071b0:	f7fe fa96 	bl	80056e0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80071b4:	4b19      	ldr	r3, [pc, #100]	; (800721c <xTaskPriorityInherit+0xc4>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071c2:	4b18      	ldr	r3, [pc, #96]	; (8007224 <xTaskPriorityInherit+0xcc>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d903      	bls.n	80071d2 <xTaskPriorityInherit+0x7a>
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ce:	4a15      	ldr	r2, [pc, #84]	; (8007224 <xTaskPriorityInherit+0xcc>)
 80071d0:	6013      	str	r3, [r2, #0]
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071d6:	4613      	mov	r3, r2
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	4413      	add	r3, r2
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	4a10      	ldr	r2, [pc, #64]	; (8007220 <xTaskPriorityInherit+0xc8>)
 80071e0:	441a      	add	r2, r3
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	3304      	adds	r3, #4
 80071e6:	4619      	mov	r1, r3
 80071e8:	4610      	mov	r0, r2
 80071ea:	f7fe fa1c 	bl	8005626 <vListInsertEnd>
 80071ee:	e004      	b.n	80071fa <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80071f0:	4b0a      	ldr	r3, [pc, #40]	; (800721c <xTaskPriorityInherit+0xc4>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80071fa:	2301      	movs	r3, #1
 80071fc:	60fb      	str	r3, [r7, #12]
 80071fe:	e008      	b.n	8007212 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007204:	4b05      	ldr	r3, [pc, #20]	; (800721c <xTaskPriorityInherit+0xc4>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800720a:	429a      	cmp	r2, r3
 800720c:	d201      	bcs.n	8007212 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800720e:	2301      	movs	r3, #1
 8007210:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007212:	68fb      	ldr	r3, [r7, #12]
	}
 8007214:	4618      	mov	r0, r3
 8007216:	3710      	adds	r7, #16
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}
 800721c:	200008a4 	.word	0x200008a4
 8007220:	200008a8 	.word	0x200008a8
 8007224:	20000d80 	.word	0x20000d80

08007228 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007228:	b580      	push	{r7, lr}
 800722a:	b086      	sub	sp, #24
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007234:	2300      	movs	r3, #0
 8007236:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d056      	beq.n	80072ec <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800723e:	4b2e      	ldr	r3, [pc, #184]	; (80072f8 <xTaskPriorityDisinherit+0xd0>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	693a      	ldr	r2, [r7, #16]
 8007244:	429a      	cmp	r2, r3
 8007246:	d00a      	beq.n	800725e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800724c:	f383 8811 	msr	BASEPRI, r3
 8007250:	f3bf 8f6f 	isb	sy
 8007254:	f3bf 8f4f 	dsb	sy
 8007258:	60fb      	str	r3, [r7, #12]
}
 800725a:	bf00      	nop
 800725c:	e7fe      	b.n	800725c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007262:	2b00      	cmp	r3, #0
 8007264:	d10a      	bne.n	800727c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800726a:	f383 8811 	msr	BASEPRI, r3
 800726e:	f3bf 8f6f 	isb	sy
 8007272:	f3bf 8f4f 	dsb	sy
 8007276:	60bb      	str	r3, [r7, #8]
}
 8007278:	bf00      	nop
 800727a:	e7fe      	b.n	800727a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007280:	1e5a      	subs	r2, r3, #1
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800728e:	429a      	cmp	r2, r3
 8007290:	d02c      	beq.n	80072ec <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007296:	2b00      	cmp	r3, #0
 8007298:	d128      	bne.n	80072ec <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	3304      	adds	r3, #4
 800729e:	4618      	mov	r0, r3
 80072a0:	f7fe fa1e 	bl	80056e0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072bc:	4b0f      	ldr	r3, [pc, #60]	; (80072fc <xTaskPriorityDisinherit+0xd4>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d903      	bls.n	80072cc <xTaskPriorityDisinherit+0xa4>
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c8:	4a0c      	ldr	r2, [pc, #48]	; (80072fc <xTaskPriorityDisinherit+0xd4>)
 80072ca:	6013      	str	r3, [r2, #0]
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072d0:	4613      	mov	r3, r2
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	4413      	add	r3, r2
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	4a09      	ldr	r2, [pc, #36]	; (8007300 <xTaskPriorityDisinherit+0xd8>)
 80072da:	441a      	add	r2, r3
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	3304      	adds	r3, #4
 80072e0:	4619      	mov	r1, r3
 80072e2:	4610      	mov	r0, r2
 80072e4:	f7fe f99f 	bl	8005626 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80072e8:	2301      	movs	r3, #1
 80072ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80072ec:	697b      	ldr	r3, [r7, #20]
	}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3718      	adds	r7, #24
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	bf00      	nop
 80072f8:	200008a4 	.word	0x200008a4
 80072fc:	20000d80 	.word	0x20000d80
 8007300:	200008a8 	.word	0x200008a8

08007304 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007304:	b580      	push	{r7, lr}
 8007306:	b088      	sub	sp, #32
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007312:	2301      	movs	r3, #1
 8007314:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d06a      	beq.n	80073f2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800731c:	69bb      	ldr	r3, [r7, #24]
 800731e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007320:	2b00      	cmp	r3, #0
 8007322:	d10a      	bne.n	800733a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007328:	f383 8811 	msr	BASEPRI, r3
 800732c:	f3bf 8f6f 	isb	sy
 8007330:	f3bf 8f4f 	dsb	sy
 8007334:	60fb      	str	r3, [r7, #12]
}
 8007336:	bf00      	nop
 8007338:	e7fe      	b.n	8007338 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800733a:	69bb      	ldr	r3, [r7, #24]
 800733c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800733e:	683a      	ldr	r2, [r7, #0]
 8007340:	429a      	cmp	r2, r3
 8007342:	d902      	bls.n	800734a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	61fb      	str	r3, [r7, #28]
 8007348:	e002      	b.n	8007350 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800734a:	69bb      	ldr	r3, [r7, #24]
 800734c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800734e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007350:	69bb      	ldr	r3, [r7, #24]
 8007352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007354:	69fa      	ldr	r2, [r7, #28]
 8007356:	429a      	cmp	r2, r3
 8007358:	d04b      	beq.n	80073f2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800735a:	69bb      	ldr	r3, [r7, #24]
 800735c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800735e:	697a      	ldr	r2, [r7, #20]
 8007360:	429a      	cmp	r2, r3
 8007362:	d146      	bne.n	80073f2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007364:	4b25      	ldr	r3, [pc, #148]	; (80073fc <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	69ba      	ldr	r2, [r7, #24]
 800736a:	429a      	cmp	r2, r3
 800736c:	d10a      	bne.n	8007384 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800736e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007372:	f383 8811 	msr	BASEPRI, r3
 8007376:	f3bf 8f6f 	isb	sy
 800737a:	f3bf 8f4f 	dsb	sy
 800737e:	60bb      	str	r3, [r7, #8]
}
 8007380:	bf00      	nop
 8007382:	e7fe      	b.n	8007382 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007384:	69bb      	ldr	r3, [r7, #24]
 8007386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007388:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800738a:	69bb      	ldr	r3, [r7, #24]
 800738c:	69fa      	ldr	r2, [r7, #28]
 800738e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007390:	69bb      	ldr	r3, [r7, #24]
 8007392:	699b      	ldr	r3, [r3, #24]
 8007394:	2b00      	cmp	r3, #0
 8007396:	db04      	blt.n	80073a2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007398:	69fb      	ldr	r3, [r7, #28]
 800739a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80073a2:	69bb      	ldr	r3, [r7, #24]
 80073a4:	6959      	ldr	r1, [r3, #20]
 80073a6:	693a      	ldr	r2, [r7, #16]
 80073a8:	4613      	mov	r3, r2
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	4413      	add	r3, r2
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	4a13      	ldr	r2, [pc, #76]	; (8007400 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80073b2:	4413      	add	r3, r2
 80073b4:	4299      	cmp	r1, r3
 80073b6:	d11c      	bne.n	80073f2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073b8:	69bb      	ldr	r3, [r7, #24]
 80073ba:	3304      	adds	r3, #4
 80073bc:	4618      	mov	r0, r3
 80073be:	f7fe f98f 	bl	80056e0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80073c2:	69bb      	ldr	r3, [r7, #24]
 80073c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073c6:	4b0f      	ldr	r3, [pc, #60]	; (8007404 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d903      	bls.n	80073d6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80073ce:	69bb      	ldr	r3, [r7, #24]
 80073d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d2:	4a0c      	ldr	r2, [pc, #48]	; (8007404 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80073d4:	6013      	str	r3, [r2, #0]
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073da:	4613      	mov	r3, r2
 80073dc:	009b      	lsls	r3, r3, #2
 80073de:	4413      	add	r3, r2
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	4a07      	ldr	r2, [pc, #28]	; (8007400 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80073e4:	441a      	add	r2, r3
 80073e6:	69bb      	ldr	r3, [r7, #24]
 80073e8:	3304      	adds	r3, #4
 80073ea:	4619      	mov	r1, r3
 80073ec:	4610      	mov	r0, r2
 80073ee:	f7fe f91a 	bl	8005626 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80073f2:	bf00      	nop
 80073f4:	3720      	adds	r7, #32
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
 80073fa:	bf00      	nop
 80073fc:	200008a4 	.word	0x200008a4
 8007400:	200008a8 	.word	0x200008a8
 8007404:	20000d80 	.word	0x20000d80

08007408 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007408:	b480      	push	{r7}
 800740a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800740c:	4b07      	ldr	r3, [pc, #28]	; (800742c <pvTaskIncrementMutexHeldCount+0x24>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d004      	beq.n	800741e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007414:	4b05      	ldr	r3, [pc, #20]	; (800742c <pvTaskIncrementMutexHeldCount+0x24>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800741a:	3201      	adds	r2, #1
 800741c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800741e:	4b03      	ldr	r3, [pc, #12]	; (800742c <pvTaskIncrementMutexHeldCount+0x24>)
 8007420:	681b      	ldr	r3, [r3, #0]
	}
 8007422:	4618      	mov	r0, r3
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr
 800742c:	200008a4 	.word	0x200008a4

08007430 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800743a:	4b21      	ldr	r3, [pc, #132]	; (80074c0 <prvAddCurrentTaskToDelayedList+0x90>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007440:	4b20      	ldr	r3, [pc, #128]	; (80074c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	3304      	adds	r3, #4
 8007446:	4618      	mov	r0, r3
 8007448:	f7fe f94a 	bl	80056e0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007452:	d10a      	bne.n	800746a <prvAddCurrentTaskToDelayedList+0x3a>
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d007      	beq.n	800746a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800745a:	4b1a      	ldr	r3, [pc, #104]	; (80074c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	3304      	adds	r3, #4
 8007460:	4619      	mov	r1, r3
 8007462:	4819      	ldr	r0, [pc, #100]	; (80074c8 <prvAddCurrentTaskToDelayedList+0x98>)
 8007464:	f7fe f8df 	bl	8005626 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007468:	e026      	b.n	80074b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800746a:	68fa      	ldr	r2, [r7, #12]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	4413      	add	r3, r2
 8007470:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007472:	4b14      	ldr	r3, [pc, #80]	; (80074c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	68ba      	ldr	r2, [r7, #8]
 8007478:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800747a:	68ba      	ldr	r2, [r7, #8]
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	429a      	cmp	r2, r3
 8007480:	d209      	bcs.n	8007496 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007482:	4b12      	ldr	r3, [pc, #72]	; (80074cc <prvAddCurrentTaskToDelayedList+0x9c>)
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	4b0f      	ldr	r3, [pc, #60]	; (80074c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	3304      	adds	r3, #4
 800748c:	4619      	mov	r1, r3
 800748e:	4610      	mov	r0, r2
 8007490:	f7fe f8ed 	bl	800566e <vListInsert>
}
 8007494:	e010      	b.n	80074b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007496:	4b0e      	ldr	r3, [pc, #56]	; (80074d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	4b0a      	ldr	r3, [pc, #40]	; (80074c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	3304      	adds	r3, #4
 80074a0:	4619      	mov	r1, r3
 80074a2:	4610      	mov	r0, r2
 80074a4:	f7fe f8e3 	bl	800566e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80074a8:	4b0a      	ldr	r3, [pc, #40]	; (80074d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	68ba      	ldr	r2, [r7, #8]
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d202      	bcs.n	80074b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80074b2:	4a08      	ldr	r2, [pc, #32]	; (80074d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	6013      	str	r3, [r2, #0]
}
 80074b8:	bf00      	nop
 80074ba:	3710      	adds	r7, #16
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}
 80074c0:	20000d7c 	.word	0x20000d7c
 80074c4:	200008a4 	.word	0x200008a4
 80074c8:	20000d64 	.word	0x20000d64
 80074cc:	20000d34 	.word	0x20000d34
 80074d0:	20000d30 	.word	0x20000d30
 80074d4:	20000d98 	.word	0x20000d98

080074d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b08a      	sub	sp, #40	; 0x28
 80074dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80074de:	2300      	movs	r3, #0
 80074e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80074e2:	f000 fb07 	bl	8007af4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80074e6:	4b1c      	ldr	r3, [pc, #112]	; (8007558 <xTimerCreateTimerTask+0x80>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d021      	beq.n	8007532 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80074ee:	2300      	movs	r3, #0
 80074f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80074f2:	2300      	movs	r3, #0
 80074f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80074f6:	1d3a      	adds	r2, r7, #4
 80074f8:	f107 0108 	add.w	r1, r7, #8
 80074fc:	f107 030c 	add.w	r3, r7, #12
 8007500:	4618      	mov	r0, r3
 8007502:	f7fe f849 	bl	8005598 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007506:	6879      	ldr	r1, [r7, #4]
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	68fa      	ldr	r2, [r7, #12]
 800750c:	9202      	str	r2, [sp, #8]
 800750e:	9301      	str	r3, [sp, #4]
 8007510:	2302      	movs	r3, #2
 8007512:	9300      	str	r3, [sp, #0]
 8007514:	2300      	movs	r3, #0
 8007516:	460a      	mov	r2, r1
 8007518:	4910      	ldr	r1, [pc, #64]	; (800755c <xTimerCreateTimerTask+0x84>)
 800751a:	4811      	ldr	r0, [pc, #68]	; (8007560 <xTimerCreateTimerTask+0x88>)
 800751c:	f7fe ffe0 	bl	80064e0 <xTaskCreateStatic>
 8007520:	4603      	mov	r3, r0
 8007522:	4a10      	ldr	r2, [pc, #64]	; (8007564 <xTimerCreateTimerTask+0x8c>)
 8007524:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007526:	4b0f      	ldr	r3, [pc, #60]	; (8007564 <xTimerCreateTimerTask+0x8c>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d001      	beq.n	8007532 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800752e:	2301      	movs	r3, #1
 8007530:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d10a      	bne.n	800754e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800753c:	f383 8811 	msr	BASEPRI, r3
 8007540:	f3bf 8f6f 	isb	sy
 8007544:	f3bf 8f4f 	dsb	sy
 8007548:	613b      	str	r3, [r7, #16]
}
 800754a:	bf00      	nop
 800754c:	e7fe      	b.n	800754c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800754e:	697b      	ldr	r3, [r7, #20]
}
 8007550:	4618      	mov	r0, r3
 8007552:	3718      	adds	r7, #24
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}
 8007558:	20000dd4 	.word	0x20000dd4
 800755c:	08008550 	.word	0x08008550
 8007560:	0800769d 	.word	0x0800769d
 8007564:	20000dd8 	.word	0x20000dd8

08007568 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b08a      	sub	sp, #40	; 0x28
 800756c:	af00      	add	r7, sp, #0
 800756e:	60f8      	str	r0, [r7, #12]
 8007570:	60b9      	str	r1, [r7, #8]
 8007572:	607a      	str	r2, [r7, #4]
 8007574:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007576:	2300      	movs	r3, #0
 8007578:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d10a      	bne.n	8007596 <xTimerGenericCommand+0x2e>
	__asm volatile
 8007580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007584:	f383 8811 	msr	BASEPRI, r3
 8007588:	f3bf 8f6f 	isb	sy
 800758c:	f3bf 8f4f 	dsb	sy
 8007590:	623b      	str	r3, [r7, #32]
}
 8007592:	bf00      	nop
 8007594:	e7fe      	b.n	8007594 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007596:	4b1a      	ldr	r3, [pc, #104]	; (8007600 <xTimerGenericCommand+0x98>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d02a      	beq.n	80075f4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	2b05      	cmp	r3, #5
 80075ae:	dc18      	bgt.n	80075e2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80075b0:	f7ff fdb4 	bl	800711c <xTaskGetSchedulerState>
 80075b4:	4603      	mov	r3, r0
 80075b6:	2b02      	cmp	r3, #2
 80075b8:	d109      	bne.n	80075ce <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80075ba:	4b11      	ldr	r3, [pc, #68]	; (8007600 <xTimerGenericCommand+0x98>)
 80075bc:	6818      	ldr	r0, [r3, #0]
 80075be:	f107 0110 	add.w	r1, r7, #16
 80075c2:	2300      	movs	r3, #0
 80075c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075c6:	f7fe f9f3 	bl	80059b0 <xQueueGenericSend>
 80075ca:	6278      	str	r0, [r7, #36]	; 0x24
 80075cc:	e012      	b.n	80075f4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80075ce:	4b0c      	ldr	r3, [pc, #48]	; (8007600 <xTimerGenericCommand+0x98>)
 80075d0:	6818      	ldr	r0, [r3, #0]
 80075d2:	f107 0110 	add.w	r1, r7, #16
 80075d6:	2300      	movs	r3, #0
 80075d8:	2200      	movs	r2, #0
 80075da:	f7fe f9e9 	bl	80059b0 <xQueueGenericSend>
 80075de:	6278      	str	r0, [r7, #36]	; 0x24
 80075e0:	e008      	b.n	80075f4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80075e2:	4b07      	ldr	r3, [pc, #28]	; (8007600 <xTimerGenericCommand+0x98>)
 80075e4:	6818      	ldr	r0, [r3, #0]
 80075e6:	f107 0110 	add.w	r1, r7, #16
 80075ea:	2300      	movs	r3, #0
 80075ec:	683a      	ldr	r2, [r7, #0]
 80075ee:	f7fe fadd 	bl	8005bac <xQueueGenericSendFromISR>
 80075f2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80075f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3728      	adds	r7, #40	; 0x28
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	20000dd4 	.word	0x20000dd4

08007604 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b088      	sub	sp, #32
 8007608:	af02      	add	r7, sp, #8
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800760e:	4b22      	ldr	r3, [pc, #136]	; (8007698 <prvProcessExpiredTimer+0x94>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	68db      	ldr	r3, [r3, #12]
 8007616:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	3304      	adds	r3, #4
 800761c:	4618      	mov	r0, r3
 800761e:	f7fe f85f 	bl	80056e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007628:	f003 0304 	and.w	r3, r3, #4
 800762c:	2b00      	cmp	r3, #0
 800762e:	d022      	beq.n	8007676 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	699a      	ldr	r2, [r3, #24]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	18d1      	adds	r1, r2, r3
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	683a      	ldr	r2, [r7, #0]
 800763c:	6978      	ldr	r0, [r7, #20]
 800763e:	f000 f8d1 	bl	80077e4 <prvInsertTimerInActiveList>
 8007642:	4603      	mov	r3, r0
 8007644:	2b00      	cmp	r3, #0
 8007646:	d01f      	beq.n	8007688 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007648:	2300      	movs	r3, #0
 800764a:	9300      	str	r3, [sp, #0]
 800764c:	2300      	movs	r3, #0
 800764e:	687a      	ldr	r2, [r7, #4]
 8007650:	2100      	movs	r1, #0
 8007652:	6978      	ldr	r0, [r7, #20]
 8007654:	f7ff ff88 	bl	8007568 <xTimerGenericCommand>
 8007658:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d113      	bne.n	8007688 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007664:	f383 8811 	msr	BASEPRI, r3
 8007668:	f3bf 8f6f 	isb	sy
 800766c:	f3bf 8f4f 	dsb	sy
 8007670:	60fb      	str	r3, [r7, #12]
}
 8007672:	bf00      	nop
 8007674:	e7fe      	b.n	8007674 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800767c:	f023 0301 	bic.w	r3, r3, #1
 8007680:	b2da      	uxtb	r2, r3
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	6a1b      	ldr	r3, [r3, #32]
 800768c:	6978      	ldr	r0, [r7, #20]
 800768e:	4798      	blx	r3
}
 8007690:	bf00      	nop
 8007692:	3718      	adds	r7, #24
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}
 8007698:	20000dcc 	.word	0x20000dcc

0800769c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80076a4:	f107 0308 	add.w	r3, r7, #8
 80076a8:	4618      	mov	r0, r3
 80076aa:	f000 f857 	bl	800775c <prvGetNextExpireTime>
 80076ae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	4619      	mov	r1, r3
 80076b4:	68f8      	ldr	r0, [r7, #12]
 80076b6:	f000 f803 	bl	80076c0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80076ba:	f000 f8d5 	bl	8007868 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80076be:	e7f1      	b.n	80076a4 <prvTimerTask+0x8>

080076c0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b084      	sub	sp, #16
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80076ca:	f7ff f945 	bl	8006958 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80076ce:	f107 0308 	add.w	r3, r7, #8
 80076d2:	4618      	mov	r0, r3
 80076d4:	f000 f866 	bl	80077a4 <prvSampleTimeNow>
 80076d8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d130      	bne.n	8007742 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d10a      	bne.n	80076fc <prvProcessTimerOrBlockTask+0x3c>
 80076e6:	687a      	ldr	r2, [r7, #4]
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d806      	bhi.n	80076fc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80076ee:	f7ff f941 	bl	8006974 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80076f2:	68f9      	ldr	r1, [r7, #12]
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f7ff ff85 	bl	8007604 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80076fa:	e024      	b.n	8007746 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d008      	beq.n	8007714 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007702:	4b13      	ldr	r3, [pc, #76]	; (8007750 <prvProcessTimerOrBlockTask+0x90>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d101      	bne.n	8007710 <prvProcessTimerOrBlockTask+0x50>
 800770c:	2301      	movs	r3, #1
 800770e:	e000      	b.n	8007712 <prvProcessTimerOrBlockTask+0x52>
 8007710:	2300      	movs	r3, #0
 8007712:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007714:	4b0f      	ldr	r3, [pc, #60]	; (8007754 <prvProcessTimerOrBlockTask+0x94>)
 8007716:	6818      	ldr	r0, [r3, #0]
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	1ad3      	subs	r3, r2, r3
 800771e:	683a      	ldr	r2, [r7, #0]
 8007720:	4619      	mov	r1, r3
 8007722:	f7fe fea9 	bl	8006478 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007726:	f7ff f925 	bl	8006974 <xTaskResumeAll>
 800772a:	4603      	mov	r3, r0
 800772c:	2b00      	cmp	r3, #0
 800772e:	d10a      	bne.n	8007746 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007730:	4b09      	ldr	r3, [pc, #36]	; (8007758 <prvProcessTimerOrBlockTask+0x98>)
 8007732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007736:	601a      	str	r2, [r3, #0]
 8007738:	f3bf 8f4f 	dsb	sy
 800773c:	f3bf 8f6f 	isb	sy
}
 8007740:	e001      	b.n	8007746 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007742:	f7ff f917 	bl	8006974 <xTaskResumeAll>
}
 8007746:	bf00      	nop
 8007748:	3710      	adds	r7, #16
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
 800774e:	bf00      	nop
 8007750:	20000dd0 	.word	0x20000dd0
 8007754:	20000dd4 	.word	0x20000dd4
 8007758:	e000ed04 	.word	0xe000ed04

0800775c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800775c:	b480      	push	{r7}
 800775e:	b085      	sub	sp, #20
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007764:	4b0e      	ldr	r3, [pc, #56]	; (80077a0 <prvGetNextExpireTime+0x44>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d101      	bne.n	8007772 <prvGetNextExpireTime+0x16>
 800776e:	2201      	movs	r2, #1
 8007770:	e000      	b.n	8007774 <prvGetNextExpireTime+0x18>
 8007772:	2200      	movs	r2, #0
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d105      	bne.n	800778c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007780:	4b07      	ldr	r3, [pc, #28]	; (80077a0 <prvGetNextExpireTime+0x44>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	68db      	ldr	r3, [r3, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	60fb      	str	r3, [r7, #12]
 800778a:	e001      	b.n	8007790 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800778c:	2300      	movs	r3, #0
 800778e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007790:	68fb      	ldr	r3, [r7, #12]
}
 8007792:	4618      	mov	r0, r3
 8007794:	3714      	adds	r7, #20
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr
 800779e:	bf00      	nop
 80077a0:	20000dcc 	.word	0x20000dcc

080077a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80077ac:	f7ff f980 	bl	8006ab0 <xTaskGetTickCount>
 80077b0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80077b2:	4b0b      	ldr	r3, [pc, #44]	; (80077e0 <prvSampleTimeNow+0x3c>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	68fa      	ldr	r2, [r7, #12]
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d205      	bcs.n	80077c8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80077bc:	f000 f936 	bl	8007a2c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2201      	movs	r2, #1
 80077c4:	601a      	str	r2, [r3, #0]
 80077c6:	e002      	b.n	80077ce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80077ce:	4a04      	ldr	r2, [pc, #16]	; (80077e0 <prvSampleTimeNow+0x3c>)
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80077d4:	68fb      	ldr	r3, [r7, #12]
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3710      	adds	r7, #16
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	20000ddc 	.word	0x20000ddc

080077e4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b086      	sub	sp, #24
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	60b9      	str	r1, [r7, #8]
 80077ee:	607a      	str	r2, [r7, #4]
 80077f0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80077f2:	2300      	movs	r3, #0
 80077f4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	68ba      	ldr	r2, [r7, #8]
 80077fa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	68fa      	ldr	r2, [r7, #12]
 8007800:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007802:	68ba      	ldr	r2, [r7, #8]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	429a      	cmp	r2, r3
 8007808:	d812      	bhi.n	8007830 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800780a:	687a      	ldr	r2, [r7, #4]
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	1ad2      	subs	r2, r2, r3
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	699b      	ldr	r3, [r3, #24]
 8007814:	429a      	cmp	r2, r3
 8007816:	d302      	bcc.n	800781e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007818:	2301      	movs	r3, #1
 800781a:	617b      	str	r3, [r7, #20]
 800781c:	e01b      	b.n	8007856 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800781e:	4b10      	ldr	r3, [pc, #64]	; (8007860 <prvInsertTimerInActiveList+0x7c>)
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	3304      	adds	r3, #4
 8007826:	4619      	mov	r1, r3
 8007828:	4610      	mov	r0, r2
 800782a:	f7fd ff20 	bl	800566e <vListInsert>
 800782e:	e012      	b.n	8007856 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	429a      	cmp	r2, r3
 8007836:	d206      	bcs.n	8007846 <prvInsertTimerInActiveList+0x62>
 8007838:	68ba      	ldr	r2, [r7, #8]
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	429a      	cmp	r2, r3
 800783e:	d302      	bcc.n	8007846 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007840:	2301      	movs	r3, #1
 8007842:	617b      	str	r3, [r7, #20]
 8007844:	e007      	b.n	8007856 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007846:	4b07      	ldr	r3, [pc, #28]	; (8007864 <prvInsertTimerInActiveList+0x80>)
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	3304      	adds	r3, #4
 800784e:	4619      	mov	r1, r3
 8007850:	4610      	mov	r0, r2
 8007852:	f7fd ff0c 	bl	800566e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007856:	697b      	ldr	r3, [r7, #20]
}
 8007858:	4618      	mov	r0, r3
 800785a:	3718      	adds	r7, #24
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}
 8007860:	20000dd0 	.word	0x20000dd0
 8007864:	20000dcc 	.word	0x20000dcc

08007868 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b08e      	sub	sp, #56	; 0x38
 800786c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800786e:	e0ca      	b.n	8007a06 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2b00      	cmp	r3, #0
 8007874:	da18      	bge.n	80078a8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007876:	1d3b      	adds	r3, r7, #4
 8007878:	3304      	adds	r3, #4
 800787a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800787c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800787e:	2b00      	cmp	r3, #0
 8007880:	d10a      	bne.n	8007898 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007886:	f383 8811 	msr	BASEPRI, r3
 800788a:	f3bf 8f6f 	isb	sy
 800788e:	f3bf 8f4f 	dsb	sy
 8007892:	61fb      	str	r3, [r7, #28]
}
 8007894:	bf00      	nop
 8007896:	e7fe      	b.n	8007896 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800789e:	6850      	ldr	r0, [r2, #4]
 80078a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078a2:	6892      	ldr	r2, [r2, #8]
 80078a4:	4611      	mov	r1, r2
 80078a6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	f2c0 80aa 	blt.w	8007a04 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80078b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b6:	695b      	ldr	r3, [r3, #20]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d004      	beq.n	80078c6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80078bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078be:	3304      	adds	r3, #4
 80078c0:	4618      	mov	r0, r3
 80078c2:	f7fd ff0d 	bl	80056e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80078c6:	463b      	mov	r3, r7
 80078c8:	4618      	mov	r0, r3
 80078ca:	f7ff ff6b 	bl	80077a4 <prvSampleTimeNow>
 80078ce:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2b09      	cmp	r3, #9
 80078d4:	f200 8097 	bhi.w	8007a06 <prvProcessReceivedCommands+0x19e>
 80078d8:	a201      	add	r2, pc, #4	; (adr r2, 80078e0 <prvProcessReceivedCommands+0x78>)
 80078da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078de:	bf00      	nop
 80078e0:	08007909 	.word	0x08007909
 80078e4:	08007909 	.word	0x08007909
 80078e8:	08007909 	.word	0x08007909
 80078ec:	0800797d 	.word	0x0800797d
 80078f0:	08007991 	.word	0x08007991
 80078f4:	080079db 	.word	0x080079db
 80078f8:	08007909 	.word	0x08007909
 80078fc:	08007909 	.word	0x08007909
 8007900:	0800797d 	.word	0x0800797d
 8007904:	08007991 	.word	0x08007991
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800790a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800790e:	f043 0301 	orr.w	r3, r3, #1
 8007912:	b2da      	uxtb	r2, r3
 8007914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007916:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800791a:	68ba      	ldr	r2, [r7, #8]
 800791c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800791e:	699b      	ldr	r3, [r3, #24]
 8007920:	18d1      	adds	r1, r2, r3
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007926:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007928:	f7ff ff5c 	bl	80077e4 <prvInsertTimerInActiveList>
 800792c:	4603      	mov	r3, r0
 800792e:	2b00      	cmp	r3, #0
 8007930:	d069      	beq.n	8007a06 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007934:	6a1b      	ldr	r3, [r3, #32]
 8007936:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007938:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800793a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800793c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007940:	f003 0304 	and.w	r3, r3, #4
 8007944:	2b00      	cmp	r3, #0
 8007946:	d05e      	beq.n	8007a06 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007948:	68ba      	ldr	r2, [r7, #8]
 800794a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800794c:	699b      	ldr	r3, [r3, #24]
 800794e:	441a      	add	r2, r3
 8007950:	2300      	movs	r3, #0
 8007952:	9300      	str	r3, [sp, #0]
 8007954:	2300      	movs	r3, #0
 8007956:	2100      	movs	r1, #0
 8007958:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800795a:	f7ff fe05 	bl	8007568 <xTimerGenericCommand>
 800795e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007960:	6a3b      	ldr	r3, [r7, #32]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d14f      	bne.n	8007a06 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800796a:	f383 8811 	msr	BASEPRI, r3
 800796e:	f3bf 8f6f 	isb	sy
 8007972:	f3bf 8f4f 	dsb	sy
 8007976:	61bb      	str	r3, [r7, #24]
}
 8007978:	bf00      	nop
 800797a:	e7fe      	b.n	800797a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800797c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800797e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007982:	f023 0301 	bic.w	r3, r3, #1
 8007986:	b2da      	uxtb	r2, r3
 8007988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800798a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800798e:	e03a      	b.n	8007a06 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007992:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007996:	f043 0301 	orr.w	r3, r3, #1
 800799a:	b2da      	uxtb	r2, r3
 800799c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800799e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80079a2:	68ba      	ldr	r2, [r7, #8]
 80079a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80079a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079aa:	699b      	ldr	r3, [r3, #24]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d10a      	bne.n	80079c6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80079b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b4:	f383 8811 	msr	BASEPRI, r3
 80079b8:	f3bf 8f6f 	isb	sy
 80079bc:	f3bf 8f4f 	dsb	sy
 80079c0:	617b      	str	r3, [r7, #20]
}
 80079c2:	bf00      	nop
 80079c4:	e7fe      	b.n	80079c4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80079c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c8:	699a      	ldr	r2, [r3, #24]
 80079ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079cc:	18d1      	adds	r1, r2, r3
 80079ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079d4:	f7ff ff06 	bl	80077e4 <prvInsertTimerInActiveList>
					break;
 80079d8:	e015      	b.n	8007a06 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80079da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079e0:	f003 0302 	and.w	r3, r3, #2
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d103      	bne.n	80079f0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80079e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079ea:	f000 fbe1 	bl	80081b0 <vPortFree>
 80079ee:	e00a      	b.n	8007a06 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80079f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079f6:	f023 0301 	bic.w	r3, r3, #1
 80079fa:	b2da      	uxtb	r2, r3
 80079fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007a02:	e000      	b.n	8007a06 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007a04:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007a06:	4b08      	ldr	r3, [pc, #32]	; (8007a28 <prvProcessReceivedCommands+0x1c0>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	1d39      	adds	r1, r7, #4
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f7fe f9f4 	bl	8005dfc <xQueueReceive>
 8007a14:	4603      	mov	r3, r0
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	f47f af2a 	bne.w	8007870 <prvProcessReceivedCommands+0x8>
	}
}
 8007a1c:	bf00      	nop
 8007a1e:	bf00      	nop
 8007a20:	3730      	adds	r7, #48	; 0x30
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	20000dd4 	.word	0x20000dd4

08007a2c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b088      	sub	sp, #32
 8007a30:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007a32:	e048      	b.n	8007ac6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a34:	4b2d      	ldr	r3, [pc, #180]	; (8007aec <prvSwitchTimerLists+0xc0>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a3e:	4b2b      	ldr	r3, [pc, #172]	; (8007aec <prvSwitchTimerLists+0xc0>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	68db      	ldr	r3, [r3, #12]
 8007a44:	68db      	ldr	r3, [r3, #12]
 8007a46:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	3304      	adds	r3, #4
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f7fd fe47 	bl	80056e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	6a1b      	ldr	r3, [r3, #32]
 8007a56:	68f8      	ldr	r0, [r7, #12]
 8007a58:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a60:	f003 0304 	and.w	r3, r3, #4
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d02e      	beq.n	8007ac6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	699b      	ldr	r3, [r3, #24]
 8007a6c:	693a      	ldr	r2, [r7, #16]
 8007a6e:	4413      	add	r3, r2
 8007a70:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007a72:	68ba      	ldr	r2, [r7, #8]
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d90e      	bls.n	8007a98 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	68ba      	ldr	r2, [r7, #8]
 8007a7e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	68fa      	ldr	r2, [r7, #12]
 8007a84:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007a86:	4b19      	ldr	r3, [pc, #100]	; (8007aec <prvSwitchTimerLists+0xc0>)
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	3304      	adds	r3, #4
 8007a8e:	4619      	mov	r1, r3
 8007a90:	4610      	mov	r0, r2
 8007a92:	f7fd fdec 	bl	800566e <vListInsert>
 8007a96:	e016      	b.n	8007ac6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007a98:	2300      	movs	r3, #0
 8007a9a:	9300      	str	r3, [sp, #0]
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	693a      	ldr	r2, [r7, #16]
 8007aa0:	2100      	movs	r1, #0
 8007aa2:	68f8      	ldr	r0, [r7, #12]
 8007aa4:	f7ff fd60 	bl	8007568 <xTimerGenericCommand>
 8007aa8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d10a      	bne.n	8007ac6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab4:	f383 8811 	msr	BASEPRI, r3
 8007ab8:	f3bf 8f6f 	isb	sy
 8007abc:	f3bf 8f4f 	dsb	sy
 8007ac0:	603b      	str	r3, [r7, #0]
}
 8007ac2:	bf00      	nop
 8007ac4:	e7fe      	b.n	8007ac4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007ac6:	4b09      	ldr	r3, [pc, #36]	; (8007aec <prvSwitchTimerLists+0xc0>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d1b1      	bne.n	8007a34 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007ad0:	4b06      	ldr	r3, [pc, #24]	; (8007aec <prvSwitchTimerLists+0xc0>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007ad6:	4b06      	ldr	r3, [pc, #24]	; (8007af0 <prvSwitchTimerLists+0xc4>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a04      	ldr	r2, [pc, #16]	; (8007aec <prvSwitchTimerLists+0xc0>)
 8007adc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007ade:	4a04      	ldr	r2, [pc, #16]	; (8007af0 <prvSwitchTimerLists+0xc4>)
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	6013      	str	r3, [r2, #0]
}
 8007ae4:	bf00      	nop
 8007ae6:	3718      	adds	r7, #24
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}
 8007aec:	20000dcc 	.word	0x20000dcc
 8007af0:	20000dd0 	.word	0x20000dd0

08007af4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b082      	sub	sp, #8
 8007af8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007afa:	f000 f96b 	bl	8007dd4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007afe:	4b15      	ldr	r3, [pc, #84]	; (8007b54 <prvCheckForValidListAndQueue+0x60>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d120      	bne.n	8007b48 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007b06:	4814      	ldr	r0, [pc, #80]	; (8007b58 <prvCheckForValidListAndQueue+0x64>)
 8007b08:	f7fd fd60 	bl	80055cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007b0c:	4813      	ldr	r0, [pc, #76]	; (8007b5c <prvCheckForValidListAndQueue+0x68>)
 8007b0e:	f7fd fd5d 	bl	80055cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007b12:	4b13      	ldr	r3, [pc, #76]	; (8007b60 <prvCheckForValidListAndQueue+0x6c>)
 8007b14:	4a10      	ldr	r2, [pc, #64]	; (8007b58 <prvCheckForValidListAndQueue+0x64>)
 8007b16:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007b18:	4b12      	ldr	r3, [pc, #72]	; (8007b64 <prvCheckForValidListAndQueue+0x70>)
 8007b1a:	4a10      	ldr	r2, [pc, #64]	; (8007b5c <prvCheckForValidListAndQueue+0x68>)
 8007b1c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007b1e:	2300      	movs	r3, #0
 8007b20:	9300      	str	r3, [sp, #0]
 8007b22:	4b11      	ldr	r3, [pc, #68]	; (8007b68 <prvCheckForValidListAndQueue+0x74>)
 8007b24:	4a11      	ldr	r2, [pc, #68]	; (8007b6c <prvCheckForValidListAndQueue+0x78>)
 8007b26:	2110      	movs	r1, #16
 8007b28:	200a      	movs	r0, #10
 8007b2a:	f7fd fe6b 	bl	8005804 <xQueueGenericCreateStatic>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	4a08      	ldr	r2, [pc, #32]	; (8007b54 <prvCheckForValidListAndQueue+0x60>)
 8007b32:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007b34:	4b07      	ldr	r3, [pc, #28]	; (8007b54 <prvCheckForValidListAndQueue+0x60>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d005      	beq.n	8007b48 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007b3c:	4b05      	ldr	r3, [pc, #20]	; (8007b54 <prvCheckForValidListAndQueue+0x60>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	490b      	ldr	r1, [pc, #44]	; (8007b70 <prvCheckForValidListAndQueue+0x7c>)
 8007b42:	4618      	mov	r0, r3
 8007b44:	f7fe fc6e 	bl	8006424 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007b48:	f000 f974 	bl	8007e34 <vPortExitCritical>
}
 8007b4c:	bf00      	nop
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
 8007b52:	bf00      	nop
 8007b54:	20000dd4 	.word	0x20000dd4
 8007b58:	20000da4 	.word	0x20000da4
 8007b5c:	20000db8 	.word	0x20000db8
 8007b60:	20000dcc 	.word	0x20000dcc
 8007b64:	20000dd0 	.word	0x20000dd0
 8007b68:	20000e80 	.word	0x20000e80
 8007b6c:	20000de0 	.word	0x20000de0
 8007b70:	08008558 	.word	0x08008558

08007b74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007b74:	b480      	push	{r7}
 8007b76:	b085      	sub	sp, #20
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	60f8      	str	r0, [r7, #12]
 8007b7c:	60b9      	str	r1, [r7, #8]
 8007b7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	3b04      	subs	r3, #4
 8007b84:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007b8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	3b04      	subs	r3, #4
 8007b92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	f023 0201 	bic.w	r2, r3, #1
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	3b04      	subs	r3, #4
 8007ba2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007ba4:	4a0c      	ldr	r2, [pc, #48]	; (8007bd8 <pxPortInitialiseStack+0x64>)
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	3b14      	subs	r3, #20
 8007bae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	3b04      	subs	r3, #4
 8007bba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f06f 0202 	mvn.w	r2, #2
 8007bc2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	3b20      	subs	r3, #32
 8007bc8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007bca:	68fb      	ldr	r3, [r7, #12]
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3714      	adds	r7, #20
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr
 8007bd8:	08007bdd 	.word	0x08007bdd

08007bdc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b085      	sub	sp, #20
 8007be0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007be2:	2300      	movs	r3, #0
 8007be4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007be6:	4b12      	ldr	r3, [pc, #72]	; (8007c30 <prvTaskExitError+0x54>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bee:	d00a      	beq.n	8007c06 <prvTaskExitError+0x2a>
	__asm volatile
 8007bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf4:	f383 8811 	msr	BASEPRI, r3
 8007bf8:	f3bf 8f6f 	isb	sy
 8007bfc:	f3bf 8f4f 	dsb	sy
 8007c00:	60fb      	str	r3, [r7, #12]
}
 8007c02:	bf00      	nop
 8007c04:	e7fe      	b.n	8007c04 <prvTaskExitError+0x28>
	__asm volatile
 8007c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c0a:	f383 8811 	msr	BASEPRI, r3
 8007c0e:	f3bf 8f6f 	isb	sy
 8007c12:	f3bf 8f4f 	dsb	sy
 8007c16:	60bb      	str	r3, [r7, #8]
}
 8007c18:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007c1a:	bf00      	nop
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d0fc      	beq.n	8007c1c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007c22:	bf00      	nop
 8007c24:	bf00      	nop
 8007c26:	3714      	adds	r7, #20
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr
 8007c30:	2000000c 	.word	0x2000000c
	...

08007c40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007c40:	4b07      	ldr	r3, [pc, #28]	; (8007c60 <pxCurrentTCBConst2>)
 8007c42:	6819      	ldr	r1, [r3, #0]
 8007c44:	6808      	ldr	r0, [r1, #0]
 8007c46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c4a:	f380 8809 	msr	PSP, r0
 8007c4e:	f3bf 8f6f 	isb	sy
 8007c52:	f04f 0000 	mov.w	r0, #0
 8007c56:	f380 8811 	msr	BASEPRI, r0
 8007c5a:	4770      	bx	lr
 8007c5c:	f3af 8000 	nop.w

08007c60 <pxCurrentTCBConst2>:
 8007c60:	200008a4 	.word	0x200008a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007c64:	bf00      	nop
 8007c66:	bf00      	nop

08007c68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007c68:	4808      	ldr	r0, [pc, #32]	; (8007c8c <prvPortStartFirstTask+0x24>)
 8007c6a:	6800      	ldr	r0, [r0, #0]
 8007c6c:	6800      	ldr	r0, [r0, #0]
 8007c6e:	f380 8808 	msr	MSP, r0
 8007c72:	f04f 0000 	mov.w	r0, #0
 8007c76:	f380 8814 	msr	CONTROL, r0
 8007c7a:	b662      	cpsie	i
 8007c7c:	b661      	cpsie	f
 8007c7e:	f3bf 8f4f 	dsb	sy
 8007c82:	f3bf 8f6f 	isb	sy
 8007c86:	df00      	svc	0
 8007c88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007c8a:	bf00      	nop
 8007c8c:	e000ed08 	.word	0xe000ed08

08007c90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b086      	sub	sp, #24
 8007c94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007c96:	4b46      	ldr	r3, [pc, #280]	; (8007db0 <xPortStartScheduler+0x120>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a46      	ldr	r2, [pc, #280]	; (8007db4 <xPortStartScheduler+0x124>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d10a      	bne.n	8007cb6 <xPortStartScheduler+0x26>
	__asm volatile
 8007ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca4:	f383 8811 	msr	BASEPRI, r3
 8007ca8:	f3bf 8f6f 	isb	sy
 8007cac:	f3bf 8f4f 	dsb	sy
 8007cb0:	613b      	str	r3, [r7, #16]
}
 8007cb2:	bf00      	nop
 8007cb4:	e7fe      	b.n	8007cb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007cb6:	4b3e      	ldr	r3, [pc, #248]	; (8007db0 <xPortStartScheduler+0x120>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a3f      	ldr	r2, [pc, #252]	; (8007db8 <xPortStartScheduler+0x128>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d10a      	bne.n	8007cd6 <xPortStartScheduler+0x46>
	__asm volatile
 8007cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc4:	f383 8811 	msr	BASEPRI, r3
 8007cc8:	f3bf 8f6f 	isb	sy
 8007ccc:	f3bf 8f4f 	dsb	sy
 8007cd0:	60fb      	str	r3, [r7, #12]
}
 8007cd2:	bf00      	nop
 8007cd4:	e7fe      	b.n	8007cd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007cd6:	4b39      	ldr	r3, [pc, #228]	; (8007dbc <xPortStartScheduler+0x12c>)
 8007cd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	781b      	ldrb	r3, [r3, #0]
 8007cde:	b2db      	uxtb	r3, r3
 8007ce0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	22ff      	movs	r2, #255	; 0xff
 8007ce6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007cf0:	78fb      	ldrb	r3, [r7, #3]
 8007cf2:	b2db      	uxtb	r3, r3
 8007cf4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007cf8:	b2da      	uxtb	r2, r3
 8007cfa:	4b31      	ldr	r3, [pc, #196]	; (8007dc0 <xPortStartScheduler+0x130>)
 8007cfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007cfe:	4b31      	ldr	r3, [pc, #196]	; (8007dc4 <xPortStartScheduler+0x134>)
 8007d00:	2207      	movs	r2, #7
 8007d02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007d04:	e009      	b.n	8007d1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007d06:	4b2f      	ldr	r3, [pc, #188]	; (8007dc4 <xPortStartScheduler+0x134>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	3b01      	subs	r3, #1
 8007d0c:	4a2d      	ldr	r2, [pc, #180]	; (8007dc4 <xPortStartScheduler+0x134>)
 8007d0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007d10:	78fb      	ldrb	r3, [r7, #3]
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	005b      	lsls	r3, r3, #1
 8007d16:	b2db      	uxtb	r3, r3
 8007d18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007d1a:	78fb      	ldrb	r3, [r7, #3]
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d22:	2b80      	cmp	r3, #128	; 0x80
 8007d24:	d0ef      	beq.n	8007d06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007d26:	4b27      	ldr	r3, [pc, #156]	; (8007dc4 <xPortStartScheduler+0x134>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f1c3 0307 	rsb	r3, r3, #7
 8007d2e:	2b04      	cmp	r3, #4
 8007d30:	d00a      	beq.n	8007d48 <xPortStartScheduler+0xb8>
	__asm volatile
 8007d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d36:	f383 8811 	msr	BASEPRI, r3
 8007d3a:	f3bf 8f6f 	isb	sy
 8007d3e:	f3bf 8f4f 	dsb	sy
 8007d42:	60bb      	str	r3, [r7, #8]
}
 8007d44:	bf00      	nop
 8007d46:	e7fe      	b.n	8007d46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007d48:	4b1e      	ldr	r3, [pc, #120]	; (8007dc4 <xPortStartScheduler+0x134>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	021b      	lsls	r3, r3, #8
 8007d4e:	4a1d      	ldr	r2, [pc, #116]	; (8007dc4 <xPortStartScheduler+0x134>)
 8007d50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007d52:	4b1c      	ldr	r3, [pc, #112]	; (8007dc4 <xPortStartScheduler+0x134>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007d5a:	4a1a      	ldr	r2, [pc, #104]	; (8007dc4 <xPortStartScheduler+0x134>)
 8007d5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	b2da      	uxtb	r2, r3
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007d66:	4b18      	ldr	r3, [pc, #96]	; (8007dc8 <xPortStartScheduler+0x138>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a17      	ldr	r2, [pc, #92]	; (8007dc8 <xPortStartScheduler+0x138>)
 8007d6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007d70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007d72:	4b15      	ldr	r3, [pc, #84]	; (8007dc8 <xPortStartScheduler+0x138>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a14      	ldr	r2, [pc, #80]	; (8007dc8 <xPortStartScheduler+0x138>)
 8007d78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007d7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007d7e:	f000 f8dd 	bl	8007f3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007d82:	4b12      	ldr	r3, [pc, #72]	; (8007dcc <xPortStartScheduler+0x13c>)
 8007d84:	2200      	movs	r2, #0
 8007d86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007d88:	f000 f8fc 	bl	8007f84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007d8c:	4b10      	ldr	r3, [pc, #64]	; (8007dd0 <xPortStartScheduler+0x140>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a0f      	ldr	r2, [pc, #60]	; (8007dd0 <xPortStartScheduler+0x140>)
 8007d92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007d96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007d98:	f7ff ff66 	bl	8007c68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007d9c:	f7fe ff52 	bl	8006c44 <vTaskSwitchContext>
	prvTaskExitError();
 8007da0:	f7ff ff1c 	bl	8007bdc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007da4:	2300      	movs	r3, #0
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3718      	adds	r7, #24
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
 8007dae:	bf00      	nop
 8007db0:	e000ed00 	.word	0xe000ed00
 8007db4:	410fc271 	.word	0x410fc271
 8007db8:	410fc270 	.word	0x410fc270
 8007dbc:	e000e400 	.word	0xe000e400
 8007dc0:	20000ed0 	.word	0x20000ed0
 8007dc4:	20000ed4 	.word	0x20000ed4
 8007dc8:	e000ed20 	.word	0xe000ed20
 8007dcc:	2000000c 	.word	0x2000000c
 8007dd0:	e000ef34 	.word	0xe000ef34

08007dd4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	af00      	add	r7, sp, #0
	__asm volatile
 8007dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dde:	f383 8811 	msr	BASEPRI, r3
 8007de2:	f3bf 8f6f 	isb	sy
 8007de6:	f3bf 8f4f 	dsb	sy
 8007dea:	607b      	str	r3, [r7, #4]
}
 8007dec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007dee:	4b0f      	ldr	r3, [pc, #60]	; (8007e2c <vPortEnterCritical+0x58>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	3301      	adds	r3, #1
 8007df4:	4a0d      	ldr	r2, [pc, #52]	; (8007e2c <vPortEnterCritical+0x58>)
 8007df6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007df8:	4b0c      	ldr	r3, [pc, #48]	; (8007e2c <vPortEnterCritical+0x58>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d10f      	bne.n	8007e20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007e00:	4b0b      	ldr	r3, [pc, #44]	; (8007e30 <vPortEnterCritical+0x5c>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d00a      	beq.n	8007e20 <vPortEnterCritical+0x4c>
	__asm volatile
 8007e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e0e:	f383 8811 	msr	BASEPRI, r3
 8007e12:	f3bf 8f6f 	isb	sy
 8007e16:	f3bf 8f4f 	dsb	sy
 8007e1a:	603b      	str	r3, [r7, #0]
}
 8007e1c:	bf00      	nop
 8007e1e:	e7fe      	b.n	8007e1e <vPortEnterCritical+0x4a>
	}
}
 8007e20:	bf00      	nop
 8007e22:	370c      	adds	r7, #12
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr
 8007e2c:	2000000c 	.word	0x2000000c
 8007e30:	e000ed04 	.word	0xe000ed04

08007e34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007e34:	b480      	push	{r7}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007e3a:	4b12      	ldr	r3, [pc, #72]	; (8007e84 <vPortExitCritical+0x50>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d10a      	bne.n	8007e58 <vPortExitCritical+0x24>
	__asm volatile
 8007e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e46:	f383 8811 	msr	BASEPRI, r3
 8007e4a:	f3bf 8f6f 	isb	sy
 8007e4e:	f3bf 8f4f 	dsb	sy
 8007e52:	607b      	str	r3, [r7, #4]
}
 8007e54:	bf00      	nop
 8007e56:	e7fe      	b.n	8007e56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007e58:	4b0a      	ldr	r3, [pc, #40]	; (8007e84 <vPortExitCritical+0x50>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	3b01      	subs	r3, #1
 8007e5e:	4a09      	ldr	r2, [pc, #36]	; (8007e84 <vPortExitCritical+0x50>)
 8007e60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007e62:	4b08      	ldr	r3, [pc, #32]	; (8007e84 <vPortExitCritical+0x50>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d105      	bne.n	8007e76 <vPortExitCritical+0x42>
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	f383 8811 	msr	BASEPRI, r3
}
 8007e74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007e76:	bf00      	nop
 8007e78:	370c      	adds	r7, #12
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr
 8007e82:	bf00      	nop
 8007e84:	2000000c 	.word	0x2000000c
	...

08007e90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007e90:	f3ef 8009 	mrs	r0, PSP
 8007e94:	f3bf 8f6f 	isb	sy
 8007e98:	4b15      	ldr	r3, [pc, #84]	; (8007ef0 <pxCurrentTCBConst>)
 8007e9a:	681a      	ldr	r2, [r3, #0]
 8007e9c:	f01e 0f10 	tst.w	lr, #16
 8007ea0:	bf08      	it	eq
 8007ea2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007ea6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eaa:	6010      	str	r0, [r2, #0]
 8007eac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007eb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007eb4:	f380 8811 	msr	BASEPRI, r0
 8007eb8:	f3bf 8f4f 	dsb	sy
 8007ebc:	f3bf 8f6f 	isb	sy
 8007ec0:	f7fe fec0 	bl	8006c44 <vTaskSwitchContext>
 8007ec4:	f04f 0000 	mov.w	r0, #0
 8007ec8:	f380 8811 	msr	BASEPRI, r0
 8007ecc:	bc09      	pop	{r0, r3}
 8007ece:	6819      	ldr	r1, [r3, #0]
 8007ed0:	6808      	ldr	r0, [r1, #0]
 8007ed2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ed6:	f01e 0f10 	tst.w	lr, #16
 8007eda:	bf08      	it	eq
 8007edc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007ee0:	f380 8809 	msr	PSP, r0
 8007ee4:	f3bf 8f6f 	isb	sy
 8007ee8:	4770      	bx	lr
 8007eea:	bf00      	nop
 8007eec:	f3af 8000 	nop.w

08007ef0 <pxCurrentTCBConst>:
 8007ef0:	200008a4 	.word	0x200008a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007ef4:	bf00      	nop
 8007ef6:	bf00      	nop

08007ef8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b082      	sub	sp, #8
 8007efc:	af00      	add	r7, sp, #0
	__asm volatile
 8007efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f02:	f383 8811 	msr	BASEPRI, r3
 8007f06:	f3bf 8f6f 	isb	sy
 8007f0a:	f3bf 8f4f 	dsb	sy
 8007f0e:	607b      	str	r3, [r7, #4]
}
 8007f10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007f12:	f7fe fddd 	bl	8006ad0 <xTaskIncrementTick>
 8007f16:	4603      	mov	r3, r0
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d003      	beq.n	8007f24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007f1c:	4b06      	ldr	r3, [pc, #24]	; (8007f38 <xPortSysTickHandler+0x40>)
 8007f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f22:	601a      	str	r2, [r3, #0]
 8007f24:	2300      	movs	r3, #0
 8007f26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	f383 8811 	msr	BASEPRI, r3
}
 8007f2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007f30:	bf00      	nop
 8007f32:	3708      	adds	r7, #8
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}
 8007f38:	e000ed04 	.word	0xe000ed04

08007f3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007f40:	4b0b      	ldr	r3, [pc, #44]	; (8007f70 <vPortSetupTimerInterrupt+0x34>)
 8007f42:	2200      	movs	r2, #0
 8007f44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007f46:	4b0b      	ldr	r3, [pc, #44]	; (8007f74 <vPortSetupTimerInterrupt+0x38>)
 8007f48:	2200      	movs	r2, #0
 8007f4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007f4c:	4b0a      	ldr	r3, [pc, #40]	; (8007f78 <vPortSetupTimerInterrupt+0x3c>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a0a      	ldr	r2, [pc, #40]	; (8007f7c <vPortSetupTimerInterrupt+0x40>)
 8007f52:	fba2 2303 	umull	r2, r3, r2, r3
 8007f56:	099b      	lsrs	r3, r3, #6
 8007f58:	4a09      	ldr	r2, [pc, #36]	; (8007f80 <vPortSetupTimerInterrupt+0x44>)
 8007f5a:	3b01      	subs	r3, #1
 8007f5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007f5e:	4b04      	ldr	r3, [pc, #16]	; (8007f70 <vPortSetupTimerInterrupt+0x34>)
 8007f60:	2207      	movs	r2, #7
 8007f62:	601a      	str	r2, [r3, #0]
}
 8007f64:	bf00      	nop
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr
 8007f6e:	bf00      	nop
 8007f70:	e000e010 	.word	0xe000e010
 8007f74:	e000e018 	.word	0xe000e018
 8007f78:	20000000 	.word	0x20000000
 8007f7c:	10624dd3 	.word	0x10624dd3
 8007f80:	e000e014 	.word	0xe000e014

08007f84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007f84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007f94 <vPortEnableVFP+0x10>
 8007f88:	6801      	ldr	r1, [r0, #0]
 8007f8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007f8e:	6001      	str	r1, [r0, #0]
 8007f90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007f92:	bf00      	nop
 8007f94:	e000ed88 	.word	0xe000ed88

08007f98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007f98:	b480      	push	{r7}
 8007f9a:	b085      	sub	sp, #20
 8007f9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007f9e:	f3ef 8305 	mrs	r3, IPSR
 8007fa2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2b0f      	cmp	r3, #15
 8007fa8:	d914      	bls.n	8007fd4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007faa:	4a17      	ldr	r2, [pc, #92]	; (8008008 <vPortValidateInterruptPriority+0x70>)
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	4413      	add	r3, r2
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007fb4:	4b15      	ldr	r3, [pc, #84]	; (800800c <vPortValidateInterruptPriority+0x74>)
 8007fb6:	781b      	ldrb	r3, [r3, #0]
 8007fb8:	7afa      	ldrb	r2, [r7, #11]
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	d20a      	bcs.n	8007fd4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc2:	f383 8811 	msr	BASEPRI, r3
 8007fc6:	f3bf 8f6f 	isb	sy
 8007fca:	f3bf 8f4f 	dsb	sy
 8007fce:	607b      	str	r3, [r7, #4]
}
 8007fd0:	bf00      	nop
 8007fd2:	e7fe      	b.n	8007fd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007fd4:	4b0e      	ldr	r3, [pc, #56]	; (8008010 <vPortValidateInterruptPriority+0x78>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007fdc:	4b0d      	ldr	r3, [pc, #52]	; (8008014 <vPortValidateInterruptPriority+0x7c>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d90a      	bls.n	8007ffa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe8:	f383 8811 	msr	BASEPRI, r3
 8007fec:	f3bf 8f6f 	isb	sy
 8007ff0:	f3bf 8f4f 	dsb	sy
 8007ff4:	603b      	str	r3, [r7, #0]
}
 8007ff6:	bf00      	nop
 8007ff8:	e7fe      	b.n	8007ff8 <vPortValidateInterruptPriority+0x60>
	}
 8007ffa:	bf00      	nop
 8007ffc:	3714      	adds	r7, #20
 8007ffe:	46bd      	mov	sp, r7
 8008000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008004:	4770      	bx	lr
 8008006:	bf00      	nop
 8008008:	e000e3f0 	.word	0xe000e3f0
 800800c:	20000ed0 	.word	0x20000ed0
 8008010:	e000ed0c 	.word	0xe000ed0c
 8008014:	20000ed4 	.word	0x20000ed4

08008018 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b08a      	sub	sp, #40	; 0x28
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008020:	2300      	movs	r3, #0
 8008022:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008024:	f7fe fc98 	bl	8006958 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008028:	4b5b      	ldr	r3, [pc, #364]	; (8008198 <pvPortMalloc+0x180>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d101      	bne.n	8008034 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008030:	f000 f920 	bl	8008274 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008034:	4b59      	ldr	r3, [pc, #356]	; (800819c <pvPortMalloc+0x184>)
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	4013      	ands	r3, r2
 800803c:	2b00      	cmp	r3, #0
 800803e:	f040 8093 	bne.w	8008168 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d01d      	beq.n	8008084 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008048:	2208      	movs	r2, #8
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	4413      	add	r3, r2
 800804e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f003 0307 	and.w	r3, r3, #7
 8008056:	2b00      	cmp	r3, #0
 8008058:	d014      	beq.n	8008084 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f023 0307 	bic.w	r3, r3, #7
 8008060:	3308      	adds	r3, #8
 8008062:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f003 0307 	and.w	r3, r3, #7
 800806a:	2b00      	cmp	r3, #0
 800806c:	d00a      	beq.n	8008084 <pvPortMalloc+0x6c>
	__asm volatile
 800806e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008072:	f383 8811 	msr	BASEPRI, r3
 8008076:	f3bf 8f6f 	isb	sy
 800807a:	f3bf 8f4f 	dsb	sy
 800807e:	617b      	str	r3, [r7, #20]
}
 8008080:	bf00      	nop
 8008082:	e7fe      	b.n	8008082 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d06e      	beq.n	8008168 <pvPortMalloc+0x150>
 800808a:	4b45      	ldr	r3, [pc, #276]	; (80081a0 <pvPortMalloc+0x188>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	687a      	ldr	r2, [r7, #4]
 8008090:	429a      	cmp	r2, r3
 8008092:	d869      	bhi.n	8008168 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008094:	4b43      	ldr	r3, [pc, #268]	; (80081a4 <pvPortMalloc+0x18c>)
 8008096:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008098:	4b42      	ldr	r3, [pc, #264]	; (80081a4 <pvPortMalloc+0x18c>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800809e:	e004      	b.n	80080aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80080a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80080a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80080aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d903      	bls.n	80080bc <pvPortMalloc+0xa4>
 80080b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d1f1      	bne.n	80080a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80080bc:	4b36      	ldr	r3, [pc, #216]	; (8008198 <pvPortMalloc+0x180>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d050      	beq.n	8008168 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80080c6:	6a3b      	ldr	r3, [r7, #32]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	2208      	movs	r2, #8
 80080cc:	4413      	add	r3, r2
 80080ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80080d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d2:	681a      	ldr	r2, [r3, #0]
 80080d4:	6a3b      	ldr	r3, [r7, #32]
 80080d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80080d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080da:	685a      	ldr	r2, [r3, #4]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	1ad2      	subs	r2, r2, r3
 80080e0:	2308      	movs	r3, #8
 80080e2:	005b      	lsls	r3, r3, #1
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d91f      	bls.n	8008128 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80080e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	4413      	add	r3, r2
 80080ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80080f0:	69bb      	ldr	r3, [r7, #24]
 80080f2:	f003 0307 	and.w	r3, r3, #7
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d00a      	beq.n	8008110 <pvPortMalloc+0xf8>
	__asm volatile
 80080fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080fe:	f383 8811 	msr	BASEPRI, r3
 8008102:	f3bf 8f6f 	isb	sy
 8008106:	f3bf 8f4f 	dsb	sy
 800810a:	613b      	str	r3, [r7, #16]
}
 800810c:	bf00      	nop
 800810e:	e7fe      	b.n	800810e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008112:	685a      	ldr	r2, [r3, #4]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	1ad2      	subs	r2, r2, r3
 8008118:	69bb      	ldr	r3, [r7, #24]
 800811a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800811c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008122:	69b8      	ldr	r0, [r7, #24]
 8008124:	f000 f908 	bl	8008338 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008128:	4b1d      	ldr	r3, [pc, #116]	; (80081a0 <pvPortMalloc+0x188>)
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	1ad3      	subs	r3, r2, r3
 8008132:	4a1b      	ldr	r2, [pc, #108]	; (80081a0 <pvPortMalloc+0x188>)
 8008134:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008136:	4b1a      	ldr	r3, [pc, #104]	; (80081a0 <pvPortMalloc+0x188>)
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	4b1b      	ldr	r3, [pc, #108]	; (80081a8 <pvPortMalloc+0x190>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	429a      	cmp	r2, r3
 8008140:	d203      	bcs.n	800814a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008142:	4b17      	ldr	r3, [pc, #92]	; (80081a0 <pvPortMalloc+0x188>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a18      	ldr	r2, [pc, #96]	; (80081a8 <pvPortMalloc+0x190>)
 8008148:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800814a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814c:	685a      	ldr	r2, [r3, #4]
 800814e:	4b13      	ldr	r3, [pc, #76]	; (800819c <pvPortMalloc+0x184>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	431a      	orrs	r2, r3
 8008154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008156:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815a:	2200      	movs	r2, #0
 800815c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800815e:	4b13      	ldr	r3, [pc, #76]	; (80081ac <pvPortMalloc+0x194>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	3301      	adds	r3, #1
 8008164:	4a11      	ldr	r2, [pc, #68]	; (80081ac <pvPortMalloc+0x194>)
 8008166:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008168:	f7fe fc04 	bl	8006974 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800816c:	69fb      	ldr	r3, [r7, #28]
 800816e:	f003 0307 	and.w	r3, r3, #7
 8008172:	2b00      	cmp	r3, #0
 8008174:	d00a      	beq.n	800818c <pvPortMalloc+0x174>
	__asm volatile
 8008176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800817a:	f383 8811 	msr	BASEPRI, r3
 800817e:	f3bf 8f6f 	isb	sy
 8008182:	f3bf 8f4f 	dsb	sy
 8008186:	60fb      	str	r3, [r7, #12]
}
 8008188:	bf00      	nop
 800818a:	e7fe      	b.n	800818a <pvPortMalloc+0x172>
	return pvReturn;
 800818c:	69fb      	ldr	r3, [r7, #28]
}
 800818e:	4618      	mov	r0, r3
 8008190:	3728      	adds	r7, #40	; 0x28
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop
 8008198:	20008be0 	.word	0x20008be0
 800819c:	20008bf4 	.word	0x20008bf4
 80081a0:	20008be4 	.word	0x20008be4
 80081a4:	20008bd8 	.word	0x20008bd8
 80081a8:	20008be8 	.word	0x20008be8
 80081ac:	20008bec 	.word	0x20008bec

080081b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b086      	sub	sp, #24
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d04d      	beq.n	800825e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80081c2:	2308      	movs	r3, #8
 80081c4:	425b      	negs	r3, r3
 80081c6:	697a      	ldr	r2, [r7, #20]
 80081c8:	4413      	add	r3, r2
 80081ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	685a      	ldr	r2, [r3, #4]
 80081d4:	4b24      	ldr	r3, [pc, #144]	; (8008268 <vPortFree+0xb8>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4013      	ands	r3, r2
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d10a      	bne.n	80081f4 <vPortFree+0x44>
	__asm volatile
 80081de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e2:	f383 8811 	msr	BASEPRI, r3
 80081e6:	f3bf 8f6f 	isb	sy
 80081ea:	f3bf 8f4f 	dsb	sy
 80081ee:	60fb      	str	r3, [r7, #12]
}
 80081f0:	bf00      	nop
 80081f2:	e7fe      	b.n	80081f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d00a      	beq.n	8008212 <vPortFree+0x62>
	__asm volatile
 80081fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008200:	f383 8811 	msr	BASEPRI, r3
 8008204:	f3bf 8f6f 	isb	sy
 8008208:	f3bf 8f4f 	dsb	sy
 800820c:	60bb      	str	r3, [r7, #8]
}
 800820e:	bf00      	nop
 8008210:	e7fe      	b.n	8008210 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	685a      	ldr	r2, [r3, #4]
 8008216:	4b14      	ldr	r3, [pc, #80]	; (8008268 <vPortFree+0xb8>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4013      	ands	r3, r2
 800821c:	2b00      	cmp	r3, #0
 800821e:	d01e      	beq.n	800825e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d11a      	bne.n	800825e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	685a      	ldr	r2, [r3, #4]
 800822c:	4b0e      	ldr	r3, [pc, #56]	; (8008268 <vPortFree+0xb8>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	43db      	mvns	r3, r3
 8008232:	401a      	ands	r2, r3
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008238:	f7fe fb8e 	bl	8006958 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	685a      	ldr	r2, [r3, #4]
 8008240:	4b0a      	ldr	r3, [pc, #40]	; (800826c <vPortFree+0xbc>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4413      	add	r3, r2
 8008246:	4a09      	ldr	r2, [pc, #36]	; (800826c <vPortFree+0xbc>)
 8008248:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800824a:	6938      	ldr	r0, [r7, #16]
 800824c:	f000 f874 	bl	8008338 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008250:	4b07      	ldr	r3, [pc, #28]	; (8008270 <vPortFree+0xc0>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	3301      	adds	r3, #1
 8008256:	4a06      	ldr	r2, [pc, #24]	; (8008270 <vPortFree+0xc0>)
 8008258:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800825a:	f7fe fb8b 	bl	8006974 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800825e:	bf00      	nop
 8008260:	3718      	adds	r7, #24
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
 8008266:	bf00      	nop
 8008268:	20008bf4 	.word	0x20008bf4
 800826c:	20008be4 	.word	0x20008be4
 8008270:	20008bf0 	.word	0x20008bf0

08008274 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008274:	b480      	push	{r7}
 8008276:	b085      	sub	sp, #20
 8008278:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800827a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800827e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008280:	4b27      	ldr	r3, [pc, #156]	; (8008320 <prvHeapInit+0xac>)
 8008282:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f003 0307 	and.w	r3, r3, #7
 800828a:	2b00      	cmp	r3, #0
 800828c:	d00c      	beq.n	80082a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	3307      	adds	r3, #7
 8008292:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f023 0307 	bic.w	r3, r3, #7
 800829a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800829c:	68ba      	ldr	r2, [r7, #8]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	1ad3      	subs	r3, r2, r3
 80082a2:	4a1f      	ldr	r2, [pc, #124]	; (8008320 <prvHeapInit+0xac>)
 80082a4:	4413      	add	r3, r2
 80082a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80082ac:	4a1d      	ldr	r2, [pc, #116]	; (8008324 <prvHeapInit+0xb0>)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80082b2:	4b1c      	ldr	r3, [pc, #112]	; (8008324 <prvHeapInit+0xb0>)
 80082b4:	2200      	movs	r2, #0
 80082b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	68ba      	ldr	r2, [r7, #8]
 80082bc:	4413      	add	r3, r2
 80082be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80082c0:	2208      	movs	r2, #8
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	1a9b      	subs	r3, r3, r2
 80082c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f023 0307 	bic.w	r3, r3, #7
 80082ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	4a15      	ldr	r2, [pc, #84]	; (8008328 <prvHeapInit+0xb4>)
 80082d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80082d6:	4b14      	ldr	r3, [pc, #80]	; (8008328 <prvHeapInit+0xb4>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	2200      	movs	r2, #0
 80082dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80082de:	4b12      	ldr	r3, [pc, #72]	; (8008328 <prvHeapInit+0xb4>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	2200      	movs	r2, #0
 80082e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	68fa      	ldr	r2, [r7, #12]
 80082ee:	1ad2      	subs	r2, r2, r3
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80082f4:	4b0c      	ldr	r3, [pc, #48]	; (8008328 <prvHeapInit+0xb4>)
 80082f6:	681a      	ldr	r2, [r3, #0]
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	4a0a      	ldr	r2, [pc, #40]	; (800832c <prvHeapInit+0xb8>)
 8008302:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	4a09      	ldr	r2, [pc, #36]	; (8008330 <prvHeapInit+0xbc>)
 800830a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800830c:	4b09      	ldr	r3, [pc, #36]	; (8008334 <prvHeapInit+0xc0>)
 800830e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008312:	601a      	str	r2, [r3, #0]
}
 8008314:	bf00      	nop
 8008316:	3714      	adds	r7, #20
 8008318:	46bd      	mov	sp, r7
 800831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831e:	4770      	bx	lr
 8008320:	20000ed8 	.word	0x20000ed8
 8008324:	20008bd8 	.word	0x20008bd8
 8008328:	20008be0 	.word	0x20008be0
 800832c:	20008be8 	.word	0x20008be8
 8008330:	20008be4 	.word	0x20008be4
 8008334:	20008bf4 	.word	0x20008bf4

08008338 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008338:	b480      	push	{r7}
 800833a:	b085      	sub	sp, #20
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008340:	4b28      	ldr	r3, [pc, #160]	; (80083e4 <prvInsertBlockIntoFreeList+0xac>)
 8008342:	60fb      	str	r3, [r7, #12]
 8008344:	e002      	b.n	800834c <prvInsertBlockIntoFreeList+0x14>
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	60fb      	str	r3, [r7, #12]
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	687a      	ldr	r2, [r7, #4]
 8008352:	429a      	cmp	r2, r3
 8008354:	d8f7      	bhi.n	8008346 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	68ba      	ldr	r2, [r7, #8]
 8008360:	4413      	add	r3, r2
 8008362:	687a      	ldr	r2, [r7, #4]
 8008364:	429a      	cmp	r2, r3
 8008366:	d108      	bne.n	800837a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	685a      	ldr	r2, [r3, #4]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	441a      	add	r2, r3
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	68ba      	ldr	r2, [r7, #8]
 8008384:	441a      	add	r2, r3
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	429a      	cmp	r2, r3
 800838c:	d118      	bne.n	80083c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681a      	ldr	r2, [r3, #0]
 8008392:	4b15      	ldr	r3, [pc, #84]	; (80083e8 <prvInsertBlockIntoFreeList+0xb0>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	429a      	cmp	r2, r3
 8008398:	d00d      	beq.n	80083b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	685a      	ldr	r2, [r3, #4]
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	441a      	add	r2, r3
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	681a      	ldr	r2, [r3, #0]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	601a      	str	r2, [r3, #0]
 80083b4:	e008      	b.n	80083c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80083b6:	4b0c      	ldr	r3, [pc, #48]	; (80083e8 <prvInsertBlockIntoFreeList+0xb0>)
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	601a      	str	r2, [r3, #0]
 80083be:	e003      	b.n	80083c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80083c8:	68fa      	ldr	r2, [r7, #12]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d002      	beq.n	80083d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	687a      	ldr	r2, [r7, #4]
 80083d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80083d6:	bf00      	nop
 80083d8:	3714      	adds	r7, #20
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr
 80083e2:	bf00      	nop
 80083e4:	20008bd8 	.word	0x20008bd8
 80083e8:	20008be0 	.word	0x20008be0

080083ec <__libc_init_array>:
 80083ec:	b570      	push	{r4, r5, r6, lr}
 80083ee:	4d0d      	ldr	r5, [pc, #52]	; (8008424 <__libc_init_array+0x38>)
 80083f0:	4c0d      	ldr	r4, [pc, #52]	; (8008428 <__libc_init_array+0x3c>)
 80083f2:	1b64      	subs	r4, r4, r5
 80083f4:	10a4      	asrs	r4, r4, #2
 80083f6:	2600      	movs	r6, #0
 80083f8:	42a6      	cmp	r6, r4
 80083fa:	d109      	bne.n	8008410 <__libc_init_array+0x24>
 80083fc:	4d0b      	ldr	r5, [pc, #44]	; (800842c <__libc_init_array+0x40>)
 80083fe:	4c0c      	ldr	r4, [pc, #48]	; (8008430 <__libc_init_array+0x44>)
 8008400:	f000 f82e 	bl	8008460 <_init>
 8008404:	1b64      	subs	r4, r4, r5
 8008406:	10a4      	asrs	r4, r4, #2
 8008408:	2600      	movs	r6, #0
 800840a:	42a6      	cmp	r6, r4
 800840c:	d105      	bne.n	800841a <__libc_init_array+0x2e>
 800840e:	bd70      	pop	{r4, r5, r6, pc}
 8008410:	f855 3b04 	ldr.w	r3, [r5], #4
 8008414:	4798      	blx	r3
 8008416:	3601      	adds	r6, #1
 8008418:	e7ee      	b.n	80083f8 <__libc_init_array+0xc>
 800841a:	f855 3b04 	ldr.w	r3, [r5], #4
 800841e:	4798      	blx	r3
 8008420:	3601      	adds	r6, #1
 8008422:	e7f2      	b.n	800840a <__libc_init_array+0x1e>
 8008424:	08008780 	.word	0x08008780
 8008428:	08008780 	.word	0x08008780
 800842c:	08008780 	.word	0x08008780
 8008430:	08008784 	.word	0x08008784

08008434 <memcpy>:
 8008434:	440a      	add	r2, r1
 8008436:	4291      	cmp	r1, r2
 8008438:	f100 33ff 	add.w	r3, r0, #4294967295
 800843c:	d100      	bne.n	8008440 <memcpy+0xc>
 800843e:	4770      	bx	lr
 8008440:	b510      	push	{r4, lr}
 8008442:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008446:	f803 4f01 	strb.w	r4, [r3, #1]!
 800844a:	4291      	cmp	r1, r2
 800844c:	d1f9      	bne.n	8008442 <memcpy+0xe>
 800844e:	bd10      	pop	{r4, pc}

08008450 <memset>:
 8008450:	4402      	add	r2, r0
 8008452:	4603      	mov	r3, r0
 8008454:	4293      	cmp	r3, r2
 8008456:	d100      	bne.n	800845a <memset+0xa>
 8008458:	4770      	bx	lr
 800845a:	f803 1b01 	strb.w	r1, [r3], #1
 800845e:	e7f9      	b.n	8008454 <memset+0x4>

08008460 <_init>:
 8008460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008462:	bf00      	nop
 8008464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008466:	bc08      	pop	{r3}
 8008468:	469e      	mov	lr, r3
 800846a:	4770      	bx	lr

0800846c <_fini>:
 800846c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800846e:	bf00      	nop
 8008470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008472:	bc08      	pop	{r3}
 8008474:	469e      	mov	lr, r3
 8008476:	4770      	bx	lr
